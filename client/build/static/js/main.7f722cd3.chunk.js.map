{"version":3,"sources":["assets/sad_trombone.mp3","assets/applause.mp3","utils/helpers.js","components/Card.js","components/GameOver.js","components/Board.js","firebaseConfig.js","firestore.js","config.js","components/Host.js","components/Modal.js","components/Guest.js","components/Lobby.js","components/Solo.js","components/Main.js","components/Rules.js","components/App.js","index.js"],"names":["module","exports","range","n","Array","keys","displaySet","tuple","matrix","rowSize","map","i","j","includes","join","console","log","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","push","selected","Number","nameThird","result","toString","trim","cardToggle","filter","reshuffle","newDeck","shuffle","slice","removeSelected","state","newCards","newBoard","index","indexOf","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","ry","rx","cy","cx","points","style","Card","colors","0","1","2","white","getFill","drawShape","props","desc","split","this","number","className","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","Component","GameOver","finalSound","soundEffect","gameOver","myName","applause","sadTrombone","src","autoPlay","marginTop","window","innerHeight","to","marginRight","solo","onClick","resetGame","Board","resize","debounce","forceUpdate","sets","addEventListener","removeEventListener","prevProps","prevState","JSON","stringify","setState","declarer","players","setFound","isEmpty","Object","borderColor","href","maxWidth","handleCardClick","info","name","score","handleRedeal","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","firestore","turnTime","playingTo","Host","handleHostName","e","preventDefault","inputName","handleCreateGame","gameTitle","gameRef","collection","doc","set","lastUpdate","FieldValue","serverTimestamp","activeGameUpdater","setInterval","update","actionsRef","get","then","snapshot","data","onSnapshot","docChanges","change","type","action","created","processAction","delete","markPointForDeclarer","newScore","newPlayers","$merge","setTimeout","clearInterval","payload","setAndSendState","updateSelected","triggerFoundSequence","newSelected","newState","removeSet","timeDeclared","initialDeck","initialGameState","nameInputRef","React","autoplay","onSubmit","ref","autoFocus","placeholder","value","onChange","target","Modal","children","popupVisible","visible","Guest","componentWillUnmount","processUpdate","updatedState","animate","animatedSet","shift","animationId","assign","displayAnimation","handleNickname","nameInput","playerName","localStorage","setItem","sendAction","resetLocalSelected","add","togglePopup","previousNickname","getItem","gameName","match","params","Lobby","unsubscribe","addGame","newGame","gamesRef","host","init","games","newGames","activeGames","g","updated","toMillis","now","Date","getTime","Math","round","game","debugging","cpuDelay","calculateIntervalFromDifficulty","createGameState","logTime","msg","toFixed","initialState","you","cpu","gameStarted","difficulty","cpuTurnInterval","cpuFound","Solo","handleStartGame","cpuTimer","cpuTurn","componentDidMount","cpuAnimation","animateCpuChoice","cpuCopy","pop","updatePlayerScore","delta","expireDeclare","performDeclare","undeclareID","clearTimeout","removeSelectedCards","cloneDeep","Fragment","handleDeclare","input","difficultyInput","min","max","orientation","tooltip","Main","Rules","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f722cd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sad_trombone.baad2ca9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/applause.c2030d5b.mp3\";","// @flow\nimport { shuffle } from 'lodash';\n\nexport const range = (n: number) => {\n  return [...Array(n).keys()];\n};\n\nconst displaySet = (tuple: Array<number>, rowSize: number = 3) => {\n  let matrix;\n  if (rowSize === 4) {\n    matrix = range(3).map(i => {\n      const row = range(4).map(j => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x';\n        }\n        return 'o';\n      });\n      return row.join('');\n    });\n  } else {\n    matrix = range(4).map(i => {\n      const row = range(3).map(j => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x';\n        }\n        return 'o';\n      });\n      return row.join('');\n    });\n  }\n  console.log(matrix.join('\\n'));\n};\n\nexport const serializeGame = (state: {\n  board: Array<string>,\n  deck: Array<string>,\n  selected: Array<string>,\n}) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  });\n  return status;\n};\n\nexport const countSets = (board: Array<string>, debug?: boolean, returnWhenFound?: boolean) => {\n  let count = 0;\n  let candidate = [];\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]];\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c]);\n          }\n          count++;\n          if (returnWhenFound) {\n            return count;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nexport const makeDeck = (): Array<string> => {\n  let deck = [];\n  range(3).forEach(c => {\n    range(3).forEach(n => {\n      range(3).forEach(s => {\n        range(3).forEach(f => {\n          const card = '' + c + s + n + f;\n          deck.push(card);\n        });\n      });\n    });\n  });\n  return deck;\n};\n\nexport const isSet = (selected: Array<string>) => {\n  if (selected.length !== 3) {\n    return false;\n  }\n  const [a, b, c] = selected;\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i]);\n    if (sum % 3 !== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const nameThird = (a: string, b: string) => {\n  let features;\n  let missing;\n  let result = '';\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i];\n    } else {\n      features = Number(a[i]) + Number(b[i]);\n      missing = (3 - features).toString();\n      result = result + missing;\n    }\n  }\n  return result.trim();\n};\n\nexport const cardToggle = (card: string, selected: Array<string>): Array<string> => {\n  if (selected.includes(card)) {\n    return selected.filter(c => c !== card);\n  } else {\n    return [...selected, card];\n  }\n};\n\nexport const reshuffle = ({\n  board,\n  deck,\n}: {\n  board: Array<string>,\n  deck: Array<string>,\n}): { board: Array<string>, deck: Array<string> } => {\n  let newDeck = shuffle([...board, ...deck]);\n  while (\n    countSets(newDeck.slice(0, 12), false, true) === 0 &&\n    countSets(newDeck, false, true) > 0\n  ) {\n    newDeck = shuffle(newDeck);\n  }\n  return {\n    deck: newDeck.slice(12),\n    board: newDeck.slice(0, 12),\n  };\n};\n\n// DB stuff\n\n// export const update = (ref, data) => {\n//   ref.set(\n//     {\n//       ...data,\n//     },\n//     { merge: true },\n//   );\n// };\n\nexport const removeSelected = (state: {\n  board: Array<string>,\n  deck: Array<string>,\n  selected: Array<string>,\n}): {\n  board: Array<string>,\n  deck: Array<string>,\n  selected: Array<string>,\n} => {\n  const { board, deck, selected } = state;\n  const newCards = deck.slice(0, 3);\n  let newBoard = [...board];\n  let newDeck = deck.slice(3);\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c);\n    newBoard[index] = newCards[i];\n  });\n  while (countSets(newBoard) === 0) {\n    ({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }));\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  };\n};\n","import React, { Component, Fragment } from 'react'\nimport { range } from '../utils/helpers'\nimport './card.css'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g display=\"none\" overflow=\"visible\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" id=\"canvasGrid\">\n          <rect \n          fill=\"#fff\"\n          strokeWidth=\"0\" \n          y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n        fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#00A91D',\n    1: '#3E009E',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape shape={shape} fill={this.getFill(color, fill)} color={this.colors[color]} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map(i => {\n          return (\n            <svg\n              key={i}\n              className=\"shape\"\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport sadTrombone from '../assets/sad_trombone.mp3'\nimport applause from '../assets/applause.mp3'\n\nclass GameOver extends Component {\n  finalSound = () => {\n    const { gameOver, myName } = this.props\n    const soundEffect = gameOver === myName ? applause : sadTrombone\n    return <audio src={soundEffect} autoPlay />\n  }\n\n  render() {\n    const { gameOver, myName } = this.props\n    return (\n      <div className=\"deep-purple lighten-2w\" style={{ height: '100vh' }}>\n        {this.finalSound()}\n        <div className=\"row center-align\">\n          <div\n            className=\"card col s8 offset-s2 m6 offset-m3\"\n            style={{ marginTop: window.innerHeight * 0.2 }}\n          >\n            <div className=\"card-content\">\n              <span className=\"card-title\">GAME OVER!</span>\n              <p>Winner: {gameOver} </p>\n            </div>\n            <div className=\"card-action\">\n              <Link to=\"/\" style={{ marginRight: 0 }}>\n                Main Menu\n              </Link>\n            </div>\n          </div>\n        </div>\n        {this.props.solo && (\n          <div className=\"row\">\n            <button className=\"btn\" onClick={this.props.resetGame}>\n              Play Again\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default GameOver\n","import React, { Component, Fragment } from 'react'\nimport { isEmpty, map, debounce } from 'lodash'\nimport { countSets, isSet } from '../utils/helpers'\nimport Card from './Card'\nimport { Link } from 'react-router-dom'\nimport GameOver from './GameOver'\n\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sets: countSets(props.board, true),\n    }\n  }\n\n  resize = debounce(() => {\n    this.forceUpdate()\n  }, 150)\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\n      this.setState({\n        sets: countSets(this.props.board, true),\n      })\n    }\n  }\n\n  render() {\n    const { board, selected, deck, declarer, players, gameOver, myName, setFound } = this.props\n    if (isEmpty(players) || !Object.keys(players).includes(myName)) {\n      return null\n    }\n    const borderColor = declarer ? players[declarer].color : players[myName].color\n    const { sets } = this.state\n    if (gameOver) {\n      return <GameOver gameOver={gameOver} myName={myName} />\n    }\n    return (\n      <Fragment>\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div className=\"nav-wrapper\">\n              {declarer ? (\n                <a href=\"#!\" className=\"brand-logo\">\n                  SET! {declarer}\n                </a>\n              ) : (\n                <a href=\"#!\" className=\"brand-logo\">\n                  Sets: {sets}\n                </a>\n              )}\n              <ul className=\"right hide-on-med-and-down\">\n                <li>\n                  <a href=\"badges.html\">Cards Left: {deck.length}</a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </div>\n        <div className=\"container\" style={{ maxWidth: 0.95 * window.innerHeight }}>\n          <div className=\"row\">\n            {board.map(card => {\n              return (\n                <div\n                  key={card}\n                  className={'col s4' + (selected.includes(card) ? borderColor : '')}\n                  onClick={() => {\n                    this.props.handleCardClick(card)\n                  }}\n                >\n                  <div\n                    className={`card ${\n                      setFound && selected.length === 3 && !selected.includes(card) ? 'blurry' : ''\n                    }`}\n                  >\n                    <Card desc={card} />\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"row\">\n            {map(players, (info, name) => {\n              return (\n                <div key={name} className=\"col s4 m3\">\n                  <span className={'player-name' + info.color}>\n                    {name}: {info.score}\n                  </span>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"row\">\n            {this.props.handleRedeal && (\n              <button onClick={this.props.handleRedeal} className=\"btn\">\n                Shuffle\n              </button>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default Board\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig","// import * as firebase from 'firebase';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\n// const settings = { timestampsInSnapshots: true };\n// firestore.settings(settings);\n\nexport default firestore\n","export const colors = [\n  ' light-blue lighten-3',\n  ' pink lighten-3',\n  ' amber accent-2',\n  ' purple darken-1',\n  ' light-green lighten-1',\n  ' orange accent-2',\n];","import * as React from 'react'\nimport Board from './Board'\nimport { makeDeck, cardToggle, reshuffle, removeSelected, isSet } from '../utils/helpers'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\nimport { colors } from '../config'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\nclass Host extends React.Component {\n\n  constructor(props) {\n    super(props)\n    const initialDeck = makeDeck()\n    const initialGameState = {\n      ...reshuffle({\n        deck: initialDeck.slice(12),\n        board: initialDeck.slice(0, 12),\n      }),\n      selected: [],\n    }\n    this.nameInputRef = React.createRef()\n\n    this.state = {\n      players: {},\n      gameTitle: '',\n      created: false,\n      myName: '',\n      inputName: '',\n      setFound: false,\n      autoplay: false,\n      declarer: null,\n      gameOver: false,\n      ...initialGameState,\n    }\n  }\n\n  handleHostName = (e) => {\n    e.preventDefault()\n    const { inputName } = this.state\n    this.setState({\n      myName: inputName,\n      players: {\n        [inputName]: {\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  handleCreateGame = (e) => {\n    e.preventDefault()\n    const { myName, board, deck, selected } = this.state\n    let gameTitle = this.state.gameTitle\n    if (gameTitle === '') {\n      gameTitle = `${myName}'s game`\n    }\n    this.gameRef = firestore.collection('games').doc(gameTitle)\n    this.gameRef.set({\n      board,\n      deck,\n      selected,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    this.activeGameUpdater = window.setInterval(() => {\n      this.gameRef.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    this.actionsRef = this.gameRef.collection('actions')\n    this.actionsRef.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        console.log(doc.id, '=>', doc.data())\n      })\n    })\n\n    this.actionsRef.onSnapshot(snapshot => {\n      snapshot.docChanges().forEach(change => {\n        if (change.type === 'added') {\n          const action = change.doc.data()\n          window.created = action.created\n          console.log(action)\n          this.processAction(action)\n          this.actionsRef.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    this.setState({\n      created: true,\n    })\n  }\n\n  markPointForDeclarer = (declarer) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = this.state\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo && declarer\n    if (gameOver) {\n      window.setTimeout(() => {\n        this.gameRef.delete()\n        clearInterval(this.activeGameUpdater)\n      }, 3000)\n    }\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  processAction = (action) => {\n    const { type, payload } = action\n    const { players, declarer } = this.state\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        this.setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer) {\n          this.updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  setAndSendState = (update) => {\n    this.setState(update)\n    this.gameRef.update({\n      ...update,\n    })\n  }\n\n  triggerFoundSequence = (selected, name) => {}\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      setTimeout(() => {\n        this.removeSet()\n      }, 4000)\n    }\n    this.setAndSendState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { myName } = this.state\n    if (!this.state.declarer) {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, myName)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setAndSendState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...newScores,\n        ...removeSelected(this.state),\n      }\n      this.setAndSendState(newState)\n    }\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameTitle,\n      created,\n      myName,\n      inputName,\n    } = this.state\n    if (myName === '') {\n      return (\n        <div className=\"container\">\n          <h4>Enter your name:</h4>\n          <form onSubmit={this.handleHostName}>\n            <input\n              ref={this.nameInputRef}\n              autoFocus\n              placeholder=\"hostname\"\n              value={inputName}\n              onChange={e => {\n                this.setState({ inputName: e.target.value })\n              }}\n            />\n            <button type=\"submit\" className=\"btn\">\n              Send\n            </button>\n          </form>\n        </div>\n      )\n    }\n    if (!created) {\n      return (\n        <div className=\"container\">\n          <h4>Name your game:</h4>\n          <form onSubmit={this.handleCreateGame}>\n            <input\n              placeholder={`${myName}'s game`}\n              onChange={e => {\n                this.setState({ gameTitle: e.target.value })\n              }}\n              value={gameTitle}\n            />\n            <button type=\"submit\" className=\"btn\">\n              Create\n            </button>\n          </form>\n        </div>\n      )\n    }\n    return (\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={this.handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        handleRedeal={this.handleRedeal}\n        players={players}\n        setFound={this.state.setFound}\n        gameOver={this.state.gameOver}\n        myName={this.state.myName}\n      />\n    )\n  }\n}\n\nexport default Host\n","import React from 'react'\n\nconst Modal = ({ children, visible: popupVisible }) => {\n  return (\n    <div className=\"modal popup-message\" style={{ display: popupVisible ? 'block' : 'none' }}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default Modal\n","import * as React from 'react'\nimport Board from './Board'\nimport { isEmpty } from 'lodash'\nimport { cardToggle, isSet } from '../utils/helpers'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\nimport Modal from './Modal'\n\nclass Guest extends React.Component {\n  constructor(props) {\n    super(props)\n    const initialGameState = {\n      deck: [],\n      board: [],\n      selected: [],\n    }\n    this.state = {\n      popupVisible: false,\n      name: '',\n      nameInput: '',\n      setFound: false,\n      displayAnimation: false,\n      animatedSet: [],\n      declarer: '',\n      ...initialGameState,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.declarer && this.state.declarer) {\n      this.setState({\n        popupVisible: false,\n      })\n    }\n  }\n\n  componentDidMount() {\n    const previousNickname = localStorage.getItem('nickname')\n    const { gameName } = this.props.match.params\n    if (previousNickname) {\n      this.setState({\n        nameInput: previousNickname,\n      })\n    }\n    this.gameRef = firestore.collection('games').doc(gameName)\n    this.gameRef.onSnapshot(doc => {\n      this.processUpdate(doc)\n    })\n    this.actionsRef = this.gameRef.collection('actions')\n  }\n\n  componentWillUnmount = () => {\n    if (this.gameRef) {\n      this.gameRef()\n    }\n  }\n\n  processUpdate = doc => {\n    const updatedState = { ...doc.data() }\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    this.setState({\n      ...updatedState,\n      popupVisible: false,\n    })\n  }\n\n  animate = () => {\n    const animatedSet = [...this.state.animatedSet]\n    const newSelected = [...this.state.selected, animatedSet.shift()]\n    const newState = {\n      selected: newSelected,\n      animatedSet,\n    }\n    if (newSelected.length === 3) {\n      clearInterval(this.animationId)\n      Object.assign(newState, { displayAnimation: false })\n    }\n    this.setState(newState)\n  }\n\n  handleNickname = e => {\n    e.preventDefault()\n    const { nameInput } = this.state\n    const playerName = isEmpty(nameInput) ? 'guest' : nameInput\n    localStorage.setItem('nickname', playerName)\n    this.setState({\n      name: playerName,\n    })\n    this.sendAction({\n      type: 'join',\n      payload: { name: playerName },\n    })\n  }\n\n  handleCardClick = card => {\n    const { name, declarer } = this.state\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name },\n        }\n        this.sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1000)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  sendAction = action => {\n    this.actionsRef.add({\n      ...action,\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  togglePopup = () => {\n    this.setState(state => ({\n      popupVisible: !state.popupVisible,\n    }))\n  }\n\n  resetLocalSelected = () => {\n    // NOTE: Need to be sure a real set wasn't found during the delay\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      return\n    }\n    if (selected.length === 3 && !declarer) {\n      this.setState({\n        selected: [],\n      })\n    }\n  }\n\n  render() {\n    const { board, deck, selected, name, declarer, players, popupVisible } = this.state\n    if (!name) {\n      return (\n        <div className=\"container\">\n          <h4>Choose nickname</h4>\n          <form onSubmit={this.handleNickname}>\n            <input\n              type=\"text\"\n              placeholder=\"your name\"\n              value={this.state.nameInput}\n              onChange={e => this.setState({ nameInput: e.target.value })}\n            />\n            <input className=\"btn\" type=\"submit\" />\n          </form>\n        </div>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">SET!</p>\n          <div className=\"progress\">\n            <div className=\"indeterminate\" style={{ width: '30%' }} />\n          </div>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          // handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          // syncing={this.state.syncing}\n          myName={this.state.name}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Guest\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot(snapshot => {\n      const newGames = []\n      snapshot.forEach(doc => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  addGame = e => {\n    e.preventDefault()\n    const { newGame } = this.state\n    this.gamesRef.doc(newGame).set({\n      host: 'bill',\n    })\n  }\n\n  render() {\n    const { games, init } = this.state\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter(g => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col s8 offset-s2 m6 offset-m3\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <Link to=\"/\">Back</Link>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"center-align\">Available games</h4>\n            <div className=\"row center-align\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col s6 m4\" key={game.name}>\n                    <Link to={`/guest/${game.name}`}>\n                      <div className=\"card-panel\">{game.name}</div>\n                    </Link>\n                  </div>\n                )\n              })}\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport Slider from 'react-rangeslider'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst calculateIntervalFromDifficulty = d => {\n  return 12000 / (2.5 * Number(d))\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: false,\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass Solo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = e => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n    })\n    console.log(`Turns every ${this.state.cpuTurnInterval} ms`)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const { difficulty } = this.state\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.cpuTimer)\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver } = this.state\n    if (declarer || gameOver) {\n      return\n    }\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      clearInterval(this.cpuTimer)\n      this.cpuAnimation = setInterval(this.animateCpuChoice, 1000)\n    }\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    const newSelected = [...selected, cpuCopy.pop()]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      clearInterval(this.cpuAnimation)\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (name: string, delta: number) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -1)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = declarer => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo && declarer\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = declarer => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected: Array<string>, declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = card => {\n    const { setFound, declarer, name } = this.state\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(name)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          <h4>Choose difficulty</h4>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              <form onSubmit={this.handleStartGame}>\n                <Slider\n                  ref={input => {\n                    this.difficultyInput = input\n                  }}\n                  min={1}\n                  max={5}\n                  orientation=\"horizontal\"\n                  tooltip={true}\n                  value={this.state.difficulty}\n                  onChange={difficulty => {\n                    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n                    this.setState({\n                      cpuTurnInterval,\n                      difficulty,\n                    })\n                  }}\n                />\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Solo\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <h2 className=\"center-align\">Main Menu</h2>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s8 offset-s2 m3 offset-m1\">\n            <Link to=\"/solo\">\n              <div className=\"card\">\n                <Card desc=\"0012\" />\n              </div>\n            </Link>\n            <p className=\"center-align\">Play Solo</p>\n          </div>\n          <div className=\"col s8 offset-s2 m3\">\n            <Link to=\"/lobby\">\n              <div className=\"card\">\n                <Card desc=\"1121\" />\n              </div>\n            </Link>\n            <p className=\"center-align\">Join Game</p>\n          </div>\n          <div className=\"col s8 offset-s2 m3\">\n            <Link to=\"/host\">\n              <div className=\"card\">\n                <Card desc=\"2200\" />\n              </div>\n            </Link>\n            <p className=\"center-align\">Host Game</p>\n          </div>\n        </div>\n        {/* <ul className=\"collection\">\n          <li className=\"collection-item\">\n            <Link to=\"/rules\">Rules</Link>\n          </li>\n        </ul> */}\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React, { Component } from 'react'\nimport Card from './Card'\n\nfunction Rules() {\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find a sets of three cards that are either the same or\n        different along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0000\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1210\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0022\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2101\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0120\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2011\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        You'll notice that every card has four different characteristics:\n        <ul className=\"browser-default\">\n          <li>color</li>\n          <li>number</li>\n          <li>shape</li>\n          <li>fill</li>\n        </ul>\n        and each of those characteristics has three different possibilities.\n      </p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        Which you can describe as follows:\n        <ul className=\"browser-default\">\n          <li>color - SAME</li>\n          <li>shape - SAME</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - DIFFERENT</li>\n        </ul>\n        Therefore, the three cards form a set.\n      </p>\n      <p>Here is another set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - SAME</li>\n        </ul>\n      </p>\n      <p>This is not a set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>fill - SAME</li>\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - NOT THE SAME OR DIFFERENT!</li>\n        </ul>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - DIFFERENT</li>\n        </ul>\n        Each characteristic is different for all three cards, so this is a set.\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Host from './Host'\nimport Guest from './Guest'\nimport Lobby from './Lobby'\nimport Solo from './Solo'\nimport Main from './Main'\nimport Rules from './Rules'\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/rules\" component={Rules} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}