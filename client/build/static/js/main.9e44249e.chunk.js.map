{"version":3,"sources":["assets/sad_trombone.mp3","assets/applause.mp3","redux-helpers.js","firebaseConfig.js","firestore.js","components/Signout.js","utils/helpers.tsx","components/Card.js","components/GameOver.js","config.js","components/TopBar.js","components/Board.js","components/PlayerList.js","components/Host.js","components/Modal.js","components/Guest.js","components/Lobby.js","components/Solo.tsx","components/Main.js","components/Rules.js","components/Login.js","components/SharedDevice.js","components/Stats.js","components/Puzzle.js","components/Routes.js","components/App.js","index.js"],"names":["module","exports","updateUser","user","type","payload","logOut","updateNickname","nickname","defaultUser","loading","reducers","state","action","newState","update","$set","store","createStore","combineReducers","composeWithDevTools","applyMiddleware","reduxThunk","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firestore","Signout","dispatch","useDispatch","history","useHistory","style","cursor","marginBottom","className","onClick","auth","signOut","then","console","log","push","range","n","Array","keys","displaySet","tuple","matrix","rowSize","map","i","j","includes","join","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","selected","Number","nameThird","result","toString","trim","cardToggle","filter","reshuffle","boardSize","minimumSets","newDeck","shuffle","slice","removeSelected","newCards","newBoard","index","indexOf","handleGoogleSignIn","provider","GoogleAuthProvider","signInWithPopup","token","credential","accessToken","catch","error","code","message","email","handleGoogleRedirect","signInWithRedirect","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","ry","rx","cy","cx","points","Card","colors","0","1","2","white","getFill","drawShape","props","desc","split","this","number","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","Component","GameOver","gameOver","myName","solo","useSelector","soundEffect","applause","sadTrombone","src","autoPlay","finalSound","marginTop","window","innerHeight","to","marginRight","formatTime","seconds","mm","Math","floor","ss","pad","TopBar","gameMode","declarer","setsFound","elapsedTime","startTime","sets","justifyContent","Board","useState","setSets","setWindowHeight","players","setFound","sharedDevice","useEffect","resize","debounce","addEventListener","removeEventListener","process","isEmpty","Object","borderColor","get","getBorderColor","playersArray","info","name","topBoxes","ceil","topPlayers","bottomPlayers","handlePlayerClick","score","maxWidth","handleCardClick","handleRedeal","PlayerList","isHost","setState","findKey","player","host","started","turnTime","playingTo","Host","userReducer","userLoading","firebaseRefs","useRef","current","initialDeck","initialGameState","gameInProgress","setGameInProgress","gameTitle","created","setFullState","currentState","uid","collection","where","querySnapshot","doc","data","reloadGame","game","activeGameUpdater","setInterval","lastUpdate","FieldValue","serverTimestamp","actions","snapshot","onSnapshot","docChanges","change","processAction","delete","subscribeToGame","newPlayers","setAndSendState","verifySelectedOnBoard","updateSelected","removeSet","newScores","newScore","$merge","setTimeout","clearInterval","markPointForDeclarer","timeDeclared","newSelected","undefined","onSubmit","e","preventDefault","autoFocus","placeholder","value","onChange","target","localStorage","setItem","set","creator_uid","Modal","children","popupVisible","visible","Guest","displayAnimation","animatedSet","pending","setMyName","sendAction","add","docRef","docId","gameName","match","params","unsubGames","updatedState","processUpdate","unsubActions","Fragment","resetLocalSelected","nameInput","Lobby","componentWillUnmount","unsubscribe","newGame","init","games","gamesRef","newGames","activeGames","g","updated","toMillis","now","Date","getTime","round","debugging","cpuDelay","calculateIntervalFromDifficulty","diff","isNaN","createGameState","logTime","msg","toFixed","initialState","you","cpu","gameStarted","cpuTurnInterval","Solo","handleStartGame","cpuTimer","cpuTurn","componentDidMount","savedDifficulty","getItem","difficulty","cpuFound","cpuAnimation","animateCpuChoice","cpuCopy","pop","updatePlayerScore","delta","expireDeclare","player_won","total_time","axios","post","difficulty_level","winning_score","err","performDeclare","undeclareId","clearTimeout","removeSelectedCards","resetGame","cloneDeep","handleDeclare","min","max","orientation","tooltip","connect","Main","Rules","Login","getRedirectResult","declareTime","createPlayers","num","numPlayers","SharedDevice","undeclareID","clickerName","Stats","stats","setStats","getStats","response","row","games_played","games_won","cardsOnBoard","minSets","getMinSets","setsOnBoard","popUpText","Puzzle","gameState","timeId","noCheck","isEqual","sort","every","ref","input","difficultyInput","format","v","cards","Routes","exact","path","component","App","onAuthStateChanged","displayName","myUser","emailVerified","photoURL","isAnonymous","providerData","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e44249e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sad_trombone.baad2ca9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/applause.c2030d5b.mp3\";","import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport update from 'immutability-helper'\n\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_NICKNAME = 'UPDATE_NICKNAME'\n\nexport const updateUser = (user) => ({\n  type: UPDATE_USER,\n  payload: user,\n})\n\nexport const logOut = () => ({\n  type: 'LOGOUT',\n})\n\nexport const updateNickname = (nickname) => ({\n  type: UPDATE_NICKNAME,\n  payload: nickname,\n})\n\nexport const defaultUser = { loading: true, user: {} }\n\nconst userReducer = (state = defaultUser, action) => {\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case UPDATE_NICKNAME:\n      const newState = update(state, {\n        user: { nickname: { $set: action.payload } },\n      })\n      return newState\n    case 'LOGOUT':\n      return { loading: false, user: null }\n    default:\n      return state\n  }\n}\n\nconst reducers = {\n  user: userReducer,\n}\n\nconst store = createStore(\n  combineReducers(reducers),\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n)\n\nexport default store\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig\n","import * as firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\nimport 'firebase/auth'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\nexport default firestore\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation,\n} from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { logOut } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\n\nfunction Signout() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch(logOut())\n        console.log('Signed out.')\n        history.push('/')\n      })\n  }\n\n  return (\n    <div style={{ cursor: 'pointer', marginBottom: '16px' }}>\n      <p className=\"right-align\">\n        <a onClick={signOut}>Sign Out</a>\n      </p>\n    </div>\n  )\n}\n\nexport default Signout\n","import { shuffle } from 'lodash'\nimport * as firebase from 'firebase/app'\nimport { GameState } from './models'\n\nexport const range = (n: number) => {\n  return [...Array(n).keys()]\n}\n\nconst displaySet = (tuple: Array<number>, rowSize: number = 3) => {\n  let matrix\n  if (rowSize === 4) {\n    matrix = range(3).map((i) => {\n      const row = range(4).map((j) => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  } else {\n    matrix = range(4).map((i) => {\n      const row = range(3).map((j) => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  }\n  console.log(matrix.join('\\n'))\n}\n\nexport const serializeGame = (state: {\n  board: Array<string>\n  deck: Array<string>\n  selected: Array<string>\n}) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  })\n  return status\n}\n\nexport const countSets = (board: string[], { debug = false, returnWhenFound = false } = {}) => {\n  let count = 0\n  let candidate = []\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]]\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c])\n          }\n          count++\n          if (returnWhenFound) {\n            return count\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nexport const makeDeck = (): string[] => {\n  let deck: string[] = []\n  range(3).forEach((c) => {\n    range(3).forEach((n) => {\n      range(3).forEach((s) => {\n        range(3).forEach((f) => {\n          const card = '' + c + s + n + f\n          deck.push(card)\n        })\n      })\n    })\n  })\n  return deck\n}\n\nexport const isSet = (selected: Array<string>) => {\n  if (selected.length !== 3) {\n    return false\n  }\n  const [a, b, c] = selected\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i])\n    if (sum % 3 !== 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const nameThird = (a: string, b: string) => {\n  let features\n  let missing\n  let result = ''\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i]\n    } else {\n      features = Number(a[i]) + Number(b[i])\n      missing = (3 - features).toString()\n      result = result + missing\n    }\n  }\n  return result.trim()\n}\n\nexport const cardToggle = (card: string, selected: string[]) => {\n  if (selected.includes(card)) {\n    return selected.filter((c) => c !== card)\n  } else {\n    return [...selected, card]\n  }\n}\n\nexport const reshuffle = ({ board = [], deck }: GameState, boardSize = 12, minimumSets = 1) => {\n  let newDeck = shuffle([...board, ...deck])\n  while (\n    countSets(newDeck.slice(0, boardSize)) < minimumSets &&\n    countSets(newDeck, { returnWhenFound: true }) > 0\n  ) {\n    newDeck = shuffle(newDeck)\n  }\n  return {\n    deck: newDeck.slice(boardSize),\n    board: newDeck.slice(0, boardSize),\n  }\n}\n\nexport const removeSelected = (state: { board: string[]; deck: string[]; selected: string[] }) => {\n  const { board, deck, selected } = state\n  const newCards = deck.slice(0, 3)\n  let newBoard = [...board]\n  let newDeck = deck.slice(3)\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c)\n    newBoard[index] = newCards[i]\n  })\n  while (countSets(newBoard) === 0) {\n    ;({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }))\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  }\n}\n\nexport const handleGoogleSignIn = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function(result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = result.credential as firebase.auth.OAuthCredential\n      var token = credential.accessToken\n      // The signed-in user info.\n      var user = result.user\n      console.log(token, user)\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code\n      var errorMessage = error.message\n      // The email of the user's account used.\n      var email = error.email\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential\n      // ...\n    })\n}\n\nexport const handleGoogleRedirect = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase.auth().signInWithRedirect(provider)\n}\n","import React, { Component, Fragment } from 'react'\nimport { range } from '../utils/helpers'\nimport './card.css'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g\n          display=\"none\"\n          overflow=\"visible\"\n          y=\"0\"\n          x=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n          id=\"canvasGrid\"\n        >\n          <rect fill=\"#fff\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#00A91D',\n    1: '#311b92',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape shape={shape} fill={this.getFill(color, fill)} color={this.colors[color]} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map((i) => {\n          return (\n            <svg\n              key={i}\n              className=\"shape\"\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport sadTrombone from '../assets/sad_trombone.mp3'\nimport applause from '../assets/applause.mp3'\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction GameOver(props) {\n  const { gameOver, myName, solo } = props\n  const finalSound = () => {\n    const soundEffect = gameOver === myName ? applause : sadTrombone\n    return <audio src={soundEffect} autoPlay />\n  }\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n\n  return (\n    <div className=\"deep-purple lighten-2\" style={{ height: '100vh' }}>\n      {finalSound()}\n      <div className=\"row center-align\">\n        <div\n          className=\"card col s8 offset-s2 m6 offset-m3\"\n          style={{ marginTop: window.innerHeight * 0.2 }}\n        >\n          <div className=\"card-content\">\n            <span className=\"card-title\">GAME OVER!</span>\n            <p>Winner: {gameOver} </p>\n          </div>\n          <div className=\"card-action\">\n            <p>\n              <Link to=\"/\" style={{ marginRight: '48px' }}>\n                Main Menu\n              </Link>\n              {solo && user !== null && (\n                <span className=\"right-align\">\n                  <Link to=\"/stats\">View Stats</Link>\n                </span>\n              )}\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* {solo && (\n        <div className=\"row\">\n          <button className=\"btn\" onClick={props.resetGame}>\n            Play Again\n          </button>\n        </div>\n      )} */}\n    </div>\n  )\n}\n\nexport default GameOver\n","export const colors = [\n  ' light-blue lighten-3',\n  ' pink lighten-3',\n  ' amber accent-2',\n  ' purple darken-1',\n  ' light-green lighten-1',\n  ' orange accent-2',\n]\n","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { countSets } from '../utils/helpers'\nimport { colors } from '../config'\n\nconst formatTime = (seconds) => {\n  const pad = (ss) => {\n    var p = '00'\n    var result = (p + ss).slice(-p.length)\n    return result\n  }\n  const mm = Math.floor(seconds / 60)\n  const ss = seconds - 60 * mm\n  return `${mm}:${pad(ss)}`\n}\n\nfunction TopBar({ gameMode, deck, board, declarer, setsFound, startTime, elapsedTime }) {\n  const sets = countSets(board)\n  switch (gameMode) {\n    case 'shared-device':\n      return null\n    case 'versus':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav className={`orange ${declarer ? 'lighten-1' : 'darken-1'}`}>\n            <div\n              className=\"nav-wrapper\"\n              style={{ display: 'flex', justifyContent: 'space-between' }}\n            >\n              <div>Sets: {sets}</div>\n              <div>{declarer && <>SET! {declarer}</>}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    case 'puzzle':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div\n              className=\"nav-wrapper\"\n              style={{ display: 'flex', justifyContent: 'space-between' }}\n            >\n              <div>Total Sets: {sets}</div>\n              <div>Remaining: {sets - setsFound.length}</div>\n              <div>Time: {formatTime(elapsedTime)}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nexport default TopBar\n","import React, { useEffect, useState, Component, Fragment } from 'react'\nimport { isEmpty, map, debounce, get } from 'lodash'\nimport { countSets } from '../utils/helpers'\nimport Card from './Card'\nimport GameOver from './GameOver'\nimport TopBar from './TopBar'\n\nfunction Board(props) {\n  const [sets, setSets] = useState(null)\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight)\n  const {\n    board,\n    selected,\n    deck,\n    declarer,\n    players,\n    gameOver,\n    myName,\n    setFound,\n    sharedDevice,\n    solo,\n    gameMode,\n  } = props\n\n  useEffect(() => {\n    const resize = debounce(() => {\n      setWindowHeight(window.innerHeight)\n    }, 150)\n\n    window.addEventListener('resize', resize)\n\n    return function cleanup() {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSets(countSets(board, { debug: process.env.NODE_ENV !== 'production' }))\n  }, [board])\n\n  if (isEmpty(players) || !Object.keys(players).includes(myName)) {\n    return null\n  }\n\n  const getBorderColor = ({ declarer, players }) => {\n    if (declarer) {\n      return get(players, `${declarer}.color`, '')\n    }\n    return get(players, `${myName}.color`, '')\n  }\n\n  const borderColor = getBorderColor(props)\n\n  if (gameOver) {\n    return <GameOver gameOver={gameOver} myName={myName} solo={solo} />\n  }\n\n  const playersArray = map(players, (info, name) => {\n    return {\n      name,\n      ...info,\n    }\n  })\n\n  const topBoxes = Math.ceil(playersArray.length / 2)\n  const topPlayers = playersArray.slice(0, topBoxes)\n  const bottomPlayers = playersArray.slice(topBoxes)\n\n  return (\n    <Fragment>\n      <TopBar {...props} />\n      {sharedDevice && (\n        <Fragment>\n          <div className=\"player-buttons-container\">\n            {topPlayers.map((info) => {\n              return (\n                <div\n                  className={`shared-player player-name ${info.color} ${\n                    info.name == declarer ? 'active-player' : ''\n                  }`}\n                  onClick={() => {\n                    props.handlePlayerClick(info.name)\n                  }}\n                  key={info.name}\n                >\n                  <p className=\"center-align\">{info.name == declarer ? 'SET!' : info.score}</p>\n                </div>\n              )\n            })}\n            <div className=\"player-buttons-container bottom\">\n              {bottomPlayers.map((info) => {\n                return (\n                  <div\n                    className={`shared-player player-name ${info.color} ${\n                      info.name == declarer ? 'active-player' : ''\n                    }`}\n                    onClick={() => {\n                      props.handlePlayerClick(info.name)\n                    }}\n                    key={info.name}\n                  >\n                    <p className=\"center-align\">{info.name == declarer ? 'SET!' : info.score}</p>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </Fragment>\n      )}\n\n      <div className=\"container\" style={{ maxWidth: window.innerHeight - 48 }}>\n        <div className=\"row\">\n          {board.map((card) => {\n            return (\n              <div\n                key={card}\n                className={`col s4 ${selected.includes(card) ? borderColor : ''}`}\n                onClick={() => {\n                  props.handleCardClick(card)\n                }}\n              >\n                <div\n                  className={`card ${\n                    setFound && selected.length === 3 && !selected.includes(card) ? 'blurry' : ''\n                  }`}\n                >\n                  <Card desc={card} />\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        {!sharedDevice && gameMode !== 'puzzle' && (\n          <div className=\"row\">\n            {map(players, (info, name) => {\n              return (\n                <div key={name} className=\"col s4 m3\">\n                  <span className={`player-name ${info.color}`}>\n                    {name}: {info.score}\n                  </span>\n                </div>\n              )\n            })}\n          </div>\n        )}\n\n        {props.handleRedeal && (\n          <div className=\"row\">\n            <button onClick={props.handleRedeal} className=\"btn\">\n              Shuffle\n            </button>\n          </div>\n        )}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport { map, findKey } from 'lodash'\n\nfunction PlayerList({ isHost, players, setState }) {\n  const host = findKey(players, (player) => player.host)\n\n  return (\n    <div className=\"container\">\n      <h4>Players:</h4>\n      <ul className=\"collection\">\n        {map(players, (info, name) => {\n          return (\n            <li key={name} className=\"collection-item\">\n              <span className={`player-name`}>\n                {name} {info.host && '(host)'}\n              </span>\n            </li>\n          )\n        })}\n      </ul>\n      {isHost ? (\n        <button\n          className=\"btn\"\n          onClick={() => {\n            setState({\n              started: true,\n            })\n          }}\n        >\n          Start Game\n        </button>\n      ) : (\n        <p>Waiting for host to start game...</p>\n      )}\n    </div>\n  )\n}\n\nexport default PlayerList\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateNickname } from '../redux-helpers'\nimport { Link } from 'react-router-dom'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nimport Signout from './Signout'\nimport Board from './Board'\nimport {\n  handleGoogleSignIn,\n  handleGoogleRedirect,\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected,\n  isSet,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport PlayerList from './PlayerList'\nimport { findKey, isEmpty } from 'lodash'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\n// const firebaseRefs = {}\n\nfunction Host() {\n  const userReducer = useSelector((state) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current\n\n  const initialDeck = makeDeck()\n  const initialGameState = {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n\n  const [gameInProgress, setGameInProgress] = useState()\n\n  const [state, setFullState] = useState({\n    players: {},\n    gameTitle: '',\n    created: false,\n    started: false,\n    myName: '',\n    setFound: false,\n    declarer: null,\n    gameOver: false,\n    ...initialGameState,\n  })\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  useEffect(() => {\n    if (!isEmpty(user.uid)) {\n      firestore\n        .collection('games')\n        .where('creator_uid', '==', user.uid)\n        .get()\n        .then(function(querySnapshot) {\n          querySnapshot.forEach(function(doc) {\n            setGameInProgress({ gameTitle: doc.id, ...doc.data() })\n          })\n        })\n        .catch(function(error) {\n          console.log('Error getting documents: ', error)\n        })\n    }\n  }, [user])\n\n  const setState = (update) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const handleRejectResume = () => {\n    const { gameTitle } = gameInProgress\n    firestore\n      .collection('games')\n      .doc(gameTitle)\n      .delete()\n      .then(() => {\n        console.log('Deleted old game')\n        setGameInProgress(undefined)\n      })\n  }\n\n  const handleCardClick = (card) => {\n    const { myName } = state\n    if (!state.declarer) {\n      const newSelected = cardToggle(card, state.selected)\n      if (isSet(newSelected)) {\n        updateSelected(newSelected, myName)\n      }\n      setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  const handleRedeal = () => {\n    const newState = reshuffle(state)\n    setAndSendState(newState)\n  }\n\n  const subscribeToGame = (gameTitle) => {\n    firebaseRefs.game = firestore.collection('games').doc(gameTitle)\n    window.activeGameUpdater = window.setInterval(() => {\n      firebaseRefs.game.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n    firebaseRefs.actions.get().then((snapshot) => {\n      snapshot.forEach((doc) => {\n        console.log(doc.id, '=>', doc.data())\n      })\n    })\n    firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'added') {\n          const action = change.doc.data()\n          console.log(action)\n          processAction(action)\n          firebaseRefs.actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n  }\n\n  const reloadGame = (game) => {\n    console.log(game)\n    const host = findKey(game.players, (player) => player.host)\n\n    const { gameTitle } = game\n    subscribeToGame(gameTitle)\n    setState({\n      myName: host,\n      created: true,\n      ...game,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  const handleCreateGame = (e) => {\n    e.preventDefault()\n    const { myName, board, deck, selected, players } = state\n    let gameTitle = currentState.current.gameTitle\n    if (gameTitle === '') {\n      gameTitle = `${myName}'s game`\n    }\n    firebaseRefs.game = firestore.collection('games').doc(gameTitle)\n    firebaseRefs.game.set({\n      creator_uid: user.uid,\n      players,\n      board,\n      deck,\n      selected,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    window.activeGameUpdater = window.setInterval(() => {\n      firebaseRefs.game.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n    firebaseRefs.actions.get().then((snapshot) => {\n      snapshot.forEach((doc) => {\n        console.log(doc.id, '=>', doc.data())\n      })\n    })\n\n    firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'added') {\n          const action = change.doc.data()\n          console.log(action)\n          processAction(action)\n          firebaseRefs.actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n\n    setState({\n      created: true,\n    })\n  }\n\n  const handleSetName = (e) => {\n    e.preventDefault()\n    setState({\n      myName: user.nickname,\n      players: {\n        [user.nickname]: {\n          host: true,\n          uid: user.uid,\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  const markPointForDeclarer = (declarer) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = currentState.current\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo && declarer\n    if (gameOver) {\n      window.setTimeout(() => {\n        firebaseRefs.game.delete()\n        clearInterval(window.activeGameUpdater)\n      }, 3000)\n    }\n\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  const processAction = (action) => {\n    const { type, payload } = action\n    const { players, declarer, board } = currentState.current\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            host: false,\n            uid: payload.uid,\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer && verifySelectedOnBoard(board, payload.selected)) {\n          updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  const removeSet = (selected, declarer) => {\n    if (isSet(selected)) {\n      const newScores = markPointForDeclarer(declarer)\n      const newState = {\n        ...currentState.current,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...newScores,\n        ...removeSelected(currentState.current),\n      }\n      setAndSendState(newState)\n    }\n  }\n\n  const setAndSendState = (update) => {\n    setState(update)\n    firebaseRefs.game.update(update)\n  }\n\n  const verifySelectedOnBoard = (board, selected) => {\n    for (let i = 0; i < selected.length; i++) {\n      if (!board.includes(selected[i])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    setAndSendState(newState)\n    if (newState.setFound) {\n      setTimeout(() => {\n        removeSet(newSelected, declarer)\n      }, 4000)\n    }\n  }\n\n  const { board, deck, selected, declarer, players, gameTitle, created, started, myName } = state\n\n  if (userLoading) {\n    return 'Loading...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container\">\n        <p>To host a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  if (gameInProgress && !state.created) {\n    return (\n      <div className=\"container\">\n        <p>You are already hosting a game. Return to it?</p>\n        <button className=\"btn\" onClick={() => reloadGame(gameInProgress)}>\n          YES!\n        </button>\n        <button className=\"btn\" onClick={handleRejectResume}>\n          No, remove it\n        </button>\n      </div>\n    )\n  }\n\n  if (myName === '') {\n    return (\n      <div className=\"container\">\n        <Signout />\n        <h4>Enter your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <input\n            autoFocus\n            placeholder=\"hostname\"\n            value={user.nickname}\n            onChange={(e) => {\n              dispatch(updateNickname(e.target.value))\n              window.localStorage.setItem('nickname', e.target.value)\n            }}\n          />\n          <button type=\"submit\" className=\"btn\">\n            Submit\n          </button>\n        </form>\n        <div>\n          <p>\n            <Link to=\"/\">Main Menu</Link>\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!created) {\n    return (\n      <div className=\"container\">\n        <h4>Name your game:</h4>\n        <form onSubmit={handleCreateGame}>\n          <input\n            autoFocus\n            placeholder={`${myName}'s game`}\n            onChange={(e) => {\n              setState({ gameTitle: e.target.value })\n            }}\n            value={gameTitle}\n          />\n          <button type=\"submit\" className=\"btn\">\n            Create\n          </button>\n        </form>\n      </div>\n    )\n  }\n\n  if (!started) {\n    return <PlayerList isHost={true} players={players} setState={setAndSendState} />\n  }\n\n  return (\n    <Board\n      board={board}\n      deck={deck}\n      selected={selected}\n      declarer={declarer}\n      handleCardClick={handleCardClick}\n      // handleDeclare={this.handleDeclare}\n      handleRedeal={handleRedeal}\n      players={players}\n      setFound={state.setFound}\n      gameOver={state.gameOver}\n      myName={state.myName}\n      gameMode=\"versus\"\n    />\n  )\n}\n\nexport default Host\n","import React from 'react'\n\nconst Modal = ({ children, visible: popupVisible }) => {\n  return (\n    <div className=\"modal popup-message\" style={{ display: popupVisible ? 'block' : 'none' }}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default Modal\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isEmpty } from 'lodash'\nimport { Link } from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport { updateNickname } from '../redux-helpers'\nimport { cardToggle, isSet, handleGoogleSignIn } from '../utils/helpers'\nimport firestore from '../firestore'\nimport Modal from './Modal'\nimport Signout from './Signout'\nimport Board from './Board'\nimport PlayerList from './PlayerList'\n\nfunction Guest(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const [state, setFullState] = useState({\n    popupVisible: false,\n    setFound: false,\n    displayAnimation: false,\n    animatedSet: [],\n    declarer: '',\n    deck: [],\n    board: [],\n    selected: [],\n    pending: null,\n    started: false,\n  })\n  const [myName, setMyName] = useState('')\n  const [modalDelayMsg, setDelayMsg] = useState()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current\n  // const [firebaseRefs, setFirebaseRefs] = useState({})\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  const setState = (update) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const handleCardClick = (card) => {\n    const { declarer, selected } = currentState.current\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name: myName },\n        }\n        sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1000)\n      }\n    }\n\n    setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  const handleSetName = (e) => {\n    e.preventDefault()\n    const nameInput = user.nickname\n    if (isEmpty(nameInput)) {\n      return\n    }\n    setMyName(nameInput)\n    sendAction({\n      type: 'join',\n      payload: { name: nameInput, uid: user.uid },\n    })\n  }\n\n  const processUpdate = (doc) => {\n    const updatedState = { ...doc.data() }\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    setState({\n      ...updatedState,\n      popupVisible: false,\n    })\n  }\n\n  const sendAction = (action) => {\n    firebaseRefs.actions\n      .add({\n        ...action,\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(function(docRef) {\n        if (action.type === 'found') {\n          const docId = docRef.id\n          console.log('Document written with ID: ', docId)\n          setState({\n            pending: docId,\n          })\n          // TODO: Trigger message if action isnt processed in reasonable time\n        }\n      })\n  }\n\n  useEffect(() => {\n    const { gameName } = props.match.params\n    firebaseRefs.game = firestore.collection('games').doc(gameName)\n    const unsubGames = firebaseRefs.game.onSnapshot((doc) => {\n      processUpdate(doc)\n    })\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n\n    const unsubActions = firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'removed') {\n          const { pending } = currentState.current\n          if (pending === change.doc.id) {\n            console.log('Pending action removed!')\n            setState({\n              pending: null,\n            })\n          }\n        }\n      })\n    })\n\n    return function cleanup() {\n      if (firebaseRefs.game) {\n        unsubGames()\n      }\n      if (firebaseRefs.actions) {\n        unsubActions()\n      }\n    }\n  }, [])\n\n  const { board, deck, selected, declarer, players, popupVisible, started } = state\n\n  if (userReducer.loading) {\n    return 'Loading profile...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container\">\n        <p>To join a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleSignIn} className=\"btn\">\n            Sign in\n          </button>\n        </p>\n        <p>\n          <Link to=\"/lobby\">Back</Link>\n        </p>\n      </div>\n    )\n  }\n  if (!myName) {\n    return (\n      <div className=\"container\">\n        <Signout />\n\n        <h4>Choose nickname</h4>\n        <form onSubmit={handleSetName}>\n          <input\n            autoFocus\n            type=\"text\"\n            placeholder=\"your name\"\n            value={user.nickname}\n            onChange={(e) => {\n              dispatch(updateNickname(e.target.value))\n              window.localStorage.setItem('nickname', e.target.value)\n            }}\n          />\n          <input className=\"btn\" type=\"submit\" value=\"Join\" />\n        </form>\n      </div>\n    )\n  }\n\n  if (!started) {\n    return <PlayerList players={players} isHost={false} />\n  }\n\n  return (\n    <React.Fragment>\n      <Modal visible={state.pending && popupVisible}>\n        <p className=\"flow-text center-align\">SET!</p>\n        <div className=\"progress\">\n          <div className=\"indeterminate\" style={{ width: '30%' }} />\n        </div>\n      </Modal>\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        players={players}\n        setFound={state.setFound}\n        gameOver={state.gameOver}\n        // syncing={this.state.syncing}\n        myName={myName}\n        gameMode=\"versus\"\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Guest\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot((snapshot) => {\n      const newGames = []\n      snapshot.forEach((doc) => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { games, init } = this.state\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter((g) => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col s8 offset-s2 m6 offset-m3\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <p>\n                  Click <Link to=\"/host\">here</Link> to host one\n                </p>\n                <p>\n                  <Link to=\"/\">Back</Link>\n                </p>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"center-align\">Available games</h4>\n            <div className=\"row center-align\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col s6 m4\" key={game.name}>\n                    <Link to={`/guest/${game.name}`}>\n                      <div className=\"card-panel\">{game.name}</div>\n                    </Link>\n                  </div>\n                )\n              })}\n              <p>\n                <Link to=\"/\">Back</Link>\n              </p>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n  handleGoogleRedirect,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport Slider from 'react-rangeslider'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport Signout from './Signout'\n\nimport { Players, GameState } from '../utils/models'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst calculateIntervalFromDifficulty = (d: number) => {\n  let diff = Number(d)\n  if (Number.isNaN(diff)) {\n    diff = 1\n  }\n  const interval = 24000 / (5 * diff)\n  return interval\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  const selected: string[] = []\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected,\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  declarer: null,\n  gameOver: false,\n  cpuTurnInterval: 1000,\n  startTime: new Date(),\n}\n\ninterface State extends GameState {\n  players: Players\n  selected: string[]\n  cpuTimer?: number\n  gameStarted: boolean\n  name: string\n  setFound: boolean\n  declarer: null | string\n  timeDeclared?: number\n  gameOver: boolean\n  cpuTurnInterval: number\n  cpuFound?: string[]\n  startTime: Date\n  undeclareId?: number\n  difficulty?: number\n  cpuAnimation?: number\n}\n\nclass Solo extends Component<any, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n      startTime: new Date(),\n    })\n\n    console.log(`Turns every ${this.state.cpuTurnInterval} ms`)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const savedDifficulty = window.localStorage.getItem('soloDifficulty')\n    let difficulty = savedDifficulty ? Number(savedDifficulty) : 2\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      difficulty,\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    if (this.state.cpuTimer !== null) {\n      window.clearInterval(this.state.cpuTimer)\n    }\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver } = this.state\n    if (declarer || gameOver) {\n      return\n    }\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      if (this.state.cpuTimer !== null) {\n        clearInterval(this.state.cpuTimer)\n      }\n      this.setState({\n        cpuAnimation: window.setInterval(this.animateCpuChoice, 900),\n      })\n    }\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    if (cpuCopy.length === 0) {\n      return\n    }\n    const newSelected = [...selected, cpuCopy.pop() as string]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      if (this.state.cpuAnimation !== null) {\n        clearInterval(this.state.cpuAnimation)\n      }\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (name: string, delta: number): [Players, number] => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (declarer && !isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: undefined,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer: string) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const { user } = this.props.userReducer\n    const gameOver = !!(newScore >= config.playingTo && declarer)\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    if (gameOver) {\n      const uid = (user && user.uid) || 'anonymous'\n      const player_won = declarer == 'you' ? 1 : 0\n      const total_time = Math.round((new Date().getTime() - this.state.startTime.getTime()) / 1000)\n      axios\n        .post('/api/game', {\n          uid,\n          total_time,\n          player_won,\n          difficulty_level: this.state.difficulty,\n          winning_score: newScore,\n        })\n        .then(() => {\n          console.log('Game sent')\n        })\n        .catch((err) => {\n          console.log('Error sending game')\n        })\n    }\n    this.setState(newState)\n    return newState\n  }\n\n  performDeclare = (declarer: string) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n      this.setState({\n        undeclareId: window.setTimeout(() => {\n          this.expireDeclare()\n        }, config.turnTime),\n      })\n    }\n  }\n\n  updateSelected = (newSelected: Array<string>, declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      this.state.undeclareId && clearTimeout(this.state.undeclareId)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card: string) => {\n    const { setFound, declarer, name } = this.state\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(name)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (declarer && isSet(selected)) {\n      console.log('Set found, removing')\n      this.markPointForDeclarer(declarer)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: undefined,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    this.state.cpuTimer && clearInterval(this.state.cpuTimer)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          {user !== null && <Signout />}\n          <h3>Solo Play vs. Computer</h3>\n          <h4 className=\"orange-text text-darken-4\">Choose difficulty level:</h4>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              <form onSubmit={this.handleStartGame}>\n                <Slider\n                  min={1}\n                  max={5}\n                  orientation=\"horizontal\"\n                  tooltip={true}\n                  value={Number(this.state.difficulty)}\n                  onChange={(difficulty) => {\n                    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n                    window.localStorage.setItem('soloDifficulty', difficulty.toString())\n                    this.setState({\n                      cpuTurnInterval,\n                      difficulty,\n                    })\n                  }}\n                />\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n              <p style={{ marginTop: '24px' }}>First to {config.playingTo} points is the winner</p>\n            </div>\n            <div className=\"row\">\n              <div style={{ marginTop: '48px' }} className=\"col s12\">\n                <p>\n                  <Link to=\"/local\">Local Multiplayer</Link>\n                </p>\n                <p style={{ marginTop: '36px' }}>\n                  <Link to=\"/\">Back to Main Menu</Link>\n                </p>\n                {!user && (\n                  <Fragment>\n                    <hr />\n                    <p>To save your stats, sign in with your Google account.</p>\n\n                    <p>\n                      <button onClick={handleGoogleRedirect} className=\"btn\">\n                        Sign in\n                      </button>\n                    </p>\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={() => {}}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"versus\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Solo)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nfunction Main() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h2 className=\"center-align\">Main Menu</h2>\n      </div>\n      <div className=\"row\">\n        <div className=\"col s8 offset-s2 m3 offset-m1\">\n          <Link to=\"/solo\">\n            <div className=\"card\">\n              <Card desc=\"0012\" />\n            </div>\n          </Link>\n          <p className=\"center-align\">Solo/Local</p>\n        </div>\n        <div className=\"col s8 offset-s2 m3\">\n          <Link to=\"/lobby\">\n            <div className=\"card\">\n              <Card desc=\"1121\" />\n            </div>\n          </Link>\n          <p className=\"center-align\">Join Game</p>\n        </div>\n        <div className=\"col s8 offset-s2 m3\">\n          <Link to=\"/host\">\n            <div className=\"card\">\n              <Card desc=\"2200\" />\n            </div>\n          </Link>\n          <p className=\"center-align\">Host Game</p>\n        </div>\n      </div>\n      {/* <div>\n        <hr />\n          <p>\n          <Link to=\"/rules\">Rules</Link>\n\n          </p>\n          <p>\n          <Link to=\"/stats\">Statistics</Link>\n\n          </p>\n\n      </div> */}\n    </div>\n  )\n}\n\nexport default Main\n","import React, { Component } from 'react'\nimport Card from './Card'\n\nfunction Rules() {\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find a sets of three cards that are either the same or\n        different along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0000\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1210\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0022\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2101\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0120\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2011\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        You'll notice that every card has four different characteristics:\n        <ul className=\"browser-default\">\n          <li>color</li>\n          <li>number</li>\n          <li>shape</li>\n          <li>fill</li>\n        </ul>\n        and each of those characteristics has three different possibilities.\n      </p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        Which you can describe as follows:\n        <ul className=\"browser-default\">\n          <li>color - SAME</li>\n          <li>shape - SAME</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - DIFFERENT</li>\n        </ul>\n        Therefore, the three cards form a set.\n      </p>\n      <p>Here is another set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - SAME</li>\n        </ul>\n      </p>\n      <p>This is not a set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>fill - SAME</li>\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - NOT THE SAME OR DIFFERENT!</li>\n        </ul>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - DIFFERENT</li>\n        </ul>\n        Each characteristic is different for all three cards, so this is a set.\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Signout from './Signout'\nimport { handleGoogleRedirect } from '../utils/helpers'\nimport * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\nfunction Login(props) {\n  const user = useSelector((state) => state.user)\n\n  useEffect(() => {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(function(result) {\n        if (result.credential) {\n          // This gives you a Google Access Token. You can use it to access the Google API.\n          var token = result.credential.accessToken\n          // ...\n        }\n        // The signed-in user info.\n        var user = result.user\n        console.log(token, user)\n      })\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code\n        var errorMessage = error.message\n        // The email of the user's account used.\n        var email = error.email\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential\n        // ...\n      })\n  }, [])\n\n  if (!user) {\n    return (\n      <div className=\"container\">\n        <button onClick={handleGoogleRedirect} className=\"btn\">\n          Sign in\n        </button>\n      </div>\n    )\n  }\n  return (\n    <div className=\"container\">\n      <Signout />\n    </div>\n  )\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport { Link } from 'react-router-dom'\n\nconst debugging = false\n\nconst config = {\n  declareTime: 5000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst createPlayers = (num) => {\n  const players = {}\n  for (let i = 0; i < num; i++) {\n    players[i] = {\n      score: 0,\n      color: config.colors[i],\n    }\n  }\n  return players\n}\n\nconst initialState = {\n  numPlayers: null,\n  players: createPlayers(2),\n  gameStarted: false,\n  name: '1',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: false,\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass SharedDevice extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (numPlayers) => {\n    this.setState({\n      numPlayers,\n      players: createPlayers(numPlayers),\n    })\n    this.setState({\n      gameStarted: true,\n    })\n  }\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo && declarer\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.declareTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer } = this.state\n    if (!setFound && declarer !== null) {\n      const newSelected = cardToggle(card, this.state.selected)\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, declarer)\n      }\n    }\n  }\n\n  handlePlayerClick = (clickerName) => {\n    const { declarer } = this.state\n    if (declarer === null) {\n      this.performDeclare(clickerName)\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, numPlayers, setFound } = this.state\n    if (!numPlayers) {\n      return (\n        <div className=\"container\">\n          <h4>Choose Number of Players</h4>\n          <div className=\"row\">\n            <div className=\"col s12\">\n              {[...Array(6).keys()].map((i) => {\n                return (\n                  <div key={`players-${i}`} className=\"col s4 player-number\">\n                    <div\n                      onClick={() => {\n                        this.handleStartGame(i + 1)\n                      }}\n                      className=\"btn-large\"\n                    >\n                      {i + 1}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div>\n              <p>\n                <Link to=\"/solo\">Back</Link>\n              </p>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handlePlayerClick={this.handlePlayerClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          sharedDevice={true}\n          gameMode=\"shared-device\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SharedDevice\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport axios from 'axios'\n\nfunction Stats(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n  const [stats, setStats] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const getStats = async () => {\n      axios.get(`/api/user/stats/${user.uid}`).then((response) => {\n        setStats(response.data)\n      })\n    }\n\n    if (!userReducer.loading && user !== null) {\n      getStats()\n    }\n  }, [userReducer.loading])\n\n  if (userReducer.loading) {\n    return 'Loading...'\n  }\n\n  console.log(stats)\n\n  if (user === null) {\n    return <div>Sign in to view stats</div>\n  }\n\n  return (\n    <div className=\"container\">\n      <h3>Statistics</h3>\n      <table className=\"striped\">\n        <thead>\n          <tr>\n            <th>Difficulty</th>\n            <th>Games Played</th>\n            <th>Winning Percentage</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {stats &&\n            stats.map((row, i) => {\n              return (\n                <tr key={`stats-${i}`}>\n                  <td>{row.difficulty_level}</td>\n                  <td>{row.games_played}</td>\n                  <td>{Math.round(100 * (row.games_won / row.games_played))}%</td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n      <p>\n        <Link to=\"/\">Main Menu</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Stats\n","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport { shuffle, cloneDeep, isEqual } from 'lodash'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\nimport axios from 'axios'\nimport Slider from 'react-rangeslider'\nimport Modal from './Modal'\n\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n  countSets,\n  handleGoogleRedirect,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport Board from './Board'\nimport Signout from './Signout'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = (cardsOnBoard) => {\n  const getMinSets = (cardsOnBoard) => {\n    return Math.round((cardsOnBoard - 3) / 3)\n  }\n\n  const minSets = getMinSets(cardsOnBoard)\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle(\n      {\n        deck: initialDeck,\n      },\n      { boardSize: cardsOnBoard, minimumSets: minSets },\n    ),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  gameOver: false,\n  startTime: null,\n  elapsedTime: null,\n  setsFound: [],\n  setsOnBoard: null,\n  cardsOnBoard: 12,\n  popupVisible: false,\n  popUpText: 'SET!',\n}\n\nconst sortSet = (set) => {\n  return set.sort()\n}\n\nclass Puzzle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    const { cardsOnBoard } = this.state\n    const gameState = createGameState(cardsOnBoard)\n    const startTime = new Date()\n    this.setState({\n      gameStarted: true,\n      startTime,\n      elapsedTime: 0,\n      ...gameState,\n      setsOnBoard: countSets(gameState.board),\n    })\n    window.timeId = setInterval(() => {\n      const elapsedTime = Math.round((new Date().getTime() - startTime.getTime()) / 1000)\n      this.setState({\n        elapsedTime,\n      })\n    }, 1000)\n  }\n\n  componentDidMount = () => {}\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleDeclare = () => {\n    return\n  }\n\n  resetLocalSelected = (noCheck = false) => {\n    this.setState((currentState) => {\n      if (currentState.selected.length === 3) {\n        if (noCheck || !isSet(currentState.selected)) {\n          return {\n            selected: [],\n          }\n        }\n      }\n    })\n  }\n\n  handleCardClick = (card) => {\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        console.log('Set found')\n        this.setState((currentState) => {\n          window.setTimeout(() => {\n            this.setState({\n              popupVisible: false,\n            })\n            this.resetLocalSelected(true)\n          }, 2000)\n          const { setsFound } = currentState\n          const isNewSet = setsFound\n            .map((set) => {\n              const result = isEqual(newSelected.sort(), set)\n              return !result\n            })\n            .every((result) => result)\n          if (!isNewSet) {\n            return {\n              popupVisible: true,\n              popUpText: 'Already found!',\n            }\n          }\n          const newSetsFound = [...setsFound, newSelected.sort()]\n          return {\n            setsFound: newSetsFound,\n            popupVisible: true,\n            popUpText: 'SET!',\n          }\n        })\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1200)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  handleRedeal = () => {\n    return\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameStarted,\n      setFound,\n      setsFound,\n      popupVisible,\n    } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          {user !== null && <Signout />}\n          <h3>Puzzle Mode</h3>\n          <p>Find as many sets as you can</p>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              <Slider\n                ref={(input) => {\n                  this.difficultyInput = input\n                }}\n                min={2}\n                max={4}\n                orientation=\"horizontal\"\n                tooltip={true}\n                // labels={{ 2: 6, 3: 9, 4: 12 }}\n                format={(v) => 3 * v}\n                value={Number(this.state.cardsOnBoard) / 3}\n                onChange={(cards) => {\n                  this.setState({\n                    cardsOnBoard: cards * 3,\n                  })\n                }}\n              />\n              <form onSubmit={this.handleStartGame}>\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n            <div className=\"row\">\n              <div style={{ marginTop: '48px' }} className=\"col s12\">\n                <p style={{ marginTop: '36px' }}>\n                  <Link to=\"/solo\">Back to Solo Menu</Link>\n                </p>\n                {!user && (\n                  <Fragment>\n                    <hr />\n                    <p>To save your stats, sign in with your Google account.</p>\n\n                    <p>\n                      <button onClick={handleGoogleRedirect} className=\"btn\">\n                        Sign in\n                      </button>\n                    </p>\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">{this.state.popUpText}</p>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"puzzle\"\n          setsFound={setsFound}\n          startTime={this.state.startTime}\n          elapsedTime={this.state.elapsedTime}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Puzzle)\n","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Host from './Host'\nimport Guest from './Guest'\nimport Lobby from './Lobby'\nimport Solo from './Solo'\nimport Main from './Main'\nimport Rules from './Rules'\nimport Login from './Login'\nimport SharedDevice from './SharedDevice'\nimport Stats from './Stats'\nimport Puzzle from './Puzzle'\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/local\" component={SharedDevice} />\n            <Route path=\"/rules\" component={Rules} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/stats\" component={Stats} />\n            <Route path=\"/puzzle\" component={Puzzle} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default Routes\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\n// import 'firebase/firestore'\n// import firestore from '../firestore'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\n\nfunction App(props) {\n  const [user, setUser] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const nickname = window.localStorage.getItem('nickname') || user.displayName.split(' ')[0]\n        const myUser = {\n          displayName: user.displayName,\n          email: user.email,\n          emailVerified: user.emailVerified,\n          photoURL: user.photoURL,\n          isAnonymous: user.isAnonymous,\n          uid: user.uid,\n          providerData: user.providerData,\n          nickname,\n        }\n        dispatch(updateUser({ loading: false, user: myUser }))\n        axios\n          .get(`/api/user/${user.uid}`)\n          .then((result) => {\n            console.log('User is registered')\n          })\n          .catch((err) => {\n            if (err.response && err.response.status === 404) {\n              console.log('User not registered')\n              axios\n                .post('/api/user', {\n                  uid: user.uid,\n                  info: myUser,\n                })\n                .then(() => {\n                  console.log('User registered successfully')\n                })\n                .catch((err) => {\n                  console.log('Error registering user', err)\n                })\n            } else {\n              console.log('An error occurred trying to GET user info')\n            }\n          })\n      } else {\n        console.log('Not signed in')\n        dispatch(updateUser({ loading: false, user: null }))\n      }\n    })\n  }, [])\n\n  return <Routes />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport store from './redux-helpers'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}