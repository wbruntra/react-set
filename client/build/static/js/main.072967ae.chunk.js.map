{"version":3,"sources":["assets/sad_trombone.mp3","assets/applause.mp3","utils/helpers.js","components/Card.js","components/GameOver.js","components/Board.js","firebaseConfig.js","firestore.js","config.js","components/Host.js","components/Modal.js","components/Guest.js","components/Lobby.js","components/Solo.js","components/Main.js","components/Rules.js","components/SharedDevice.js","components/App.js","index.js"],"names":["module","exports","range","n","Array","keys","displaySet","tuple","matrix","rowSize","map","i","j","includes","join","console","log","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","push","selected","Number","nameThird","result","toString","trim","cardToggle","filter","reshuffle","newDeck","shuffle","slice","removeSelected","state","newCards","newBoard","index","indexOf","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","ry","rx","cy","cx","points","style","Card","colors","0","1","2","white","getFill","drawShape","props","desc","split","this","number","className","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","Component","GameOver","finalSound","soundEffect","gameOver","myName","applause","sadTrombone","src","autoPlay","marginTop","window","innerHeight","to","marginRight","solo","onClick","resetGame","Board","resize","debounce","forceUpdate","sets","addEventListener","removeEventListener","prevProps","prevState","JSON","stringify","setState","declarer","players","setFound","sharedDevice","isEmpty","Object","borderColor","playersArray","info","name","topBoxes","Math","ceil","topPlayers","bottomPlayers","handlePlayerClick","score","maxWidth","handleCardClick","handleRedeal","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","firestore","turnTime","playingTo","Host","handleHostName","e","preventDefault","inputName","handleCreateGame","gameTitle","gameRef","collection","doc","set","lastUpdate","FieldValue","serverTimestamp","activeGameUpdater","setInterval","update","actionsRef","get","then","snapshot","data","onSnapshot","docChanges","change","type","action","created","processAction","delete","markPointForDeclarer","newScore","newPlayers","$merge","setTimeout","clearInterval","payload","setAndSendState","updateSelected","triggerFoundSequence","newSelected","newState","removeSet","timeDeclared","initialDeck","initialGameState","nameInputRef","React","autoplay","onSubmit","ref","autoFocus","placeholder","value","onChange","target","Modal","children","popupVisible","visible","Guest","componentWillUnmount","processUpdate","updatedState","animate","animatedSet","shift","animationId","assign","displayAnimation","handleNickname","nameInput","playerName","localStorage","setItem","sendAction","resetLocalSelected","add","togglePopup","previousNickname","getItem","gameName","match","params","Lobby","unsubscribe","addGame","newGame","gamesRef","host","init","games","newGames","activeGames","g","updated","toMillis","now","Date","getTime","round","game","debugging","cpuDelay","calculateIntervalFromDifficulty","createGameState","logTime","msg","toFixed","initialState","you","cpu","gameStarted","difficulty","cpuTurnInterval","cpuFound","Solo","handleStartGame","cpuTimer","cpuTurn","componentDidMount","cpuAnimation","animateCpuChoice","cpuCopy","pop","updatePlayerScore","delta","expireDeclare","performDeclare","undeclareID","clearTimeout","removeSelectedCards","cloneDeep","Fragment","handleDeclare","input","difficultyInput","min","max","orientation","tooltip","Main","Rules","declareTime","createPlayers","num","numPlayers","SharedDevice","clickerName","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.072967ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sad_trombone.baad2ca9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/applause.c2030d5b.mp3\";","// @flow\nimport { shuffle } from 'lodash';\n\nexport const range = (n: number) => {\n  return [...Array(n).keys()];\n};\n\nconst displaySet = (tuple: Array<number>, rowSize: number = 3) => {\n  let matrix;\n  if (rowSize === 4) {\n    matrix = range(3).map(i => {\n      const row = range(4).map(j => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x';\n        }\n        return 'o';\n      });\n      return row.join('');\n    });\n  } else {\n    matrix = range(4).map(i => {\n      const row = range(3).map(j => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x';\n        }\n        return 'o';\n      });\n      return row.join('');\n    });\n  }\n  console.log(matrix.join('\\n'));\n};\n\nexport const serializeGame = (state: {\n  board: Array<string>,\n  deck: Array<string>,\n  selected: Array<string>,\n}) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  });\n  return status;\n};\n\nexport const countSets = (board: Array<string>, debug?: boolean, returnWhenFound?: boolean) => {\n  let count = 0;\n  let candidate = [];\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]];\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c]);\n          }\n          count++;\n          if (returnWhenFound) {\n            return count;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nexport const makeDeck = (): Array<string> => {\n  let deck = [];\n  range(3).forEach(c => {\n    range(3).forEach(n => {\n      range(3).forEach(s => {\n        range(3).forEach(f => {\n          const card = '' + c + s + n + f;\n          deck.push(card);\n        });\n      });\n    });\n  });\n  return deck;\n};\n\nexport const isSet = (selected: Array<string>) => {\n  if (selected.length !== 3) {\n    return false;\n  }\n  const [a, b, c] = selected;\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i]);\n    if (sum % 3 !== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const nameThird = (a: string, b: string) => {\n  let features;\n  let missing;\n  let result = '';\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i];\n    } else {\n      features = Number(a[i]) + Number(b[i]);\n      missing = (3 - features).toString();\n      result = result + missing;\n    }\n  }\n  return result.trim();\n};\n\nexport const cardToggle = (card: string, selected: Array<string>): Array<string> => {\n  if (selected.includes(card)) {\n    return selected.filter(c => c !== card);\n  } else {\n    return [...selected, card];\n  }\n};\n\nexport const reshuffle = ({\n  board,\n  deck,\n}: {\n  board: Array<string>,\n  deck: Array<string>,\n}): { board: Array<string>, deck: Array<string> } => {\n  let newDeck = shuffle([...board, ...deck]);\n  while (\n    countSets(newDeck.slice(0, 12), false, true) === 0 &&\n    countSets(newDeck, false, true) > 0\n  ) {\n    newDeck = shuffle(newDeck);\n  }\n  return {\n    deck: newDeck.slice(12),\n    board: newDeck.slice(0, 12),\n  };\n};\n\n// DB stuff\n\n// export const update = (ref, data) => {\n//   ref.set(\n//     {\n//       ...data,\n//     },\n//     { merge: true },\n//   );\n// };\n\nexport const removeSelected = (state: {\n  board: Array<string>,\n  deck: Array<string>,\n  selected: Array<string>,\n}): {\n  board: Array<string>,\n  deck: Array<string>,\n  selected: Array<string>,\n} => {\n  const { board, deck, selected } = state;\n  const newCards = deck.slice(0, 3);\n  let newBoard = [...board];\n  let newDeck = deck.slice(3);\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c);\n    newBoard[index] = newCards[i];\n  });\n  while (countSets(newBoard) === 0) {\n    ({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }));\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  };\n};\n","import React, { Component, Fragment } from 'react'\nimport { range } from '../utils/helpers'\nimport './card.css'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g display=\"none\" overflow=\"visible\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" id=\"canvasGrid\">\n          <rect \n          fill=\"#fff\"\n          strokeWidth=\"0\" \n          y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n        fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#00A91D',\n    1: '#3E009E',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape shape={shape} fill={this.getFill(color, fill)} color={this.colors[color]} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map(i => {\n          return (\n            <svg\n              key={i}\n              className=\"shape\"\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport sadTrombone from '../assets/sad_trombone.mp3'\nimport applause from '../assets/applause.mp3'\n\nclass GameOver extends Component {\n  finalSound = () => {\n    const { gameOver, myName } = this.props\n    const soundEffect = gameOver === myName ? applause : sadTrombone\n    return <audio src={soundEffect} autoPlay />\n  }\n\n  render() {\n    const { gameOver, myName } = this.props\n    return (\n      <div className=\"deep-purple lighten-2w\" style={{ height: '100vh' }}>\n        {this.finalSound()}\n        <div className=\"row center-align\">\n          <div\n            className=\"card col s8 offset-s2 m6 offset-m3\"\n            style={{ marginTop: window.innerHeight * 0.2 }}\n          >\n            <div className=\"card-content\">\n              <span className=\"card-title\">GAME OVER!</span>\n              <p>Winner: {gameOver} </p>\n            </div>\n            <div className=\"card-action\">\n              <Link to=\"/\" style={{ marginRight: 0 }}>\n                Main Menu\n              </Link>\n            </div>\n          </div>\n        </div>\n        {this.props.solo && (\n          <div className=\"row\">\n            <button className=\"btn\" onClick={this.props.resetGame}>\n              Play Again\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default GameOver\n","import React, { Component, Fragment } from 'react'\nimport { isEmpty, map, debounce } from 'lodash'\nimport { countSets, isSet } from '../utils/helpers'\nimport Card from './Card'\nimport { Link } from 'react-router-dom'\nimport GameOver from './GameOver'\n\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sets: countSets(props.board, true),\n    }\n  }\n\n  resize = debounce(() => {\n    this.forceUpdate()\n  }, 150)\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\n      this.setState({\n        sets: countSets(this.props.board, true),\n      })\n    }\n  }\n\n  render() {\n    const {\n      board,\n      selected,\n      deck,\n      declarer,\n      players,\n      gameOver,\n      myName,\n      setFound,\n      sharedDevice,\n    } = this.props\n    if (isEmpty(players) || !Object.keys(players).includes(myName)) {\n      return null\n    }\n    const borderColor = declarer ? players[declarer].color : players[myName].color\n    const { sets } = this.state\n    if (gameOver) {\n      return <GameOver gameOver={gameOver} myName={myName} />\n    }\n    const playersArray = map(players, (info, name) => {\n      return {\n        name,\n        ...info,\n      }\n    })\n    const topBoxes = Math.ceil(playersArray.length / 2)\n    const topPlayers = playersArray.slice(0, topBoxes)\n    const bottomPlayers = playersArray.slice(topBoxes)\n    return (\n      <Fragment>\n        {!sharedDevice ? (\n          <div className=\"navbar-fixed\">\n            <nav>\n              <div className=\"nav-wrapper\">\n                {declarer ? <>SET! {declarer}</> : <>Sets: {sets}</>}\n                <ul className=\"right hide-on-med-and-down\">\n                  <li>Cards Left: {deck.length}</li>\n                </ul>\n              </div>\n            </nav>\n          </div>\n        ) : (\n          <Fragment>\n            <div className=\"player-buttons-container\">\n              {topPlayers.map((info) => {\n                return (\n                  <div\n                    className={`shared-player player-name ${info.color} ${\n                      info.name == declarer ? 'active-player' : ''\n                    }`}\n                    onClick={() => {\n                      this.props.handlePlayerClick(info.name)\n                    }}\n                    key={info.name}\n                  >\n                    <p className=\"center-align\">{info.name == declarer ? 'SET!' : info.score}</p>\n                  </div>\n                )\n              })}\n              <div className=\"player-buttons-container bottom\">\n                {bottomPlayers.map((info) => {\n                  return (\n                    <div\n                      className={`shared-player player-name ${info.color} ${\n                        info.name == declarer ? 'active-player' : ''\n                      }`}\n                      onClick={() => {\n                        this.props.handlePlayerClick(info.name)\n                      }}\n                      key={info.name}\n                    >\n                      <p className=\"center-align\">{info.name == declarer ? 'SET!' : info.score}</p>\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          </Fragment>\n        )}\n\n        <div className=\"container\" style={{ maxWidth: 0.95 * window.innerHeight }}>\n          <div className=\"row\">\n            {board.map((card) => {\n              return (\n                <div\n                  key={card}\n                  className={`col s4 ${selected.includes(card) ? borderColor : ''}`}\n                  onClick={() => {\n                    this.props.handleCardClick(card)\n                  }}\n                >\n                  <div\n                    className={`card ${\n                      setFound && selected.length === 3 && !selected.includes(card) ? 'blurry' : ''\n                    }`}\n                  >\n                    <Card desc={card} />\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"row\">\n            {map(players, (info, name) => {\n              if (!sharedDevice) {\n                return (\n                  <div key={name} className=\"col s4 m3\">\n                    <span className={`player-name ${info.color}`}>\n                      {name}: {info.score}\n                    </span>\n                  </div>\n                )\n              }\n            })}\n          </div>\n          <div className=\"row\">\n            {this.props.handleRedeal && (\n              <button onClick={this.props.handleRedeal} className=\"btn\">\n                Shuffle\n              </button>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default Board\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig","// import * as firebase from 'firebase';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\n// const settings = { timestampsInSnapshots: true };\n// firestore.settings(settings);\n\nexport default firestore\n","export const colors = [\n  'light-blue lighten-3',\n  'pink lighten-3',\n  'amber accent-2',\n  'purple darken-1',\n  'light-green lighten-1',\n  'orange accent-2',\n];","import * as React from 'react'\nimport Board from './Board'\nimport { makeDeck, cardToggle, reshuffle, removeSelected, isSet } from '../utils/helpers'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\nimport { colors } from '../config'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\nclass Host extends React.Component {\n\n  constructor(props) {\n    super(props)\n    const initialDeck = makeDeck()\n    const initialGameState = {\n      ...reshuffle({\n        deck: initialDeck.slice(12),\n        board: initialDeck.slice(0, 12),\n      }),\n      selected: [],\n    }\n    this.nameInputRef = React.createRef()\n\n    this.state = {\n      players: {},\n      gameTitle: '',\n      created: false,\n      myName: '',\n      inputName: '',\n      setFound: false,\n      autoplay: false,\n      declarer: null,\n      gameOver: false,\n      ...initialGameState,\n    }\n  }\n\n  handleHostName = (e) => {\n    e.preventDefault()\n    const { inputName } = this.state\n    this.setState({\n      myName: inputName,\n      players: {\n        [inputName]: {\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  handleCreateGame = (e) => {\n    e.preventDefault()\n    const { myName, board, deck, selected } = this.state\n    let gameTitle = this.state.gameTitle\n    if (gameTitle === '') {\n      gameTitle = `${myName}'s game`\n    }\n    this.gameRef = firestore.collection('games').doc(gameTitle)\n    this.gameRef.set({\n      board,\n      deck,\n      selected,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    this.activeGameUpdater = window.setInterval(() => {\n      this.gameRef.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    this.actionsRef = this.gameRef.collection('actions')\n    this.actionsRef.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        console.log(doc.id, '=>', doc.data())\n      })\n    })\n\n    this.actionsRef.onSnapshot(snapshot => {\n      snapshot.docChanges().forEach(change => {\n        if (change.type === 'added') {\n          const action = change.doc.data()\n          window.created = action.created\n          console.log(action)\n          this.processAction(action)\n          this.actionsRef.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    this.setState({\n      created: true,\n    })\n  }\n\n  markPointForDeclarer = (declarer) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = this.state\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo && declarer\n    if (gameOver) {\n      window.setTimeout(() => {\n        this.gameRef.delete()\n        clearInterval(this.activeGameUpdater)\n      }, 3000)\n    }\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  processAction = (action) => {\n    const { type, payload } = action\n    const { players, declarer } = this.state\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        this.setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer) {\n          this.updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  setAndSendState = (update) => {\n    this.setState(update)\n    this.gameRef.update({\n      ...update,\n    })\n  }\n\n  triggerFoundSequence = (selected, name) => {}\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      setTimeout(() => {\n        this.removeSet()\n      }, 4000)\n    }\n    this.setAndSendState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { myName } = this.state\n    if (!this.state.declarer) {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, myName)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setAndSendState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...newScores,\n        ...removeSelected(this.state),\n      }\n      this.setAndSendState(newState)\n    }\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameTitle,\n      created,\n      myName,\n      inputName,\n    } = this.state\n    if (myName === '') {\n      return (\n        <div className=\"container\">\n          <h4>Enter your name:</h4>\n          <form onSubmit={this.handleHostName}>\n            <input\n              ref={this.nameInputRef}\n              autoFocus\n              placeholder=\"hostname\"\n              value={inputName}\n              onChange={e => {\n                this.setState({ inputName: e.target.value })\n              }}\n            />\n            <button type=\"submit\" className=\"btn\">\n              Send\n            </button>\n          </form>\n        </div>\n      )\n    }\n    if (!created) {\n      return (\n        <div className=\"container\">\n          <h4>Name your game:</h4>\n          <form onSubmit={this.handleCreateGame}>\n            <input\n              placeholder={`${myName}'s game`}\n              onChange={e => {\n                this.setState({ gameTitle: e.target.value })\n              }}\n              value={gameTitle}\n            />\n            <button type=\"submit\" className=\"btn\">\n              Create\n            </button>\n          </form>\n        </div>\n      )\n    }\n    return (\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={this.handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        handleRedeal={this.handleRedeal}\n        players={players}\n        setFound={this.state.setFound}\n        gameOver={this.state.gameOver}\n        myName={this.state.myName}\n      />\n    )\n  }\n}\n\nexport default Host\n","import React from 'react'\n\nconst Modal = ({ children, visible: popupVisible }) => {\n  return (\n    <div className=\"modal popup-message\" style={{ display: popupVisible ? 'block' : 'none' }}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default Modal\n","import * as React from 'react'\nimport Board from './Board'\nimport { isEmpty } from 'lodash'\nimport { cardToggle, isSet } from '../utils/helpers'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\nimport Modal from './Modal'\n\nclass Guest extends React.Component {\n  constructor(props) {\n    super(props)\n    const initialGameState = {\n      deck: [],\n      board: [],\n      selected: [],\n    }\n    this.state = {\n      popupVisible: false,\n      name: '',\n      nameInput: '',\n      setFound: false,\n      displayAnimation: false,\n      animatedSet: [],\n      declarer: '',\n      ...initialGameState,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.declarer && this.state.declarer) {\n      this.setState({\n        popupVisible: false,\n      })\n    }\n  }\n\n  componentDidMount() {\n    const previousNickname = localStorage.getItem('nickname')\n    const { gameName } = this.props.match.params\n    if (previousNickname) {\n      this.setState({\n        nameInput: previousNickname,\n      })\n    }\n    this.gameRef = firestore.collection('games').doc(gameName)\n    this.gameRef.onSnapshot(doc => {\n      this.processUpdate(doc)\n    })\n    this.actionsRef = this.gameRef.collection('actions')\n  }\n\n  componentWillUnmount = () => {\n    if (this.gameRef) {\n      this.gameRef()\n    }\n  }\n\n  processUpdate = doc => {\n    const updatedState = { ...doc.data() }\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    this.setState({\n      ...updatedState,\n      popupVisible: false,\n    })\n  }\n\n  animate = () => {\n    const animatedSet = [...this.state.animatedSet]\n    const newSelected = [...this.state.selected, animatedSet.shift()]\n    const newState = {\n      selected: newSelected,\n      animatedSet,\n    }\n    if (newSelected.length === 3) {\n      clearInterval(this.animationId)\n      Object.assign(newState, { displayAnimation: false })\n    }\n    this.setState(newState)\n  }\n\n  handleNickname = e => {\n    e.preventDefault()\n    const { nameInput } = this.state\n    const playerName = isEmpty(nameInput) ? 'guest' : nameInput\n    localStorage.setItem('nickname', playerName)\n    this.setState({\n      name: playerName,\n    })\n    this.sendAction({\n      type: 'join',\n      payload: { name: playerName },\n    })\n  }\n\n  handleCardClick = card => {\n    const { name, declarer } = this.state\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name },\n        }\n        this.sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1000)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  sendAction = action => {\n    this.actionsRef.add({\n      ...action,\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  togglePopup = () => {\n    this.setState(state => ({\n      popupVisible: !state.popupVisible,\n    }))\n  }\n\n  resetLocalSelected = () => {\n    // NOTE: Need to be sure a real set wasn't found during the delay\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      return\n    }\n    if (selected.length === 3 && !declarer) {\n      this.setState({\n        selected: [],\n      })\n    }\n  }\n\n  render() {\n    const { board, deck, selected, name, declarer, players, popupVisible } = this.state\n    if (!name) {\n      return (\n        <div className=\"container\">\n          <h4>Choose nickname</h4>\n          <form onSubmit={this.handleNickname}>\n            <input\n              type=\"text\"\n              placeholder=\"your name\"\n              value={this.state.nameInput}\n              onChange={e => this.setState({ nameInput: e.target.value })}\n            />\n            <input className=\"btn\" type=\"submit\" />\n          </form>\n        </div>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">SET!</p>\n          <div className=\"progress\">\n            <div className=\"indeterminate\" style={{ width: '30%' }} />\n          </div>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          // handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          // syncing={this.state.syncing}\n          myName={this.state.name}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Guest\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot(snapshot => {\n      const newGames = []\n      snapshot.forEach(doc => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  addGame = e => {\n    e.preventDefault()\n    const { newGame } = this.state\n    this.gamesRef.doc(newGame).set({\n      host: 'bill',\n    })\n  }\n\n  render() {\n    const { games, init } = this.state\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter(g => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col s8 offset-s2 m6 offset-m3\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <Link to=\"/\">Back</Link>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"center-align\">Available games</h4>\n            <div className=\"row center-align\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col s6 m4\" key={game.name}>\n                    <Link to={`/guest/${game.name}`}>\n                      <div className=\"card-panel\">{game.name}</div>\n                    </Link>\n                  </div>\n                )\n              })}\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport Slider from 'react-rangeslider'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst calculateIntervalFromDifficulty = (d) => {\n  return 12000 / (2.5 * Number(d))\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: false,\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass Solo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n    })\n    console.log(`Turns every ${this.state.cpuTurnInterval} ms`)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const { difficulty } = this.state\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.cpuTimer)\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver } = this.state\n    if (declarer || gameOver) {\n      return\n    }\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      clearInterval(this.cpuTimer)\n      this.cpuAnimation = setInterval(this.animateCpuChoice, 1000)\n    }\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    const newSelected = [...selected, cpuCopy.pop()]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      clearInterval(this.cpuAnimation)\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (name: string, delta: number) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -1)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo && declarer\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected: Array<string>, declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer, name } = this.state\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(name)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          <h4>Choose difficulty</h4>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              <form onSubmit={this.handleStartGame}>\n                <Slider\n                  ref={(input) => {\n                    this.difficultyInput = input\n                  }}\n                  min={1}\n                  max={5}\n                  orientation=\"horizontal\"\n                  tooltip={true}\n                  value={this.state.difficulty}\n                  onChange={(difficulty) => {\n                    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n                    this.setState({\n                      cpuTurnInterval,\n                      difficulty,\n                    })\n                  }}\n                />\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n            <div className=\"row\">\n              <div style={{marginTop: \"48px\"}} className=\"col s12\">\n                <p>\n                  <Link to=\"/local\">Play Multiplayer</Link>\n                </p>\n                <p>\n                  <Link to=\"/\">Back to Main Menu</Link>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Solo\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <h2 className=\"center-align\">Main Menu</h2>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s8 offset-s2 m3 offset-m1\">\n            <Link to=\"/solo\">\n              <div className=\"card\">\n                <Card desc=\"0012\" />\n              </div>\n            </Link>\n            <p className=\"center-align\">Solo/Local</p>\n          </div>\n          <div className=\"col s8 offset-s2 m3\">\n            <Link to=\"/lobby\">\n              <div className=\"card\">\n                <Card desc=\"1121\" />\n              </div>\n            </Link>\n            <p className=\"center-align\">Join Game</p>\n          </div>\n          <div className=\"col s8 offset-s2 m3\">\n            <Link to=\"/host\">\n              <div className=\"card\">\n                <Card desc=\"2200\" />\n              </div>\n            </Link>\n            <p className=\"center-align\">Host Game</p>\n          </div>\n        </div>\n        {/* <ul className=\"collection\">\n          <li className=\"collection-item\">\n            <Link to=\"/rules\">Rules</Link>\n          </li>\n        </ul> */}\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React, { Component } from 'react'\nimport Card from './Card'\n\nfunction Rules() {\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find a sets of three cards that are either the same or\n        different along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0000\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1210\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0022\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2101\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0120\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2011\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        You'll notice that every card has four different characteristics:\n        <ul className=\"browser-default\">\n          <li>color</li>\n          <li>number</li>\n          <li>shape</li>\n          <li>fill</li>\n        </ul>\n        and each of those characteristics has three different possibilities.\n      </p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        Which you can describe as follows:\n        <ul className=\"browser-default\">\n          <li>color - SAME</li>\n          <li>shape - SAME</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - DIFFERENT</li>\n        </ul>\n        Therefore, the three cards form a set.\n      </p>\n      <p>Here is another set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - SAME</li>\n        </ul>\n      </p>\n      <p>This is not a set:</p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>fill - SAME</li>\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - NOT THE SAME OR DIFFERENT!</li>\n        </ul>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row\">\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col s4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <p>\n        <ul className=\"browser-default\">\n          <li>color - DIFFERENT</li>\n          <li>shape - DIFFERENT</li>\n          <li>number - DIFFERENT</li>\n          <li>fill - DIFFERENT</li>\n        </ul>\n        Each characteristic is different for all three cards, so this is a set.\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport Slider from 'react-rangeslider'\n\nconst debugging = false\n\nconst config = {\n  declareTime: 5000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst createPlayers = (num) => {\n  const players = {}\n  for (let i = 0; i < num; i++) {\n    players[i] = {\n      score: 0,\n      color: config.colors[i],\n    }\n  }\n  return players\n}\n\nconst initialState = {\n  numPlayers: null,\n  players: createPlayers(2),\n  gameStarted: false,\n  name: '1',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: false,\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass SharedDevice extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (numPlayers) => {\n    this.setState({\n      numPlayers,\n      players: createPlayers(numPlayers),\n    })\n    this.setState({\n      gameStarted: true,\n    })\n  }\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -1)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo && declarer\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.declareTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer } = this.state\n    if (!setFound && declarer !== null) {\n      const newSelected = cardToggle(card, this.state.selected)\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, declarer)\n      }\n    }\n  }\n\n  handlePlayerClick = (clickerName) => {\n    const { declarer } = this.state\n    if (declarer === null) {\n      this.performDeclare(clickerName)\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, numPlayers, setFound } = this.state\n    if (!numPlayers) {\n      return (\n        <div className=\"container\">\n          <h4>Choose Number of Players</h4>\n          <div className=\"row\">\n            <div className=\"col s12\">\n              {[...Array(6).keys()].map((i) => {\n                return (\n                  <div key={`players-${i}`} className=\"col s4 player-number\">\n                    <div\n                      onClick={() => {\n                        this.handleStartGame(i + 1)\n                      }}\n                      className=\"btn-large\"\n                    >\n                      {i + 1}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handlePlayerClick={this.handlePlayerClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          sharedDevice={true}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SharedDevice\n","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Host from './Host'\nimport Guest from './Guest'\nimport Lobby from './Lobby'\nimport Solo from './Solo'\nimport Main from './Main'\nimport Rules from './Rules'\nimport SharedDevice from './SharedDevice'\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/local\" component={SharedDevice} />\n            <Route path=\"/rules\" component={Rules} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}