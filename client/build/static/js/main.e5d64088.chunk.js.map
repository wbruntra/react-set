{"version":3,"sources":["redux-helpers.ts","firebaseConfig.js","firestore.js","components/Signout.js","utils/helpers.tsx","components/Card.js","components/GameOver.js","config.js","components/TopBar.js","components/Board.js","components/PlayerList.js","components/Host.tsx","components/Guest.js","components/Lobby.js","components/Solo.tsx","components/Main.js","components/Rules.js","components/Login.js","components/SharedDevice.js","components/Stats.js","components/Modal.js","components/Puzzle.js","components/Routes.js","components/App.js","index.js","assets/sad_trombone.mp3","assets/applause.mp3"],"names":["updateUser","user","type","payload","logOut","updateNickname","nickname","defaultUser","loading","reducers","state","action","newState","update","$set","store","createStore","combineReducers","composeWithDevTools","applyMiddleware","reduxThunk","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firestore","Signout","dispatch","useDispatch","history","useHistory","className","style","cursor","onClick","auth","signOut","then","console","log","push","range","n","Array","keys","displaySet","tuple","matrix","rowSize","map","i","j","includes","join","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","selected","Number","nameThird","result","toString","trim","cardToggle","filter","reshuffle","boardSize","minimumSets","newDeck","shuffle","slice","removeSelected","newCards","newBoard","index","indexOf","handleGoogleRedirect","provider","GoogleAuthProvider","signInWithRedirect","updateGame","reference","data","collection","doc","lastUpdate","FieldValue","serverTimestamp","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","ry","rx","cy","cx","points","Card","colors","0","1","2","white","getFill","drawShape","props","desc","split","this","number","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","Component","GameOver","winnerName","gameOver","myName","solo","useSelector","soundEffect","applause","sadTrombone","src","autoPlay","finalSound","to","formatTime","seconds","mm","Math","floor","ss","pad","TopBar","gameMode","declarer","setsFound","elapsedTime","startTime","sets","justifyContent","SharedPlayersDisplay","players","handlePlayerClick","info","name","score","Board","useState","setSets","window","innerHeight","setWindowHeight","setFound","sharedDevice","useEffect","resize","debounce","addEventListener","removeEventListener","process","borderColor","get","getBorderColor","isEmpty","playersArray","topBoxes","ceil","topPlayers","bottomPlayers","Object","Modal","show","Header","Title","Body","host","handleCardClick","handleRedeal","PlayerList","isHost","setState","findKey","player","gameStarted","turnTime","playingTo","Host","userReducer","userLoading","firebaseRefs","useRef","current","initialDeck","initialGameState","gameInProgress","setGameInProgress","gameTitle","setGameTitle","activeGameUpdater","setActiveGameUpdater","gameSubscription","actionsSubscription","setActionSubscription","created","setFullState","currentState","uid","where","querySnapshot","oldGame","catch","error","clearInterval","actionsSubscribe","actions","onSnapshot","snapshot","docChanges","change","processAction","delete","subscribeToGame","game","gameUpdateId","setInterval","unsubscribe","newPlayers","setAndSendState","verifySelectedOnBoard","updateSelected","removeSet","newScores","newScore","$merge","setTimeout","markPointForDeclarer","newSelected","reloadGame","undefined","onSubmit","e","preventDefault","autoFocus","placeholder","value","onChange","target","localStorage","setItem","officialTitle","set","creator_uid","updateId","Guest","popupVisible","displayAnimation","animatedSet","pending","setMyName","resetLocalSelected","sendAction","add","docRef","docId","gameName","match","params","unsubGames","updatedState","mySelected","processUpdate","unsubActions","nameInput","Fragment","Spinner","animation","Lobby","componentWillUnmount","newGame","init","games","gamesRef","newGames","activeGames","g","updated","toMillis","now","Date","getTime","round","marginTop","debugging","cpuDelay","calculateIntervalFromDifficulty","diff","isNaN","createGameState","logTime","msg","toFixed","initialState","you","cpu","cpuTurnInterval","Solo","handleStartGame","cpuTimer","cpuTurn","componentDidMount","savedDifficulty","getItem","difficulty","cpuFound","cpuAnimation","animateCpuChoice","cpuCopy","pop","updatePlayerScore","delta","expireDeclare","timeDeclared","player_won","total_time","axios","post","difficulty_level","winning_score","err","performDeclare","undeclareId","clearTimeout","removeSelectedCards","resetGame","cloneDeep","handleDeclare","maxValue","minValue","listStyleType","connect","MenuItem","url","cardName","description","Main","item","ShowCard","Rules","Login","getRedirectResult","credential","token","accessToken","code","message","email","declareTime","createPlayers","num","numPlayers","SharedDevice","undeclareID","clickerName","Stats","stats","setStats","getStats","response","row","games_played","games_won","SetModal","children","visible","Footer","cardsOnBoard","minSets","getMinSets","setsOnBoard","popUpText","Puzzle","gameState","timeId","noCheck","isEqual","sort","every","ref","input","difficultyInput","min","max","orientation","tooltip","format","v","cards","Routes","exact","path","component","App","onAuthStateChanged","displayName","myUser","emailVerified","photoURL","isAnonymous","providerData","status","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e5d64088.chunk.js","sourcesContent":["import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport update from 'immutability-helper'\nimport { Action as ReduxAction, Reducer } from 'redux'\n\ninterface UserInfo {\n  nickname?: string\n}\n\nexport interface User {\n  loading: boolean\n  user: UserInfo\n}\n\ninterface Action extends ReduxAction {\n  payload: any\n}\n\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_NICKNAME = 'UPDATE_NICKNAME'\n\nexport const updateUser = (user: UserInfo) => ({\n  type: UPDATE_USER,\n  payload: user,\n})\n\nexport const logOut = () => ({\n  type: 'LOGOUT',\n})\n\nexport const updateNickname = (nickname: string) => ({\n  type: UPDATE_NICKNAME,\n  payload: nickname,\n})\n\nexport const defaultUser: User = { loading: true, user: {} }\n\nconst userReducer = (state = defaultUser, action: Action) => {\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case UPDATE_NICKNAME:\n      const newState = update(state, {\n        user: { nickname: { $set: action.payload } },\n      })\n      return newState\n    case 'LOGOUT':\n      return { loading: false, user: null }\n    default:\n      return state\n  }\n}\n\nconst reducers = {\n  user: userReducer,\n}\n\nconst store = createStore(\n  combineReducers(reducers),\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n)\n\nexport default store\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig\n","import * as firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\nimport 'firebase/auth'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\nexport default firestore\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation,\n} from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { logOut } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\n\nfunction Signout() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch(logOut())\n        console.log('Signed out.')\n        history.push('/')\n      })\n  }\n\n  return (\n    <div className=\"my-3\" style={{ cursor: 'pointer' }}>\n      <p className=\"text-right text-white\">\n        <a className=\"btn btn-danger\" onClick={signOut}>\n          Sign Out\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Signout\n","import { shuffle, find, isNil } from 'lodash'\nimport * as firebase from 'firebase/app'\nimport { GameState, Player } from './models'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nexport const range = (n: number) => {\n  return [...Array(n).keys()]\n}\n\nconst displaySet = (tuple: Array<number>, rowSize: number = 3) => {\n  let matrix\n  if (rowSize === 4) {\n    matrix = range(3).map((i) => {\n      const row = range(4).map((j) => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  } else {\n    matrix = range(4).map((i) => {\n      const row = range(3).map((j) => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  }\n  console.log(matrix.join('\\n'))\n}\n\nexport const serializeGame = (state: {\n  board: Array<string>\n  deck: Array<string>\n  selected: Array<string>\n}) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  })\n  return status\n}\n\nexport const countSets = (board: string[], { debug = false, returnWhenFound = false } = {}) => {\n  let count = 0\n  let candidate = []\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]]\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c])\n          }\n          count++\n          if (returnWhenFound) {\n            return count\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nexport const makeDeck = (): string[] => {\n  let deck: string[] = []\n  range(3).forEach((c) => {\n    range(3).forEach((n) => {\n      range(3).forEach((s) => {\n        range(3).forEach((f) => {\n          const card = '' + c + s + n + f\n          deck.push(card)\n        })\n      })\n    })\n  })\n  return deck\n}\n\nexport const isSet = (selected: Array<string>) => {\n  if (selected.length !== 3) {\n    return false\n  }\n  const [a, b, c] = selected\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i])\n    if (sum % 3 !== 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const nameThird = (a: string, b: string) => {\n  let features\n  let missing\n  let result = ''\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i]\n    } else {\n      features = Number(a[i]) + Number(b[i])\n      missing = (3 - features).toString()\n      result = result + missing\n    }\n  }\n  return result.trim()\n}\n\nexport const cardToggle = (card: string, selected: string[]) => {\n  if (selected.includes(card)) {\n    return selected.filter((c) => c !== card)\n  } else {\n    return [...selected, card]\n  }\n}\n\nexport const reshuffle = ({ board = [], deck }: GameState, boardSize = 12, minimumSets = 1) => {\n  let newDeck = shuffle([...board, ...deck])\n  while (\n    countSets(newDeck.slice(0, boardSize)) < minimumSets &&\n    countSets(newDeck, { returnWhenFound: true }) > 0\n  ) {\n    newDeck = shuffle(newDeck)\n  }\n  return {\n    deck: newDeck.slice(boardSize),\n    board: newDeck.slice(0, boardSize),\n  }\n}\n\nexport const removeSelected = (state: { board: string[]; deck: string[]; selected: string[] }) => {\n  const { board, deck, selected } = state\n  const newCards = deck.slice(0, 3)\n  let newBoard = [...board]\n  let newDeck = deck.slice(3)\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c)\n    newBoard[index] = newCards[i]\n  })\n  while (countSets(newBoard) === 0) {\n    ;({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }))\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  }\n}\n\nexport const handleGoogleSignIn = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function(result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = result.credential as firebase.auth.OAuthCredential\n      var token = credential.accessToken\n      // The signed-in user info.\n      var user = result.user\n      console.log(token, user)\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code\n      var errorMessage = error.message\n      // The email of the user's account used.\n      var email = error.email\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential\n      // ...\n    })\n}\n\nexport const handleGoogleRedirect = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase.auth().signInWithRedirect(provider)\n}\n\nexport const updateGame = (reference: string | any, data: any) => {\n  let game\n  if (typeof reference === 'string') {\n    game = firestore.collection('games').doc(reference)\n  } else {\n    game = reference\n  }\n  game.update({\n    ...data,\n    lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n  })\n}\n\nexport const sendAction = (gameId: string, action: any) => {\n  const actions = firestore\n    .collection('games')\n    .doc(gameId)\n    .collection('actions')\n  actions\n    .add({\n      ...action,\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(function(docRef) {\n      if (action.type === 'found') {\n        const docId = docRef.id\n        console.log('Document written with ID: ', docId)\n        const pendingActionId = docId\n        return pendingActionId\n        // TODO: Trigger message if action isnt processed in reasonable time\n      }\n    })\n}\n\nexport const playerNotRegistered = (players: Player[], name: string) => {\n  const player = find(players, ['name', name])\n  return isNil(player)\n}\n","import React, { Component, Fragment } from 'react'\nimport { range } from '../utils/helpers'\nimport './card.css'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g\n          display=\"none\"\n          overflow=\"visible\"\n          y=\"0\"\n          x=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n          id=\"canvasGrid\"\n        >\n          <rect fill=\"#fff\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#00A91D',\n    1: '#311b92',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape shape={shape} fill={this.getFill(color, fill)} color={this.colors[color]} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map((i) => {\n          return (\n            <svg\n              key={i}\n              className=\"shape\"\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport sadTrombone from '../assets/sad_trombone.mp3'\nimport applause from '../assets/applause.mp3'\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction GameOver(props) {\n  const { gameOver: winnerName, myName, solo } = props\n  const finalSound = () => {\n    const soundEffect = winnerName === myName ? applause : sadTrombone\n    return <audio src={soundEffect} autoPlay />\n  }\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n\n  return (\n    <div className=\"game-over container mt-5\">\n      {finalSound()}\n      <div className=\"row justify-content-center\">\n        <div className=\"col col-md-6\">\n          <div className=\"card shadow\">\n            <h3 className=\"text-center mt-3\">GAME OVER!</h3>\n            <p className=\"text-center mb-4\">Winner: {winnerName} </p>\n            <div className=\"row justify-content-center\">\n              <div className=\"col-4\">\n                <p className=\"text-center\">\n                  <Link to=\"/\">Main</Link>\n                </p>\n              </div>\n              {solo && user !== null && (\n                <div className=\"col-4\">\n                  <p className=\"text-center\">\n                    <Link to=\"/stats\">Stats</Link>\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameOver\n","export const colors = ['light-blue', 'pink', 'amber', 'light-green', 'purple', 'orange']\n","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { countSets } from '../utils/helpers'\nimport { colors } from '../config'\n\nconst formatTime = (seconds) => {\n  const pad = (ss) => {\n    var p = '00'\n    var result = (p + ss).slice(-p.length)\n    return result\n  }\n  const mm = Math.floor(seconds / 60)\n  const ss = seconds - 60 * mm\n  return `${mm}:${pad(ss)}`\n}\n\nfunction TopBar({ gameMode, deck, board, declarer, setsFound, startTime, elapsedTime }) {\n  const sets = countSets(board)\n  switch (gameMode) {\n    case 'shared-device':\n      return null\n    case 'versus':\n      return (\n        <div className={`topbar py-2 bg-${declarer ? 'light' : 'dark'}-orange`}>\n          <nav className=\"container text-white\">\n            <div className=\"row justify-content-between text-center\">\n              <div className=\"col\">Sets: {sets}</div>\n              <div className=\"col\">{declarer && <>SET! {declarer}</>}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    case 'puzzle':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div\n              className=\"nav-wrapper\"\n              style={{ display: 'flex', justifyContent: 'space-between' }}\n            >\n              <div>Total Sets: {sets}</div>\n              <div>Remaining: {sets - setsFound.length}</div>\n              <div>Time: {formatTime(elapsedTime)}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nexport default TopBar\n","import React, { useEffect, useState, Component, Fragment } from 'react'\nimport { isEmpty, map, debounce, get } from 'lodash'\nimport { countSets } from '../utils/helpers'\nimport Card from './Card'\nimport GameOver from './GameOver'\nimport TopBar from './TopBar'\nimport Modal from 'react-bootstrap/Modal'\n\nfunction SharedPlayersDisplay({ players, declarer, handlePlayerClick }) {\n  return (\n    <div className=\"row my-4 text-center justify-content-between\">\n      {players.map((info) => {\n        return (\n          <div\n            className={`col-2 bg-${info.color} ${info.name == declarer ? 'active-player' : ''}`}\n            onClick={() => {\n              handlePlayerClick(info.name)\n            }}\n            key={info.name}\n          >\n            <p className=\"my-2 align-middle\">{info.name == declarer ? 'SET!' : info.score}</p>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Board(props) {\n  const [sets, setSets] = useState(null)\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight)\n  const {\n    board,\n    selected,\n    deck,\n    declarer,\n    players,\n    gameOver,\n    myName,\n    setFound,\n    sharedDevice,\n    solo,\n    gameMode,\n  } = props\n\n  useEffect(() => {\n    const resize = debounce(() => {\n      setWindowHeight(window.innerHeight)\n    }, 150)\n\n    window.addEventListener('resize', resize)\n\n    return function cleanup() {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSets(countSets(board, { debug: process.env.NODE_ENV !== 'production' }))\n  }, [board])\n\n  const getBorderColor = ({ declarer, players }) => {\n    if (declarer) {\n      return get(players, `${declarer}.color`, '')\n    }\n    return get(players, `${myName}.color`, '')\n  }\n\n  const borderColor = getBorderColor(props)\n\n  if (!isEmpty(gameOver)) {\n    return <GameOver gameOver={gameOver} myName={myName} solo={solo} />\n  }\n\n  const playersArray = map(players, (info, name) => {\n    return {\n      name,\n      ...info,\n    }\n  })\n\n  const topBoxes = Math.ceil(playersArray.length / 2)\n  const topPlayers = playersArray.slice(0, topBoxes)\n  const bottomPlayers = playersArray.slice(topBoxes)\n\n  return (\n    <Fragment>\n      {(isEmpty(players) || !Object.keys(players).includes(myName)) && (\n        <Modal show>\n          <Modal.Header>\n            <Modal.Title>Waiting to join...</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Players:</h4>\n            <ul className=\"collection\">\n              {map(players, (info, name) => {\n                return (\n                  <li key={name} className=\"collection-item\">\n                    <span className={`player-name`}>\n                      {name} {info.host && '(host)'}\n                    </span>\n                  </li>\n                )\n              })}\n            </ul>\n          </Modal.Body>\n        </Modal>\n      )}\n\n      <TopBar {...props} />\n      <div className=\"container\">\n        {sharedDevice && (\n          <SharedPlayersDisplay\n            players={topPlayers}\n            declarer={declarer}\n            handlePlayerClick={props.handlePlayerClick}\n          />\n        )}\n\n        <div className=\"board\">\n          <div className=\"row\">\n            {board.map((card) => {\n              return (\n                <div\n                  key={card}\n                  className={`card-column col-4`}\n                  onClick={() => {\n                    props.handleCardClick(card)\n                  }}\n                >\n                  <div\n                    className={`card-holder ${selected.includes(card) ? `bg-${borderColor}` : ''}`}\n                  >\n                    <div\n                      className={`card ${\n                        setFound && selected.length === 3 && !selected.includes(card)\n                          ? 'blurry'\n                          : ''\n                      }`}\n                    >\n                      <Card desc={card} />\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          {!sharedDevice && gameMode !== 'puzzle' && (\n            <div className=\"row text-center my-3\">\n              {map(players, (info, name) => {\n                return (\n                  <div key={name} className=\"col s4 m3\">\n                    <span className={`player-name bg-${info.color}`}>\n                      {name}: {info.score}\n                    </span>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n\n          {sharedDevice && (\n            <SharedPlayersDisplay\n              players={bottomPlayers}\n              declarer={declarer}\n              handlePlayerClick={props.handlePlayerClick}\n            />\n          )}\n\n          {props.handleRedeal && (\n            <div className=\"row\">\n              <div className=\"col mt-3 mt-md-4\">\n                <button onClick={props.handleRedeal} className=\"btn btn-primary\">\n                  Shuffle\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport { map, findKey } from 'lodash'\n\nfunction PlayerList({ isHost, players, setState }) {\n  const host = findKey(players, (player) => player.host)\n\n  return (\n    <div className=\"container mt-4\">\n      <h4>Players:</h4>\n      <ul className=\"collection\">\n        {map(players, (info, name) => {\n          return (\n            <li key={name} className=\"collection-item\">\n              <span className={`player-name`}>\n                {name} {info.host && '(host)'}\n              </span>\n            </li>\n          )\n        })}\n      </ul>\n      {isHost ? (\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setState({\n              gameStarted: true,\n            })\n          }}\n        >\n          Start Game\n        </button>\n      ) : (\n        <p>Waiting for host to start game...</p>\n      )}\n    </div>\n  )\n}\n\nexport default PlayerList\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateNickname } from '../redux-helpers'\nimport { Link } from 'react-router-dom'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nimport Signout from './Signout'\nimport Board from './Board'\nimport {\n  handleGoogleRedirect,\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected,\n  isSet,\n  updateGame,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport PlayerList from './PlayerList'\nimport { findKey, isEmpty } from 'lodash'\nimport { Action, MultiState } from '../utils/models'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\n// const firebaseRefs = {}\n\ninterface FirebaseRefs {\n  game: any\n  actions: any\n}\n\nfunction Host() {\n  const userReducer = useSelector((state: any) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current as FirebaseRefs\n\n  const initialDeck = makeDeck()\n  const initialGameState: {\n    deck: string[]\n    board: string[]\n    selected: string[]\n  } = {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n\n  const [gameInProgress, setGameInProgress] = useState()\n  const [gameTitle, setGameTitle] = useState('')\n  const [activeGameUpdater, setActiveGameUpdater] = useState()\n  const [gameSubscription, setGameSubscription] = useState()\n  const [actionsSubscription, setActionSubscription] = useState()\n\n  const [state, setFullState] = useState<MultiState>({\n    gameTitle: '',\n    players: {},\n    created: false,\n    gameStarted: false,\n    myName: '',\n    setFound: false,\n    declarer: null,\n    gameOver: '',\n    ...initialGameState,\n  })\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  useEffect(() => {\n    if (user && !isEmpty(user.uid)) {\n      firestore\n        .collection('games')\n        .where('creator_uid', '==', user.uid)\n        .get()\n        .then(function(querySnapshot) {\n          querySnapshot.forEach(function(doc) {\n            console.log(doc.id)\n            const oldGame = {\n              ...doc.data(),\n              gameTitle: doc.id,\n            }\n            console.log('Old game: ', oldGame)\n            setGameInProgress(oldGame)\n          })\n        })\n        .catch(function(error) {\n          console.log('Error getting documents: ', error)\n        })\n    }\n  }, [user])\n\n  useEffect(() => {\n    return () => {\n      if (actionsSubscription) {\n        actionsSubscription()\n      }\n      if (gameSubscription) {\n        gameSubscription()\n      }\n    }\n  }, [gameSubscription, actionsSubscription])\n\n  useEffect(() => {\n    return function() {\n      window.clearInterval(activeGameUpdater)\n    }\n  }, [activeGameUpdater])\n\n  const setState = (update: Partial<MultiState>) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const handleRejectResume = () => {\n    const { gameTitle } = gameInProgress\n    firestore\n      .collection('games')\n      .doc(gameTitle)\n      .delete()\n      .then(() => {\n        console.log('Deleted old game')\n        setGameInProgress(undefined)\n      })\n  }\n\n  const handleCardClick = (card: string) => {\n    const { myName } = state\n    if (!state.declarer) {\n      const newSelected = cardToggle(card, state.selected)\n      if (isSet(newSelected)) {\n        updateSelected(newSelected, myName)\n      }\n      setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  const handleRedeal = () => {\n    const newState = reshuffle(state)\n    setAndSendState(newState)\n  }\n\n  const actionsSubscribe = (reference: string | any) => {\n    let doc\n    if (typeof reference === 'string') {\n      doc = firestore.collection('games').doc(reference)\n    } else {\n      doc = reference\n    }\n    const actions = doc.collection('actions')\n    console.log(actions)\n    actions.onSnapshot((snapshot: any) => {\n      console.log('got action snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    return actions\n    const actionSubscription = actions.onSnapshot((snapshot: any) => {\n      console.log('got snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    setActionSubscription(actions)\n  }\n\n  const subscribeToGame = async (gameTitle: string) => {\n    firebaseRefs.game = firestore.collection('games').doc(gameTitle)\n    const gameUpdateId = window.setInterval(() => {\n      updateGame(firebaseRefs.game, {})\n    }, 30000)\n    setActiveGameUpdater(gameUpdateId)\n\n    const unsubscribe = actionsSubscribe(firebaseRefs.game)\n    setActionSubscription(unsubscribe)\n  }\n\n  const reloadGame = () => {\n    const host = findKey(gameInProgress.players, (player) => player.host)\n\n    const { gameTitle } = gameInProgress\n    setState({ gameTitle })\n    subscribeToGame(gameTitle)\n    setState({\n      myName: host,\n      created: true,\n      ...gameInProgress,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  const handleCreateGame = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const { myName, board, deck, selected, players, gameOver } = state\n    const officialTitle = !isEmpty(gameTitle) ? gameTitle : `${myName}'s game`\n    setState({ gameTitle: officialTitle })\n    firebaseRefs.game = firestore.collection('games').doc(officialTitle)\n    firebaseRefs.game.set({\n      creator_uid: user.uid,\n      players,\n      board,\n      deck,\n      selected,\n      gameOver,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    const updateId = window.setInterval(() => {\n      firebaseRefs.game.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    setActiveGameUpdater(updateId)\n\n    firebaseRefs.actions = actionsSubscribe(officialTitle)\n\n    console.log(firebaseRefs.actions)\n    // firebaseRefs.actions.onSnapshot((snapshot: any) => {\n    //   console.log('got action snapshot')\n    //   snapshot.docChanges().forEach((change: any) => {\n    //     if (change.type === 'added') {\n    //       const action = change.doc.data() as Action\n    //       console.log(action)\n    //       processAction(action)\n    //       firebaseRefs.actions.doc(change.doc.id).delete()\n    //     }\n    //     if (change.type === 'removed') {\n    //       console.log('Removed action: ', change.doc.data())\n    //     }\n    //   })\n    // })\n\n    // const unsubscribe = actionsSubscribe(officialTitle)\n    // setActionSubscription(unsubscribe)\n\n    setState({\n      created: true,\n    })\n  }\n\n  const handleSetName = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setState({\n      myName: user.nickname,\n      players: {\n        [user.nickname]: {\n          host: true,\n          uid: user.uid,\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  const markPointForDeclarer = (declarer: string) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = currentState.current\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    if (gameOver) {\n      window.setTimeout(() => {\n        firebaseRefs.game.delete()\n        clearInterval(activeGameUpdater)\n      }, 3000)\n    }\n\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  const processAction = (action: Action) => {\n    const { type, payload } = action\n    const { players, declarer, board } = currentState.current\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            host: false,\n            uid: payload.uid,\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer && verifySelectedOnBoard(board, payload.selected)) {\n          updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  const removeSet = (selected: string[], declarer: string) => {\n    if (isSet(selected)) {\n      const newScores = markPointForDeclarer(declarer)\n      const newState: Partial<MultiState> = {\n        ...currentState.current,\n        setFound: false,\n        declarer: null,\n        ...newScores,\n        ...removeSelected(currentState.current),\n      }\n      setAndSendState(newState)\n    }\n  }\n\n  const setAndSendState = (update: Partial<MultiState>) => {\n    console.log('updating', currentState.current.gameTitle)\n    setState(update)\n    updateGame(firebaseRefs.game, update)\n  }\n\n  const verifySelectedOnBoard = (board: string[], selected: string[]) => {\n    for (let i = 0; i < selected.length; i++) {\n      if (!board.includes(selected[i])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const updateSelected = (newSelected: string[], declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    setAndSendState(newState)\n    if (newState.setFound) {\n      setTimeout(() => {\n        removeSet(newSelected, declarer)\n      }, 4000)\n    }\n  }\n\n  const { board, deck, selected, declarer, players, created, gameStarted, myName } = state\n\n  if (userLoading) {\n    return 'Loading...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container mt-4\">\n        <p>To host a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  if (gameInProgress && !state.created) {\n    return (\n      <div className=\"container\">\n        <p>You are already hosting a game. Return to it?</p>\n        <button className=\"btn btn-primary mr-5\" onClick={() => reloadGame()}>\n          YES!\n        </button>\n        <button className=\"btn btn-danger\" onClick={handleRejectResume}>\n          No, remove it\n        </button>\n      </div>\n    )\n  }\n\n  if (myName === '') {\n    return (\n      <div className=\"container\">\n        <Signout />\n        <h4>Enter your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"row mb-4\">\n            <div className=\"col-3 mr-4\">\n              <input\n                autoFocus\n                placeholder=\"hostname\"\n                value={user.nickname}\n                onChange={(e) => {\n                  dispatch(updateNickname(e.target.value))\n                  window.localStorage.setItem('nickname', e.target.value)\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n        <div>\n          <p>\n            <Link to=\"/\">Main Menu</Link>\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!created) {\n    return (\n      <div className=\"container mt-4\">\n        <h4>Name your game:</h4>\n        <form onSubmit={handleCreateGame}>\n          <div className=\"mb-3\">\n            <input\n              autoFocus\n              placeholder={`${myName}'s game`}\n              onChange={(e) => {\n                setGameTitle(e.target.value)\n              }}\n              value={gameTitle}\n            />\n          </div>\n          <div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  if (!gameStarted) {\n    return <PlayerList isHost={true} players={players} setState={setAndSendState} />\n  }\n\n  return (\n    <Board\n      board={board}\n      deck={deck}\n      selected={selected}\n      declarer={declarer}\n      handleCardClick={handleCardClick}\n      // handleDeclare={this.handleDeclare}\n      handleRedeal={handleRedeal}\n      players={players}\n      setFound={state.setFound}\n      gameOver={state.gameOver}\n      myName={state.myName}\n      gameMode=\"versus\"\n    />\n  )\n}\n\nexport default Host\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isEmpty } from 'lodash'\nimport { Link } from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport { updateNickname } from '../redux-helpers'\nimport { cardToggle, isSet, handleGoogleSignIn, handleGoogleRedirect } from '../utils/helpers'\nimport firestore from '../firestore'\n// import Modal from './Modal'\nimport Signout from './Signout'\nimport Board from './Board'\nimport PlayerList from './PlayerList'\nimport Modal from 'react-bootstrap/Modal'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Spinner from 'react-bootstrap/Spinner'\n\nfunction Guest(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const [state, setFullState] = useState({\n    popupVisible: false,\n    setFound: false,\n    displayAnimation: false,\n    animatedSet: [],\n    declarer: '',\n    deck: [],\n    board: [],\n    selected: [],\n    pending: null,\n    gameStarted: false,\n  })\n  const [myName, setMyName] = useState('')\n  const [modalDelayMsg, setDelayMsg] = useState()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current\n  // const [firebaseRefs, setFirebaseRefs] = useState({})\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  const setState = (update) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const resetLocalSelected = () => {\n    const { declarer, selected } = currentState.current\n    if (isEmpty(declarer) && selected.length === 3 && !isSet(selected)) {\n      setState({\n        selected: [],\n      })\n    }\n  }\n\n  const handleCardClick = (card) => {\n    const { declarer, selected } = currentState.current\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, selected)\n    if (newSelected.length > 3) {\n      return\n    }\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name: myName },\n        }\n        console.log('Found set, sending...')\n        sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(resetLocalSelected, 1000)\n      }\n    }\n\n    setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  const handleSetName = (e) => {\n    e.preventDefault()\n    const nameInput = user.nickname\n    if (isEmpty(nameInput)) {\n      return\n    }\n    setMyName(nameInput)\n    const action = {\n      type: 'join',\n      payload: { name: nameInput, uid: user.uid },\n    }\n    sendAction(action)\n  }\n\n  const processUpdate = (doc) => {\n    const updatedState = { ...doc.data() }\n    const { selected: mySelected } = currentState.current\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    // Don't mess with selected cards unless necessary\n    const newSelected =\n      mySelected.length < 3 && isEmpty(updatedState.declarer) ? mySelected : updatedState.selected\n    console.log('New selected', newSelected)\n    setState({\n      ...updatedState,\n      selected: newSelected,\n      popupVisible: false,\n    })\n  }\n\n  const sendAction = (action) => {\n    console.log('Creating on', firebaseRefs.actions)\n    firebaseRefs.actions\n      .add({\n        ...action,\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(function(docRef) {\n        if (action.type === 'found') {\n          const docId = docRef.id\n          console.log('Document written with ID: ', docId)\n          setState({\n            pending: docId,\n          })\n          // TODO: Trigger message if action isnt processed in reasonable time\n        }\n      })\n  }\n\n  useEffect(() => {\n    const { gameName } = props.match.params\n    firebaseRefs.game = firestore.collection('games').doc(gameName)\n    const unsubGames = firebaseRefs.game.onSnapshot((doc) => {\n      processUpdate(doc)\n    })\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n\n    const unsubActions = firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'removed') {\n          const { pending } = currentState.current\n          if (pending === change.doc.id) {\n            console.log('Pending action removed!')\n            setState({\n              pending: null,\n            })\n          }\n        }\n      })\n    })\n\n    return function cleanup() {\n      if (firebaseRefs.game) {\n        unsubGames()\n      }\n      if (firebaseRefs.actions) {\n        unsubActions()\n      }\n    }\n  }, [])\n\n  const { board, deck, selected, declarer, players, popupVisible } = state\n\n  if (userReducer.loading) {\n    return 'Loading profile...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container\">\n        <p>To join a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n        <p>\n          <Link to=\"/lobby\">Back</Link>\n        </p>\n      </div>\n    )\n  }\n  if (!myName) {\n    return (\n      <div className=\"container\">\n        <Signout />\n\n        <h4>Choose nickname</h4>\n        <form onSubmit={handleSetName}>\n          <input\n            autoFocus\n            type=\"text\"\n            placeholder=\"your name\"\n            value={user.nickname}\n            onChange={(e) => {\n              dispatch(updateNickname(e.target.value))\n              window.localStorage.setItem('nickname', e.target.value)\n            }}\n          />\n          <input className=\"btn btn-primary ml-3\" type=\"submit\" value=\"Join\" />\n        </form>\n      </div>\n    )\n  }\n\n  const { setFound, gameOver, gameStarted } = currentState.current\n\n  if (!gameStarted) {\n    return <PlayerList players={players} isHost={false} />\n  }\n\n  return (\n    <React.Fragment>\n      <Modal show={state.pending && popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p className=\"text-center\">SET!</p>\n          <div className=\"text-center\">\n            <Spinner animation=\"border\" />\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        players={players}\n        setFound={setFound}\n        gameOver={gameOver}\n        // syncing={this.state.syncing}\n        myName={myName}\n        gameMode=\"versus\"\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Guest\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot((snapshot) => {\n      const newGames = []\n      snapshot.forEach((doc) => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { games, init } = this.state\n    console.log(games)\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter((g) => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col-8 col-md-6\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <p>\n                  Click <Link to=\"/host\">here</Link> to host one\n                </p>\n                <p>\n                  <Link className=\"btn btn-primary\" to=\"/\">\n                    Back\n                  </Link>\n                </p>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"center-align\">Available games</h4>\n            <div className=\"row center-align\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col s6 m4\" key={game.name}>\n                    <Link to={`/guest/${game.name}`}>\n                      <div className=\"card-panel\">{game.name}</div>\n                    </Link>\n                  </div>\n                )\n              })}\n              <p>\n                <Link to=\"/\">Back</Link>\n              </p>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n  handleGoogleRedirect,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep, isEmpty } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport Slider from 'react-rangeslider'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport Signout from './Signout'\nimport InputRange from 'react-input-range'\n\nimport { Players, GameState, SoloState } from '../utils/models'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst calculateIntervalFromDifficulty = (d: number) => {\n  let diff = Number(d)\n  if (Number.isNaN(diff)) {\n    diff = 1\n  }\n  const interval = 24000 / (5 * diff)\n  return interval\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  const selected: string[] = []\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected,\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  myName: 'you',\n  setFound: false,\n  declarer: null,\n  gameOver: null,\n  cpuTurnInterval: 1000,\n  startTime: new Date(),\n}\n\n// interface State extends GameState {\n//   players: Players\n//   selected: string[]\n//   cpuTimer?: number\n//   gameStarted: boolean\n//   myName: string\n//   setFound: boolean\n//   declarer: null | string\n//   timeDeclared?: number\n//   gameOver: string\n//   cpuTurnInterval: number\n//   cpuFound?: string[]\n//   startTime: Date\n//   undeclareId?: number\n//   difficulty: number\n//   cpuAnimation?: number\n// }\n\nclass Solo extends Component<any, SoloState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n      difficulty: 2,\n    }\n  }\n\n  handleStartGame = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n      startTime: new Date(),\n    })\n\n    console.log(`Turns every ${this.state.cpuTurnInterval} ms`)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const savedDifficulty = window.localStorage.getItem('soloDifficulty')\n    let difficulty = savedDifficulty ? Number(savedDifficulty) : 2\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      difficulty,\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    if (this.state.cpuTimer !== null) {\n      window.clearInterval(this.state.cpuTimer)\n    }\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver } = this.state\n    if (declarer || gameOver) {\n      return\n    }\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      if (this.state.cpuTimer !== null) {\n        clearInterval(this.state.cpuTimer)\n      }\n      this.setState({\n        cpuAnimation: window.setInterval(this.animateCpuChoice, 900),\n      })\n    }\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    if (cpuCopy.length === 0) {\n      return\n    }\n    const newSelected = [...selected, cpuCopy.pop() as string]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      if (this.state.cpuAnimation !== null) {\n        clearInterval(this.state.cpuAnimation)\n      }\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (myName: string, delta: number): [Players, number] => {\n    const { players } = this.state\n    const newScore = players[myName].score + delta\n    const newPlayers = update(players, {\n      [myName]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (declarer && !isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: undefined,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer: string) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const { user } = this.props.userReducer\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    if (!isEmpty(gameOver)) {\n      const uid = (user && user.uid) || 'anonymous'\n      const player_won = declarer == 'you' ? 1 : 0\n      const total_time = Math.round((new Date().getTime() - this.state.startTime.getTime()) / 1000)\n      axios\n        .post('/api/game', {\n          uid,\n          total_time,\n          player_won,\n          difficulty_level: this.state.difficulty,\n          winning_score: newScore,\n        })\n        .then(() => {\n          console.log('Game sent')\n        })\n        .catch((err) => {\n          console.log('Error sending game')\n        })\n    }\n    this.setState(newState)\n    return newState\n  }\n\n  performDeclare = (declarer: string) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n      this.setState({\n        undeclareId: window.setTimeout(() => {\n          this.expireDeclare()\n        }, config.turnTime),\n      })\n    }\n  }\n\n  updateSelected = (newSelected: Array<string>, declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      this.state.undeclareId && clearTimeout(this.state.undeclareId)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card: string) => {\n    const { setFound, declarer, myName } = this.state\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(myName)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (declarer && isSet(selected)) {\n      console.log('Set found, removing')\n      this.markPointForDeclarer(declarer)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: undefined,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    this.state.cpuTimer && clearInterval(this.state.cpuTimer)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      // GameSettings\n      return (\n        <div className=\"container main-content\">\n          {user !== null && <Signout />}\n          <h3 className=\"text-center mb-4\">Solo Play vs. Computer</h3>\n          <h4 className=\"mb-4\">Choose difficulty level:</h4>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <form onSubmit={this.handleStartGame}>\n                <div className=\"col-10 col-md-6 mb-5\">\n                  <InputRange\n                    maxValue={6}\n                    minValue={1}\n                    //@ts-ignore\n                    value={this.state.difficulty}\n                    //@ts-ignore\n                    onChange={(difficulty) => {\n                      //@ts-ignore\n                      const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n                      window.localStorage.setItem('soloDifficulty', difficulty.toString())\n                      //@ts-ignore\n                      this.setState({\n                        cpuTurnInterval,\n                        difficulty,\n                      })\n                    }}\n                  />\n                </div>\n                <input type=\"submit\" value=\"Start\" className=\"btn btn-primary\" />\n              </form>\n              <p style={{ marginTop: '24px' }}>First to {config.playingTo} points is the winner</p>\n            </div>\n            <div className=\"row mt-4\">\n              <ul style={{ listStyleType: 'none' }}>\n                <li className=\"mb-4\">\n                  <Link to=\"/local\">Local Multiplayer</Link>\n                </li>\n                <li>\n                  <Link to=\"/\">Back to Main Menu</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          {!user && (\n            <div className=\"row mt-4\">\n              <div>\n                <p>To save your game statistics, sign in with your Google account.</p>\n\n                <p>\n                  <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n                    Sign in\n                  </button>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={() => {}}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.myName}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"versus\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Solo)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nfunction MenuItem(props) {\n  const { url, cardName, description } = props\n  return (\n    <div className=\"col-9 col-md-4\">\n      <Link to={url}>\n        <div className=\"card shadow-sm mb-3 mb-md-4\">\n          <Card desc={cardName} />\n        </div>\n      </Link>\n      <p className=\"text-center\">{description}</p>\n    </div>\n  )\n}\n\nfunction Main() {\n  const menuItems = [\n    {\n      url: '/solo',\n      cardName: '0012',\n      description: 'Solo/Local',\n    },\n    {\n      url: '/lobby',\n      cardName: '1121',\n      description: 'Join Game',\n    },\n    {\n      url: '/host',\n      cardName: '2200',\n      description: 'Host Game',\n    },\n  ]\n  return (\n    <div className=\"container mt-3 mt-md-5\">\n      <h1 className=\"d-none d-md-block text-center mb-3 mb-md-5\">Main Menu</h1>\n      <div className=\"row justify-content-center\">\n        {menuItems.map((item, i) => {\n          return <MenuItem key={`card-${i}`} {...item} />\n        })}\n      </div>\n      <div className=\"d-none d-md-block\">\n        <hr />\n        <p>\n          <Link to=\"/rules\">Rules</Link>\n        </p>\n        <p>\n          <Link to=\"/stats\">View Statistics</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport Card from './Card'\nimport { Link } from 'react-router-dom'\n\nfunction ShowCard({ desc }) {\n  return (\n    <div className=\"col-4 my-2\">\n      <div className=\"card\">\n        <Card desc={desc} />\n      </div>\n    </div>\n  )\n}\n\nfunction Rules() {\n  const displayCards = ['0000', '1210', '0022', '2101', '0120', '2011']\n\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find sets of three cards that are either the same or different\n        along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        {displayCards.map((c, i) => {\n          return <ShowCard key={i} desc={c} />\n        })}\n      </div>\n      <p>You'll notice that every card has four different characteristics:</p>\n      <ul className=\"browser-default\">\n        <li>color</li>\n        <li>number</li>\n        <li>shape</li>\n        <li>fill</li>\n      </ul>\n      <p>and each of those characteristics has three different possibilities.</p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>Which you can describe as follows:</p>\n      <ul className=\"browser-default\">\n        <li>color - SAME</li>\n        <li>shape - SAME</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Therefore, the three cards form a set.</p>\n      <p>Here is another set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - SAME</li>\n      </ul>\n      <p>This is not a set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>fill - SAME</li>\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - NOT THE SAME OR DIFFERENT!</li>\n      </ul>\n      <p>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Each characteristic is different for all three cards, so this is a set.</p>\n      <p>\n        <Link to=\"/\">Back Home</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Signout from './Signout'\nimport { handleGoogleRedirect } from '../utils/helpers'\nimport * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\nfunction Login(props) {\n  const user = useSelector((state) => state.user)\n\n  useEffect(() => {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(function(result) {\n        if (result.credential) {\n          // This gives you a Google Access Token. You can use it to access the Google API.\n          var token = result.credential.accessToken\n          // ...\n        }\n        // The signed-in user info.\n        var user = result.user\n        console.log(token, user)\n      })\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code\n        var errorMessage = error.message\n        // The email of the user's account used.\n        var email = error.email\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential\n        // ...\n      })\n  }, [])\n\n  if (!user) {\n    return (\n      <div className=\"container\">\n        <button onClick={handleGoogleRedirect} className=\"btn\">\n          Sign in\n        </button>\n      </div>\n    )\n  }\n  return (\n    <div className=\"container\">\n      <Signout />\n    </div>\n  )\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport { Link } from 'react-router-dom'\n\nconst debugging = false\n\nconst config = {\n  declareTime: 5000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst createPlayers = (num) => {\n  const players = {}\n  for (let i = 0; i < num; i++) {\n    players[i] = {\n      score: 0,\n      color: config.colors[i],\n    }\n  }\n  return players\n}\n\nconst initialState = {\n  numPlayers: null,\n  players: createPlayers(2),\n  gameStarted: false,\n  name: '1',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: '',\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass SharedDevice extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (numPlayers) => {\n    this.setState({\n      numPlayers,\n      players: createPlayers(numPlayers),\n    })\n    this.setState({\n      gameStarted: true,\n    })\n  }\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.declareTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer } = this.state\n    if (!setFound && declarer !== null) {\n      const newSelected = cardToggle(card, this.state.selected)\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, declarer)\n      }\n    }\n  }\n\n  handlePlayerClick = (clickerName) => {\n    const { declarer } = this.state\n    if (declarer === null) {\n      this.performDeclare(clickerName)\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, numPlayers, setFound } = this.state\n    console.log(players)\n    if (!numPlayers) {\n      return (\n        <div className=\"container\">\n          <h4 className=\"mb-4\">Choose Number of Players</h4>\n          <div className=\"row text-center\">\n            {[...Array(6).keys()].map((i) => {\n              return (\n                <div\n                  key={`players-${i}`}\n                  onClick={() => {\n                    this.handleStartGame(i + 1)\n                  }}\n                  className=\"mb-3 col-4\"\n                >\n                  <button className=\"btn btn-info\">{i + 1}</button>\n                </div>\n              )\n            })}\n          </div>\n          <div>\n            <p>\n              <Link to=\"/solo\">Back</Link>\n            </p>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handlePlayerClick={this.handlePlayerClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          sharedDevice={true}\n          gameMode=\"shared-device\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SharedDevice\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { handleGoogleRedirect } from '../utils/helpers'\n\nimport axios from 'axios'\n\nfunction Stats(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n  const [stats, setStats] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const getStats = async () => {\n      axios.get(`/api/user/stats/${user.uid}`).then((response) => {\n        setStats(response.data)\n      })\n    }\n\n    if (!userReducer.loading && user !== null) {\n      getStats()\n    }\n  }, [userReducer.loading])\n\n  if (userReducer.loading) {\n    return 'Loading...'\n  }\n\n  if (user === null) {\n    return (\n      <div className=\"container mt-4\">\n        <p>Sign in to view stats</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mt-2 mt-md-4\">\n      <h3>Statistics</h3>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Difficulty</th>\n            <th>Games Played</th>\n            <th>Winning Percentage</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {stats &&\n            stats.map((row, i) => {\n              return (\n                <tr key={`stats-${i}`}>\n                  <td>{row.difficulty_level}</td>\n                  <td>{row.games_played}</td>\n                  <td>{Math.round(100 * (row.games_won / row.games_played))}%</td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n      <p>\n        <Link to=\"/\">Main Menu</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Stats\n","import React from 'react'\nimport Modal from 'react-bootstrap/Modal'\n\nconst SetModal = ({ children, visible: popupVisible }) => {\n  return (\n    <>\n      <Modal show={popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{children}</Modal.Body>\n        <Modal.Footer></Modal.Footer>\n      </Modal>\n    </>\n  )\n\n  return (\n    <div className={`modal popup-message ${popupVisible ? 'show' : ''}`}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default SetModal\n","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport { shuffle, cloneDeep, isEqual } from 'lodash'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\nimport axios from 'axios'\nimport Slider from 'react-rangeslider'\nimport Modal from './Modal'\n\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n  countSets,\n  handleGoogleRedirect,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport Board from './Board'\nimport Signout from './Signout'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = (cardsOnBoard) => {\n  const getMinSets = (cardsOnBoard) => {\n    return Math.round((cardsOnBoard - 3) / 3)\n  }\n\n  const minSets = getMinSets(cardsOnBoard)\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle(\n      {\n        deck: initialDeck,\n      },\n      { boardSize: cardsOnBoard, minimumSets: minSets },\n    ),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  gameOver: false,\n  startTime: null,\n  elapsedTime: null,\n  setsFound: [],\n  setsOnBoard: null,\n  cardsOnBoard: 12,\n  popupVisible: false,\n  popUpText: 'SET!',\n}\n\nconst sortSet = (set) => {\n  return set.sort()\n}\n\nclass Puzzle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    const { cardsOnBoard } = this.state\n    const gameState = createGameState(cardsOnBoard)\n    const startTime = new Date()\n    this.setState({\n      gameStarted: true,\n      startTime,\n      elapsedTime: 0,\n      ...gameState,\n      setsOnBoard: countSets(gameState.board),\n    })\n    window.timeId = setInterval(() => {\n      const elapsedTime = Math.round((new Date().getTime() - startTime.getTime()) / 1000)\n      this.setState({\n        elapsedTime,\n      })\n    }, 1000)\n  }\n\n  componentDidMount = () => {}\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleDeclare = () => {\n    return\n  }\n\n  resetLocalSelected = (noCheck = false) => {\n    this.setState((currentState) => {\n      if (currentState.selected.length === 3) {\n        if (noCheck || !isSet(currentState.selected)) {\n          return {\n            selected: [],\n          }\n        }\n      }\n    })\n  }\n\n  handleCardClick = (card) => {\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        console.log('Set found')\n        this.setState((currentState) => {\n          window.setTimeout(() => {\n            this.setState({\n              popupVisible: false,\n            })\n            this.resetLocalSelected(true)\n          }, 2000)\n          const { setsFound } = currentState\n          const isNewSet = setsFound\n            .map((set) => {\n              const result = isEqual(newSelected.sort(), set)\n              return !result\n            })\n            .every((result) => result)\n          if (!isNewSet) {\n            return {\n              popupVisible: true,\n              popUpText: 'Already found!',\n            }\n          }\n          const newSetsFound = [...setsFound, newSelected.sort()]\n          return {\n            setsFound: newSetsFound,\n            popupVisible: true,\n            popUpText: 'SET!',\n          }\n        })\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1200)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  handleRedeal = () => {\n    return\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameStarted,\n      setFound,\n      setsFound,\n      popupVisible,\n    } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          {user !== null && <Signout />}\n          <h3>Puzzle Mode</h3>\n          <p>Find as many sets as you can</p>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              <Slider\n                ref={(input) => {\n                  this.difficultyInput = input\n                }}\n                min={2}\n                max={4}\n                orientation=\"horizontal\"\n                tooltip={true}\n                // labels={{ 2: 6, 3: 9, 4: 12 }}\n                format={(v) => 3 * v}\n                value={Number(this.state.cardsOnBoard) / 3}\n                onChange={(cards) => {\n                  this.setState({\n                    cardsOnBoard: cards * 3,\n                  })\n                }}\n              />\n              <form onSubmit={this.handleStartGame}>\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n            <div className=\"row\">\n              <div style={{ marginTop: '48px' }} className=\"col s12\">\n                <p style={{ marginTop: '36px' }}>\n                  <Link to=\"/solo\">Back to Solo Menu</Link>\n                </p>\n                {!user && (\n                  <Fragment>\n                    <hr />\n                    <p>To save your stats, sign in with your Google account.</p>\n\n                    <p>\n                      <button onClick={handleGoogleRedirect} className=\"btn\">\n                        Sign in\n                      </button>\n                    </p>\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">{this.state.popUpText}</p>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"puzzle\"\n          setsFound={setsFound}\n          startTime={this.state.startTime}\n          elapsedTime={this.state.elapsedTime}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Puzzle)\n","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Host from './Host'\nimport Guest from './Guest'\nimport Lobby from './Lobby'\nimport Solo from './Solo'\nimport Main from './Main'\nimport Rules from './Rules'\nimport Login from './Login'\nimport SharedDevice from './SharedDevice'\nimport Stats from './Stats'\nimport Puzzle from './Puzzle'\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/local\" component={SharedDevice} />\n            <Route path=\"/rules\" component={Rules} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/stats\" component={Stats} />\n            <Route path=\"/puzzle\" component={Puzzle} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default Routes\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\n// import 'firebase/firestore'\n// import firestore from '../firestore'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\n\nfunction App(props) {\n  const [user, setUser] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const nickname = window.localStorage.getItem('nickname') || user.displayName.split(' ')[0]\n        const myUser = {\n          displayName: user.displayName,\n          email: user.email,\n          emailVerified: user.emailVerified,\n          photoURL: user.photoURL,\n          isAnonymous: user.isAnonymous,\n          uid: user.uid,\n          providerData: user.providerData,\n          nickname,\n        }\n        dispatch(updateUser({ loading: false, user: myUser }))\n        axios\n          .get(`/api/user/${user.uid}`)\n          .then((result) => {\n            console.log('User is registered')\n          })\n          .catch((err) => {\n            if (err.response && err.response.status === 404) {\n              console.log('User not registered')\n              axios\n                .post('/api/user', {\n                  uid: user.uid,\n                  info: myUser,\n                })\n                .then(() => {\n                  console.log('User registered successfully')\n                })\n                .catch((err) => {\n                  console.log('Error registering user', err)\n                })\n            } else {\n              console.log('An error occurred trying to GET user info')\n            }\n          })\n      } else {\n        console.log('Not signed in')\n        dispatch(updateUser({ loading: false, user: null }))\n      }\n    })\n  }, [])\n\n  return <Routes />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/bts/index.scss'\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport store from './redux-helpers'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n","module.exports = __webpack_public_path__ + \"static/media/sad_trombone.baad2ca9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/applause.c2030d5b.mp3\";"],"sourceRoot":""}