{"version":3,"sources":["redux-helpers.js","firebaseConfig.js","firestore.js","components/Signout.js","utils/helpers.js","components/Card.js","components/GameOver.js","config.js","components/TopBar.js","components/Board.js","components/PlayerList.js","components/Host.tsx","components/Guest.js","components/Lobby.js","components/Solo.js","components/Main.js","components/Rules.js","components/Login.js","components/SharedDevice.js","components/Stats.js","components/Modal.js","components/Puzzle.js","components/Routes.js","components/App.js","index.js","assets/sad_trombone.mp3","assets/applause.mp3"],"names":["updateUser","user","type","payload","updateNickname","nickname","defaultUser","loading","store","configureStore","reducer","state","action","newState","update","$set","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firestore","Signout","dispatch","useDispatch","history","useHistory","className","style","cursor","onClick","auth","signOut","then","console","log","push","range","n","Array","keys","displaySet","tuple","matrix","rowSize","map","i","j","includes","join","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","selected","Number","cardToggle","filter","reshuffle","boardSize","minimumSets","newDeck","shuffle","slice","removeSelected","newCards","newBoard","index","indexOf","handleGoogleRedirect","provider","GoogleAuthProvider","signInWithRedirect","updateGame","reference","data","collection","doc","lastUpdate","FieldValue","serverTimestamp","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","ry","rx","cy","cx","points","Card","colors","0","1","2","white","getFill","drawShape","props","desc","split","this","number","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","Component","GameOver","winnerName","gameOver","myName","solo","useSelector","soundEffect","applause","sadTrombone","src","autoPlay","finalSound","to","TopBar","gameMode","declarer","setsFound","elapsedTime","startTime","sets","justifyContent","seconds","mm","Math","floor","ss","pad","formatTime","SharedPlayersDisplay","players","handlePlayerClick","info","name","score","Board","useState","setSets","window","innerHeight","setWindowHeight","setFound","sharedDevice","useEffect","resize","debounce","addEventListener","removeEventListener","process","borderColor","get","getBorderColor","isEmpty","playersArray","topBoxes","ceil","topPlayers","bottomPlayers","Object","Modal","show","Header","Title","Body","host","handleCardClick","handleRedeal","PlayerList","isHost","setState","findKey","player","gameStarted","turnTime","playingTo","Host","userReducer","userLoading","firebaseRefs","useRef","current","initialDeck","initialGameState","gameInProgress","setGameInProgress","gameTitle","setGameTitle","activeGameUpdater","setActiveGameUpdater","gameSubscription","actionsSubscription","setActionSubscription","created","setFullState","currentState","uid","where","querySnapshot","oldGame","catch","error","clearInterval","actionsSubscribe","actions","onSnapshot","snapshot","docChanges","change","processAction","delete","subscribeToGame","game","gameUpdateId","setInterval","unsubscribe","newPlayers","setAndSendState","verifySelectedOnBoard","updateSelected","removeSet","newScores","newScore","$merge","setTimeout","markPointForDeclarer","newSelected","reloadGame","undefined","onSubmit","e","preventDefault","autoFocus","placeholder","value","onChange","target","localStorage","setItem","officialTitle","set","creator_uid","updateId","Guest","popupVisible","displayAnimation","animatedSet","pending","setMyName","resetLocalSelected","sendAction","add","docRef","docId","gameName","match","params","unsubGames","updatedState","mySelected","processUpdate","unsubActions","nameInput","Fragment","Spinner","animation","Lobby","componentWillUnmount","newGame","init","games","gamesRef","newGames","activeGames","g","updated","toMillis","now","Date","getTime","round","marginTop","calculateIntervalFromDifficulty","diff","isNaN","createGameState","initialState","you","cpu","cpuTurnInterval","Solo","handleStartGame","cpuTimer","cpuTurn","componentDidMount","savedDifficulty","getItem","difficulty","result","toString","trim","nameThird","cpuFound","cpuAnimation","animateCpuChoice","cpuCopy","pop","updatePlayerScore","delta","expireDeclare","timeDeclared","player_won","total_time","axios","post","difficulty_level","winning_score","err","performDeclare","undeclareId","clearTimeout","removeSelectedCards","resetGame","cloneDeep","handleDeclare","maxValue","minValue","listStyleType","connect","MenuItem","url","cardName","description","Main","item","ShowCard","Rules","Login","getRedirectResult","credential","token","accessToken","code","message","email","declareTime","cpuDelay","createPlayers","num","numPlayers","SharedDevice","undeclareID","clickerName","Stats","stats","setStats","getStats","response","row","games_played","games_won","SetModal","children","visible","Footer","cardsOnBoard","minSets","getMinSets","setsOnBoard","popUpText","Puzzle","gameState","timeId","noCheck","isEqual","sort","every","Routes","exact","path","component","App","onAuthStateChanged","displayName","myUser","emailVerified","photoURL","isAnonymous","providerData","status","ReactDOM","render","document","getElementById","module","exports"],"mappings":"qPAWaA,EAAa,SAACC,GAAD,MAAW,CACnCC,KAJyB,cAKzBC,QAASF,IAOEG,EAAiB,SAACC,GAAD,MAAe,CAC3CH,KAZ6B,kBAa7BC,QAASE,IAGEC,EAAc,CAAEC,SAAS,EAAMN,KAAM,IA2BnCO,EANDC,YAAe,CAC3BC,QAAS,CACPT,KArBgB,WAAkC,IAAjCU,EAAgC,uDAAxBL,EAAaM,EAAW,uCACnD,OAAQA,EAAOV,MACb,IArBuB,cAsBrB,OAAO,2BACFS,GACAC,EAAOT,SAEd,IAzB2B,kBA0BzB,IAAMU,EAAWC,IAAOH,EAAO,CAC7BV,KAAM,CAAEI,SAAU,CAAEU,KAAMH,EAAOT,YAEnC,OAAOU,EACT,IAAK,SACH,MAAO,CAAEN,SAAS,EAAON,KAAM,MACjC,QACE,OAAOU,O,gBC/BEK,G,YAXQ,CACrBC,OAAQ,0CACRC,WAAY,2BACZC,YAAa,kCACbC,UAAW,WACXC,cAAe,uBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCHjBC,gBAAuBT,GAGvB,IAEeU,EAFGD,cCkCHE,MA1Bf,WACE,IAAMC,EAAWC,cACXC,EAAUC,cAahB,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,OAAQ,YACrC,uBAAGF,UAAU,yBACX,uBAAGA,UAAU,iBAAiBG,QAdpB,WACdV,IACGW,OACAC,UACAC,MAAK,WACJV,EHTqB,CAC3B1B,KAAM,WGSAqC,QAAQC,IAAI,eACZV,EAAQW,KAAK,UAOb,e,uBCxBKC,EAAQ,SAACC,GACpB,OAAO,YAAIC,MAAMD,GAAGE,SAGhBC,EAAa,SAACC,GAAwB,IACtCC,EADqBC,EAAgB,uDAAN,EAGjCD,EADc,IAAZC,EACOP,EAAM,GAAGQ,KAAI,SAACC,GAOrB,OANYT,EAAM,GAAGQ,KAAI,SAACE,GACxB,OAAIL,EAAMM,SAAS,EAAIF,EAAIC,GAClB,IAEF,OAEEE,KAAK,OAGTZ,EAAM,GAAGQ,KAAI,SAACC,GAOrB,OANYT,EAAM,GAAGQ,KAAI,SAACE,GACxB,OAAIL,EAAMM,SAAS,EAAIF,EAAIC,GAClB,IAEF,OAEEE,KAAK,OAGpBf,QAAQC,IAAIQ,EAAOM,KAAK,QAYbC,EAAY,SAACC,GAGxB,IAHoF,IAAD,yDAAP,GAAO,IAAlDC,aAAkD,aAAnCC,uBAAmC,SAC/EC,EAAQ,EACRC,EAAY,GACPC,EAAI,EAAGA,EAAIL,EAAMM,OAAS,EAAGD,IACpC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIP,EAAMM,OAAS,EAAGC,IACxC,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIR,EAAMM,OAAQE,IAEpC,GADAJ,EAAY,CAACJ,EAAMK,GAAIL,EAAMO,GAAIP,EAAMQ,IACnCC,EAAML,KACJH,GACFX,EAAW,CAACe,EAAGE,EAAGC,IAEpBL,IACID,GACF,OAAOC,EAMjB,OAAOA,GAGIO,EAAW,WACtB,IAAIC,EAAO,GAWX,OAVAzB,EAAM,GAAG0B,SAAQ,SAACJ,GAChBtB,EAAM,GAAG0B,SAAQ,SAACzB,GAChBD,EAAM,GAAG0B,SAAQ,SAACC,GAChB3B,EAAM,GAAG0B,SAAQ,SAACE,GAChB,IAAMC,EAAO,GAAKP,EAAIK,EAAI1B,EAAI2B,EAC9BH,EAAK1B,KAAK8B,eAKXJ,GAGIF,EAAQ,SAACO,GACpB,GAAwB,IAApBA,EAASV,OACX,OAAO,EAGT,IADA,kBAAkBU,EAAlB,GAAOX,EAAP,KAAUE,EAAV,KAAaC,EAAb,KACSb,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADYsB,OAAOZ,EAAEV,IAAMsB,OAAOV,EAAEZ,IAAMsB,OAAOT,EAAEb,KACzC,IAAM,EACd,OAAO,EAGX,OAAO,GAmBIuB,EAAa,SAACH,EAAMC,GAC/B,OAAIA,EAASnB,SAASkB,GACbC,EAASG,QAAO,SAACX,GAAD,OAAOA,IAAMO,KAE9B,GAAN,mBAAWC,GAAX,CAAqBD,KAIZK,EAAY,SAAC,GAExB,IAFmF,IAAD,IAAxDpB,aAAwD,MAAhD,GAAgD,EAA5CW,EAA4C,EAA5CA,KAAQU,EAAoC,uDAAxB,GAAIC,EAAoB,uDAAN,EACxEC,EAAUC,kBAAQ,GAAD,mBAAKxB,GAAL,YAAeW,KAElCZ,EAAUwB,EAAQE,MAAM,EAAGJ,IAAcC,GACzCvB,EAAUwB,EAAS,CAAErB,iBAAiB,IAAU,GAEhDqB,EAAUC,kBAAQD,GAEpB,MAAO,CACLZ,KAAMY,EAAQE,MAAMJ,GACpBrB,MAAOuB,EAAQE,MAAM,EAAGJ,KAIfK,EAAiB,SAACvE,GAC7B,IAAQ6C,EAA0B7C,EAA1B6C,MAAOW,EAAmBxD,EAAnBwD,KAAMK,EAAa7D,EAAb6D,SACfW,EAAWhB,EAAKc,MAAM,EAAG,GAC3BG,EAAQ,YAAO5B,GACfuB,EAAUZ,EAAKc,MAAM,GAKzB,IAJAT,EAASJ,SAAQ,SAACJ,EAAGb,GACnB,IAAIkC,EAAQD,EAASE,QAAQtB,GAC7BoB,EAASC,GAASF,EAAShC,MAEE,IAAxBI,EAAU6B,IAAiB,OACOR,EAAU,CAC/CpB,MAAO4B,EACPjB,KAAMY,IAFEA,EADsB,EAC5BZ,KAAsBiB,EADM,EACb5B,MAMrB,MAAO,CACLW,KAAMY,EACNvB,MAAO4B,EACPZ,SAAU,KA6BDe,EAAuB,WAClC,IAAMC,EAAW,IAAI/D,OAAcgE,mBACnChE,SAAgBiE,mBAAmBF,IAGxBG,EAAa,SAACC,EAAWC,IAEX,kBAAdD,EACFlE,EAAUoE,WAAW,SAASC,IAAIH,GAElCA,GAEJ9E,OAAL,2BACK+E,GADL,IAEEG,WAAYvE,YAAmBwE,WAAWC,sBClMxCC,EACG,IADHA,EAEI,IAFJA,EAGS,EAHTA,EAIK,GA0BLC,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACMC,EAAgBJ,EAC9C,OACE,yBAAKK,MAAM,MAAMC,OAAO,MAAMC,MAAM,8BAClC,2BACE,0BAAML,KAAK,OAAOM,GAAG,oBAAoBF,OAAO,MAAMD,MAAM,MAAMI,EAAE,KAAKC,EAAE,OAC3E,uBACEC,QAAQ,OACRC,SAAS,UACTH,EAAE,IACFC,EAAE,IACFJ,OAAO,OACPD,MAAM,OACNG,GAAG,cAEH,0BAAMN,KAAK,OAAOE,YAAY,IAAIK,EAAE,IAAIC,EAAE,IAAIJ,OAAO,OAAOD,MAAM,WAGtE,2BACE,0BACEQ,OAAQV,EACRW,UAAU,qDAKVN,GAAG,QACHO,EAAE,uIAYFC,YAAY,OACZC,cAAc,OACdb,YAAaA,EACbF,KAAMA,OAOVgB,EAAQ,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOjB,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtBiB,EAAwCpB,EAA/BM,EAA+BN,EAAvBK,EAAuBL,EAC9C,MAAc,MAAVmB,GACFC,GAAoB,EACb,kBAAC,EAAD,CAAUlB,KAAMA,EAAMC,MAAOA,KAExB,MAAVgB,EAEA,2BACE,6BACEN,OAAQV,EACRkB,IAAKf,EAAS,EAAIc,GAAW,EAC7BE,IAAKjB,EAAQ,EAAIe,GAAW,EAC5BG,GAAIjB,EAAS,EACbkB,GAAInB,EAAQ,EACZW,YAAY,OACZC,cAAc,OACdb,YAAaJ,EACbE,KAAMA,KAKA,MAAViB,EAEA,2BAGE,6BACEM,OAAM,UAAKL,EAAL,YAAgBd,EAAS,EAAzB,uBACJD,EAAQ,EADJ,YACSe,EADT,uBAEJf,EAAQe,EAFJ,YAEed,EAAS,EAFxB,uBAGJD,EAAQ,EAHJ,YAGSC,EAASc,GACxBtF,MAAO,CAAEoE,KAAMA,EAAMW,OAAQV,EAAOC,YAAaJ,WAVzD,GAkGa0B,E,4MAhFbC,OAAS,CACPC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,MAAO,Q,EAGTC,QAAU,SAAC7B,EAAOD,GAChB,MAAa,MAATA,EACI,aAAN,OAAoBC,EAApB,YAA6BD,EAA7B,KAEW,MAATA,EACK,EAAKyB,OAAOxB,GAEd,EAAKwB,OAAOI,O,EAGrBE,UAAY,WACV,MAA+B,EAAKC,MAAMC,KAAKC,MAAM,IAArD,mBAASjC,EAAT,KAAgBgB,EAAhB,KAAuBjB,EAAvB,KACA,OACE,kBAAC,WAAD,KACE,2BACE,6CACA,0BAAMA,KAAM,EAAKyB,OAAOI,MAAOvB,GAAG,oBAAoBC,EAAE,KAAKC,EAAE,OAC/D,uBACEC,QAAQ,OACRC,SAAS,UACTH,EAAE,IACFC,EAAE,IACFJ,OAAO,OACPD,MAAM,OACNG,GAAG,cAEH,0BAAMJ,YAAY,IAAIK,EAAE,IAAIC,EAAE,IAAIJ,OAAO,OAAOD,MAAM,WAG1D,kBAAC,EAAD,CAAOc,MAAOA,EAAOjB,KAAM,EAAK8B,QAAQ7B,EAAOD,GAAOC,MAAO,EAAKwB,OAAOxB,O,4CAK/E,WAAU,IAAD,OACP,EAAgCkC,KAAKH,MAAMC,KAAKC,MAAM,IAAtD,mBAAOE,EAAP,KAAenC,EAAf,KAAwBD,EAAxB,KACA,OACE,yBAAKrE,UAAU,2CACb,yBAAKwE,MAAM,IAAIC,OAAO,KACpB,6BACEE,GAAE,eAAUL,EAAV,YAAmBD,GACrBG,MAAO,GACPC,OAAO,KACPiC,iBAAiB,iBACjBC,aAAa,kBAEb,0BACEC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,KACH9G,MAAO,CAAE+E,OAAQwB,KAAKV,OAAOxB,GAAQC,YAAa,SAKvD7D,EAAM+B,OAAOgE,GAAU,GAAGvF,KAAI,SAACC,GAC9B,OACE,yBACE6F,IAAK7F,EACLnB,UAAU,QACViH,QAAO,cAAS9C,EAAT,YAAyBA,GAChCO,MAAM,8BAEL,EAAK0B,qB,GAxEDc,a,kCCjFJC,MAtCf,SAAkBd,GAChB,IAAkBe,EAA6Bf,EAAvCgB,SAAsBC,EAAiBjB,EAAjBiB,OAAQC,EAASlB,EAATkB,KAM9BtJ,EADYuJ,aAAY,SAAC7I,GAAD,OAAWA,EAAMV,QACzCA,KAER,OACE,yBAAK+B,UAAU,4BARE,WACjB,IAAMyH,EAAcL,IAAeE,EAASI,IAAWC,IACvD,OAAO,2BAAOC,IAAKH,EAAaI,UAAQ,IAOrCC,GACD,yBAAK9H,UAAU,8BACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,oBAAd,cACA,uBAAGA,UAAU,oBAAb,WAAyCoH,EAAzC,KACA,yBAAKpH,UAAU,8BACb,yBAAKA,UAAU,SACb,uBAAGA,UAAU,eACX,kBAAC,IAAD,CAAM+H,GAAG,KAAT,UAGHR,GAAiB,OAATtJ,GACP,yBAAK+B,UAAU,SACb,uBAAGA,UAAU,eACX,kBAAC,IAAD,CAAM+H,GAAG,UAAT,iB,QChCPjC,EAAS,CAAC,aAAc,OAAQ,QAAS,cAAe,SAAU,UCqDhEkC,OApCf,YAAyF,IAAvEC,EAAsE,EAAtEA,SAAgBzG,GAAsD,EAA5DW,KAA4D,EAAtDX,OAAO0G,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,UAAsBC,GAAe,EAA1BC,UAA0B,EAAfD,aACjEE,EAAO/G,EAAUC,GACvB,OAAQyG,GACN,IAAK,gBACH,OAAO,KACT,IAAK,SACH,OACE,yBAAKjI,UAAS,yBAAoBkI,EAAW,QAAU,OAAzC,YACZ,yBAAKlI,UAAU,cACb,yBAAKA,UAAU,6CACb,sCAAYsI,GACZ,6BAAMJ,GAAY,4CAAQA,OAKpC,IAAK,SACH,OACE,yBAAKlI,UAAU,gBACb,6BACE,yBACEA,UAAU,cACVC,MAAO,CAAE6E,QAAS,OAAQyD,eAAgB,kBAE1C,4CAAkBD,GAClB,2CAAiBA,EAAOH,EAAUrG,QAClC,sCArCK,SAAC0G,GAClB,IAKMC,EAAKC,KAAKC,MAAMH,EAAU,IAC1BI,EAAKJ,EAAU,GAAKC,EAC1B,MAAM,GAAN,OAAUA,EAAV,YAPY,SAACG,GAGX,OAFQ,KACUA,GAAI3F,OADd,KACuBnB,QAKjB+G,CAAID,IA6BIE,CAAWV,OAKjC,QACE,OAAO,OCxCb,SAASW,GAAT,GAAyE,IAAzCC,EAAwC,EAAxCA,QAASd,EAA+B,EAA/BA,SAAUe,EAAqB,EAArBA,kBACjD,OACE,yBAAKjJ,UAAU,gDACZgJ,EAAQ9H,KAAI,SAACgI,GACZ,OACE,yBACElJ,UAAS,mBAAckJ,EAAK5E,MAAnB,YAA4B4E,EAAKC,MAAQjB,EAAW,gBAAkB,IAC/E/H,QAAS,WACP8I,EAAkBC,EAAKC,OAEzBnC,IAAKkC,EAAKC,MAEV,uBAAGnJ,UAAU,qBAAqBkJ,EAAKC,MAAQjB,EAAW,OAASgB,EAAKE,YAoKrEC,OA5Jf,SAAehD,GACb,MAAwBiD,mBAAS,MAAjC,mBAAaC,GAAb,WACA,EAAwCD,mBAASE,OAAOC,aAAxD,mBAAqBC,GAArB,WAEElI,EAWE6E,EAXF7E,MACAgB,EAUE6D,EAVF7D,SAEA0F,GAQE7B,EATFlE,KASEkE,EARF6B,UACAc,EAOE3C,EAPF2C,QACA3B,EAMEhB,EANFgB,SACAC,EAKEjB,EALFiB,OACAqC,EAIEtD,EAJFsD,SACAC,EAGEvD,EAHFuD,aACArC,EAEElB,EAFFkB,KACAU,EACE5B,EADF4B,SAGF4B,qBAAU,WACR,IAAMC,EAASC,oBAAS,WACtBL,EAAgBF,OAAOC,eACtB,KAIH,OAFAD,OAAOQ,iBAAiB,SAAUF,GAE3B,WACLN,OAAOS,oBAAoB,SAAUH,MAEtC,IAEHD,qBAAU,WACRN,EAAQhI,EAAUC,EAAO,CAAEC,OAAOyI,OACjC,CAAC1I,IAEJ,IAOM2I,EAPiB,SAAC,GAA2B,IAAzBjC,EAAwB,EAAxBA,SAAUc,EAAc,EAAdA,QAClC,OAAId,EACKkC,cAAIpB,EAAD,UAAad,EAAb,UAA+B,IAEpCkC,cAAIpB,EAAD,UAAa1B,EAAb,UAA6B,IAGrB+C,CAAehE,GAEnC,IAAKiE,kBAAQjD,GACX,OAAO,kBAAC,EAAD,CAAUA,SAAUA,EAAUC,OAAQA,EAAQC,KAAMA,IAG7D,IAAMgD,EAAerJ,cAAI8H,GAAS,SAACE,EAAMC,GACvC,OAAO,aACLA,QACGD,MAIDsB,EAAW9B,KAAK+B,KAAKF,EAAazI,OAAS,GAC3C4I,EAAaH,EAAatH,MAAM,EAAGuH,GACnCG,EAAgBJ,EAAatH,MAAMuH,GAEzC,OACE,kBAAC,WAAD,MACIF,kBAAQtB,KAAa4B,OAAO/J,KAAKmI,GAAS3H,SAASiG,KACnD,kBAACuD,EAAA,EAAD,CAAOC,MAAI,GACT,kBAACD,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,MAAP,4BAEF,kBAACH,EAAA,EAAMI,KAAP,KACE,wCACA,wBAAIjL,UAAU,cACXkB,cAAI8H,GAAS,SAACE,EAAMC,GACnB,OACE,wBAAInC,IAAKmC,EAAMnJ,UAAU,mBACvB,0BAAMA,UAAS,eACZmJ,EADH,IACUD,EAAKgC,MAAQ,iBAUrC,kBAAC,GAAW7E,GACZ,yBAAKrG,UAAU,aACZ4J,GACC,kBAACb,GAAD,CACEC,QAAS0B,EACTxC,SAAUA,EACVe,kBAAmB5C,EAAM4C,oBAI7B,yBAAKjJ,UAAU,+CACb,yBAAKA,UAAU,wBACZwB,EAAMN,KAAI,SAACqB,GACV,OACE,yBACEyE,IAAKzE,EACLvC,UAAS,eACTG,QAAS,WACPkG,EAAM8E,gBAAgB5I,KAGxB,yBACEvC,UAAS,sBAAiBwC,EAASnB,SAASkB,GAAlB,aAAgC4H,GAAgB,KAE1E,yBACEnK,UAAS,eACP2J,GAAgC,IAApBnH,EAASV,SAAiBU,EAASnB,SAASkB,GACpD,SACA,KAGN,kBAAC,EAAD,CAAM+D,KAAM/D,YAOtBqH,GAA6B,WAAb3B,GAChB,yBAAKjI,UAAU,qCACZkB,cAAI8H,GAAS,SAACE,EAAMC,GACnB,OACE,yBAAKnC,IAAKmC,EAAMnJ,UAAU,aACxB,0BAAMA,UAAS,yBAAoBkJ,EAAK5E,QACrC6E,EADH,KACWD,EAAKE,YAQzBQ,GACC,kBAACb,GAAD,CACEC,QAAS2B,EACTzC,SAAUA,EACVe,kBAAmB5C,EAAM4C,oBAI5B5C,EAAM+E,cACL,yBAAKpL,UAAU,YACb,yBAAKA,UAAU,oBACb,4BAAQG,QAASkG,EAAM+E,aAAcpL,UAAU,mBAA/C,iBCvIDqL,OAnCf,YAAoD,IAA9BC,EAA6B,EAA7BA,OAAQtC,EAAqB,EAArBA,QAASuC,EAAY,EAAZA,SAGrC,OAFaC,kBAAQxC,GAAS,SAACyC,GAAD,OAAYA,EAAOP,QAG/C,yBAAKlL,UAAU,kBACb,wCACA,wBAAIA,UAAU,cACXkB,cAAI8H,GAAS,SAACE,EAAMC,GACnB,OACE,wBAAInC,IAAKmC,EAAMnJ,UAAU,mBACvB,0BAAMA,UAAS,eACZmJ,EADH,IACUD,EAAKgC,MAAQ,eAM9BI,EACC,4BACEtL,UAAU,kBACVG,QAAS,WACPoL,EAAS,CACPG,aAAa,MAJnB,cAWA,kE,2yMCLR,IAAMvH,GAAS,CACbwH,SAAU,IACV7F,SACA8F,UAAW,GAgeEC,OAtdf,WACE,IAAMC,EAActE,aAAY,SAAC7I,GAAD,OAAgBA,EAAMV,QAC9CA,EAA+B6N,EAA/B7N,KAAe8N,EAAgBD,EAAzBvN,QACRqB,EAAWC,cAGXmM,EADSC,iBAAO,IACMC,QAEtBC,EAAcjK,IACdkK,EAIL,2BACIxJ,EAAU,CACXT,KAAMgK,EAAYlJ,MAAM,IACxBzB,MAAO2K,EAAYlJ,MAAM,EAAG,OAH/B,IAKCT,SAAU,KAGZ,EAA4C8G,qBAA5C,mBAAO+C,EAAP,KAAuBC,EAAvB,KACA,EAAkChD,mBAAS,IAA3C,mBAAOiD,EAAP,KAAkBC,EAAlB,KACA,EAAkDlD,qBAAlD,mBAAOmD,EAAP,KAA0BC,EAA1B,KACA,EAAgDpD,qBAAhD,mBAAOqD,EAAP,KACA,GADA,KACqDrD,sBAArD,mBAAOsD,EAAP,KAA4BC,EAA5B,KAEA,EAA8BvD,mBAAQ,aACpCiD,UAAW,GACXvD,QAAS,GACT8D,SAAS,EACTpB,aAAa,EACbpE,OAAQ,GACRqC,UAAU,EACVzB,SAAU,KACVb,SAAU,IACP+E,IATL,mBAAOzN,EAAP,KAAcoO,EAAd,KAYMC,EAAef,iBAAOtN,GAC5BqO,EAAad,QAAUvN,EAEvBkL,qBAAU,WACJ5L,IAASqM,kBAAQrM,EAAKgP,MACxBvN,EACGoE,WAAW,SACXoJ,MAAM,cAAe,KAAMjP,EAAKgP,KAChC7C,MACA9J,MAAK,SAAS6M,GACbA,EAAc/K,SAAQ,SAAS2B,GAC7BxD,QAAQC,IAAIuD,EAAIY,IAChB,IAAMyI,EAAO,2BACRrJ,EAAIF,QADI,IAEX0I,UAAWxI,EAAIY,KAEjBpE,QAAQC,IAAI,aAAc4M,GAC1Bd,EAAkBc,SAGrBC,OAAM,SAASC,GACd/M,QAAQC,IAAI,4BAA6B8M,QAG9C,CAACrP,IAEJ4L,qBAAU,WACR,OAAO,WACD+C,GAEFA,IAEED,GAEFA,OAGH,CAACA,EAAkBC,IAEtB/C,qBAAU,WACR,OAAO,WACLL,OAAO+D,cAAcd,MAEtB,CAACA,IAEJ,IAAMlB,EAAW,SAACzM,GAChBiO,EAAa,2BACRC,EAAad,SACbpN,KAmCD0O,EAAmB,SAAC5J,GACxB,IAMM6J,GALmB,kBAAd7J,EACHlE,EAAUoE,WAAW,SAASC,IAAIH,GAElCA,GAEYE,WAAW,WAgB/B,OAfAvD,QAAQC,IAAIiN,GACZA,EAAQC,YAAW,SAACC,GAClBpN,QAAQC,IAAI,uBACZmN,EAASC,aAAaxL,SAAQ,SAACyL,GAC7B,GAAoB,UAAhBA,EAAO3P,KAAkB,CAC3B,IAAMU,EAASiP,EAAO9J,IAAIF,OAC1BtD,QAAQC,IAAI5B,GACZkP,GAAclP,GACd6O,EAAQ1J,IAAI8J,EAAO9J,IAAIY,IAAIoJ,SAET,YAAhBF,EAAO3P,MACTqC,QAAQC,IAAI,mBAAoBqN,EAAO9J,IAAIF,cAI1C4J,GAkBHO,GAAe,wCAAG,WAAOzB,GAAP,0EACtBP,EAAaiC,KAAOvO,EAAUoE,WAAW,SAASC,IAAIwI,GAChD2B,EAAe1E,OAAO2E,aAAY,WACtCxK,EAAWqI,EAAaiC,KAAM,MAC7B,KAEHvB,EAAqBwB,GAEfE,EAAcZ,EAAiBxB,EAAaiC,MAClDpB,EAAsBuB,GATA,2CAAH,sDAyHfN,GAAgB,SAAClP,GACrB,IAAQV,EAAkBU,EAAlBV,KAAMC,EAAYS,EAAZT,QACd,EAAqC6O,EAAad,QAA1ClD,EAAR,EAAQA,QAASd,EAAjB,EAAiBA,SAAU1G,EAA3B,EAA2BA,MAC3B,OAAQtD,GACN,IAAK,OACH,GAAI0M,OAAO/J,KAAKmI,GAAS3H,SAASlD,EAAQgL,MACxC,OAEF,IAAMkF,EAAU,2BACXrF,GADW,kBAEb7K,EAAQgL,KAAO,CACd+B,MAAM,EACN+B,IAAK9O,EAAQ8O,IACb7D,MAAO,EACP9E,MAAOH,GAAO2B,OAAO8E,OAAO/J,KAAKmI,GAASlH,WAG9CwM,GAAgB,CAAEtF,QAASqF,IAC3B,MACF,IAAK,SACEnG,GAAYqG,GAAsB/M,EAAOrD,EAAQqE,WACpDgM,GAAerQ,EAAQqE,SAAUrE,EAAQgL,MAE3C,MACF,QACE,SAIAsF,GAAY,SAACjM,EAAoB0F,GACrC,GAAIjG,EAAMO,GAAW,CACnB,IAAMkM,EA1DmB,SAACxG,GAC5B,IAAKA,EACH,MAAO,GAET,IAAQc,EAAYgE,EAAad,QAAzBlD,QACF2F,EAAW3F,EAAQd,GAAUkB,MAAQ,EACrCiF,EAAavP,IAAOkK,EAAD,eACtBd,EAAW,CACV0G,OAAQ,CACNxF,MAAOuF,MAIPtH,EAAWsH,GAAYxK,GAAOyH,UAAY1D,EAAW,GAQ3D,OAPIb,GACFmC,OAAOqF,YAAW,WAChB7C,EAAaiC,KAAKF,SAClBR,cAAcd,KACb,KAGE,CACLzD,QAASqF,EACThH,YAmCkByH,CAAqB5G,GACjCrJ,EAA6B,uCAC9BmO,EAAad,SADiB,IAEjCvC,UAAU,EACVzB,SAAU,MACPwG,GACAxL,EAAe8J,EAAad,UAEjCoC,GAAgBzP,KAIdyP,GAAkB,SAACxP,GACvByB,QAAQC,IAAI,WAAYwM,EAAad,QAAQK,WAC7ChB,EAASzM,GACT6E,EAAWqI,EAAaiC,KAAMnP,IAG1ByP,GAAwB,SAAC/M,EAAiBgB,GAC9C,IAAK,IAAIrB,EAAI,EAAGA,EAAIqB,EAASV,OAAQX,IACnC,IAAKK,EAAMH,SAASmB,EAASrB,IAC3B,OAAO,EAGX,OAAO,GAGHqN,GAAiB,SAACO,EAAuB7G,GAC7C,IAAMrJ,EAAW,CACf8K,SAAU1H,EAAM8M,GAChBvM,SAAUuM,EACV7G,YAEFoG,GAAgBzP,GACZA,EAAS8K,UACXkF,YAAW,WACTJ,GAAUM,EAAa7G,KACtB,MAIC1G,GAA2E7C,EAA3E6C,MAAOW,GAAoExD,EAApEwD,KAAMK,GAA8D7D,EAA9D6D,SAAU0F,GAAoDvJ,EAApDuJ,SAAUc,GAA0CrK,EAA1CqK,QAAS8D,GAAiCnO,EAAjCmO,QAASpB,GAAwB/M,EAAxB+M,YAAapE,GAAW3I,EAAX2I,OAExE,OAAIyE,EACK,aAGLzB,kBAAQrM,GAER,yBAAK+B,UAAU,kBACb,gFACA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,aAQJqM,IAAmB1N,EAAMmO,QAEzB,yBAAK9M,UAAU,aACb,4EACA,4BAAQA,UAAU,uBAAuBG,QAAS,kBA5MrC,WAEjB,IAAM+K,EAAOM,kBAAQa,EAAerD,SAAS,SAACyC,GAAD,OAAYA,EAAOP,QAExDqB,EAAcF,EAAdE,UACRhB,EAAS,CAAEgB,cACXyB,GAAgBzB,GAEhBhB,EAAS,yBACPjE,OAAQ4D,EACR4B,SAAS,GACNT,GAHG,IAKNrI,WAAYvE,IAASC,UAAUuE,WAAWC,qBA+LgB8K,KAAxD,QAGA,4BAAQhP,UAAU,iBAAiBG,QAnSd,WAEzB,IAAQoM,EAAcF,EAAdE,UACR7M,EACGoE,WAAW,SACXC,IAAIwI,GACJwB,SACAzN,MAAK,WACJC,QAAQC,IAAI,oBACZ8L,OAAkB2C,QA0RlB,kBAOS,KAAX3H,GAEA,yBAAKtH,UAAU,aACb,kBAAC,EAAD,MACA,oDACA,0BAAMkP,SAxJU,SAACC,GACrBA,EAAEC,iBACF7D,EAAS,CACPjE,OAAQrJ,EAAKI,SACb2K,QAAQ,eACL/K,EAAKI,SAAW,CACf6M,MAAM,EACN+B,IAAKhP,EAAKgP,IACV7D,MAAO,EACP9E,MAAOH,GAAO2B,OAAO,SAgJrB,yBAAK9F,UAAU,YACb,yBAAKA,UAAU,yBACb,2BACEqP,WAAS,EACTC,YAAY,WACZC,MAAOtR,EAAKI,SACZmR,SAAU,SAACL,GACTvP,EAASxB,EAAe+Q,EAAEM,OAAOF,QACjC/F,OAAOkG,aAAaC,QAAQ,WAAYR,EAAEM,OAAOF,WAIvD,yBAAKvP,UAAU,YACb,4BAAQ9B,KAAK,SAAS8B,UAAU,mBAAhC,aAMN,6BACE,2BACE,kBAAC,IAAD,CAAM+H,GAAG,KAAT,gBAOL+E,GAyBApB,GAKH,kBAAC,GAAD,CACElK,MAAOA,GACPW,KAAMA,GACNK,SAAUA,GACV0F,SAAUA,GACViD,gBAlWoB,SAAC5I,GACvB,IAAQ+E,EAAW3I,EAAX2I,OACR,IAAK3I,EAAMuJ,SAAU,CACnB,IAAM6G,EAAcrM,EAAWH,EAAM5D,EAAM6D,UACvCP,EAAM8M,IACRP,GAAeO,EAAazH,GAE9BiE,EAAS,CACP/I,SAAUuM,MA4VZ3D,aAvViB,WACnB,IAAMvM,EAAW+D,EAAUjE,GAC3B2P,GAAgBzP,IAsVdmK,QAASA,GACTW,SAAUhL,EAAMgL,SAChBtC,SAAU1I,EAAM0I,SAChBC,OAAQ3I,EAAM2I,OACdW,SAAS,WAhBJ,kBAAC,GAAD,CAAYqD,QAAQ,EAAMtC,QAASA,GAASuC,SAAU+C,KAxB3D,yBAAKtO,UAAU,kBACb,+CACA,0BAAMkP,SA3Oa,SAACC,GACxBA,EAAEC,iBACF,IAAQ9H,EAAqD3I,EAArD2I,OAAQ9F,EAA6C7C,EAA7C6C,MAAOW,EAAsCxD,EAAtCwD,KAAMK,EAAgC7D,EAAhC6D,SAAUwG,EAAsBrK,EAAtBqK,QAAS3B,EAAa1I,EAAb0I,SAC1CuI,EAAiBtF,kBAAQiC,GAAT,UAAqCjF,EAArC,WAAsBiF,EAC5ChB,EAAS,CAAEgB,UAAWqD,IACtB5D,EAAaiC,KAAOvO,EAAUoE,WAAW,SAASC,IAAI6L,GACtD5D,EAAaiC,KAAK4B,IAAI,CACpBC,YAAa7R,EAAKgP,IAClBjE,UACAxH,QACAW,OACAK,WACA6E,WACArD,WAAYvE,IAASC,UAAUuE,WAAWC,oBAE5C,IAAM6L,EAAWvG,OAAO2E,aAAY,WAClCnC,EAAaiC,KAAKnP,OAAO,CACvBkF,WAAYvE,IAASC,UAAUuE,WAAWC,sBAE3C,KAGHwI,EAAqBqD,GAErB/D,EAAayB,QAAUD,EAAiBoC,GAExCrP,QAAQC,IAAIwL,EAAayB,SAmBzBlC,EAAS,CACPuB,SAAS,MA8LL,yBAAK9M,UAAU,QACb,2BACEqP,WAAS,EACTC,YAAW,UAAKhI,GAAL,WACXkI,SAAU,SAACL,GACT3C,EAAa2C,EAAEM,OAAOF,QAExBA,MAAOhD,KAGX,6BACE,4BAAQrO,KAAK,SAAS8B,UAAU,mBAAhC,c,SC3NGgQ,OAlPf,SAAe3J,GACb,IAAMyF,EAActE,aAAY,SAAC7I,GAAD,OAAWA,EAAMV,QACzCA,EAA+B6N,EAA/B7N,KACF2B,GADiCkM,EAAzBvN,QACGsB,eAEjB,EAA8ByJ,mBAAS,CACrC2G,cAAc,EACdtG,UAAU,EACVuG,kBAAkB,EAClBC,YAAa,GACbjI,SAAU,GACV/F,KAAM,GACNX,MAAO,GACPgB,SAAU,GACV4N,QAAS,KACT1E,aAAa,IAVf,mBAAO/M,EAAP,KAAcoO,EAAd,KAYA,EAA4BzD,mBAAS,IAArC,mBAAOhC,EAAP,KAAe+I,EAAf,KACA,EAAqC/G,qBAArC,mBAGM0C,GAHN,UAEeC,iBAAO,IACMC,SAGtBc,EAAef,iBAAOtN,GAC5BqO,EAAad,QAAUvN,EAEvB,IAAM4M,EAAW,SAACzM,GAChBiO,EAAa,2BACRC,EAAad,SACbpN,KAIDwR,EAAqB,WACzB,MAA+BtD,EAAad,QAApChE,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SACd8H,kBAAQpC,IAAiC,IAApB1F,EAASV,SAAiBG,EAAMO,IACvD+I,EAAS,CACP/I,SAAU,MAoEV+N,EAAa,SAAC3R,GAClB2B,QAAQC,IAAI,cAAewL,EAAayB,SACxCzB,EAAayB,QACV+C,IADH,2BAEO5R,GAFP,IAGIkO,QAASrN,IAASC,UAAUuE,WAAWC,qBAExC5D,MAAK,SAASmQ,GACb,GAAoB,UAAhB7R,EAAOV,KAAkB,CAC3B,IAAMwS,EAAQD,EAAO9L,GACrBpE,QAAQC,IAAI,6BAA8BkQ,GAC1CnF,EAAS,CACP6E,QAASM,SAOnB7G,qBAAU,WACR,IAAQ8G,EAAatK,EAAMuK,MAAMC,OAAzBF,SACR3E,EAAaiC,KAAOvO,EAAUoE,WAAW,SAASC,IAAI4M,GACtD,IAAMG,EAAa9E,EAAaiC,KAAKP,YAAW,SAAC3J,IAxC7B,SAACA,GACrB,IAAMgN,EAAY,eAAQhN,EAAIF,QACZmN,EAAehE,EAAad,QAAtC1J,SACR,IAAI8H,kBAAQyG,GAAZ,CAGAxQ,QAAQC,IAAI,WAAYuQ,GAExB,IAAMhC,EACJiC,EAAWlP,OAAS,GAAKwI,kBAAQyG,EAAa7I,UAAY8I,EAAaD,EAAavO,SACtFjC,QAAQC,IAAI,eAAgBuO,GAC5BxD,EAAS,2BACJwF,GADG,IAENvO,SAAUuM,EACVkB,cAAc,MA2BdgB,CAAclN,MAEhBiI,EAAayB,QAAUzB,EAAaiC,KAAKnK,WAAW,WAEpD,IAAMoN,EAAelF,EAAayB,QAAQC,YAAW,SAACC,GACpDA,EAASC,aAAaxL,SAAQ,SAACyL,GACT,YAAhBA,EAAO3P,OACW8O,EAAad,QAAzBkE,UACQvC,EAAO9J,IAAIY,KACzBpE,QAAQC,IAAI,2BACZ+K,EAAS,CACP6E,QAAS,eAOnB,OAAO,WACDpE,EAAaiC,MACf6C,IAEE9E,EAAayB,SACfyD,OAGH,IAEH,IAAQ1P,EAA2D7C,EAA3D6C,MAAOW,EAAoDxD,EAApDwD,KAAMK,EAA8C7D,EAA9C6D,SAAU0F,EAAoCvJ,EAApCuJ,SAAUc,EAA0BrK,EAA1BqK,QAASiH,EAAiBtR,EAAjBsR,aAElD,GAAInE,EAAYvN,QACd,MAAO,qBAGT,GAAI+L,kBAAQrM,GACV,OACE,yBAAK+B,UAAU,aACb,gFACA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,YAIF,2BACE,kBAAC,IAAD,CAAM+H,GAAG,UAAT,UAKR,IAAKT,EACH,OACE,yBAAKtH,UAAU,aACb,kBAAC,EAAD,MAEA,wBAAIA,UAAU,QAAd,yBACA,0BAAMkP,SA9GU,SAACC,GACrBA,EAAEC,iBACF,IAAM+B,EAAYlT,EAAKI,SACvB,IAAIiM,kBAAQ6G,GAAZ,CAGAd,EAAUc,GACV,IAAMvS,EAAS,CACbV,KAAM,OACNC,QAAS,CAAEgL,KAAMgI,EAAWlE,IAAKhP,EAAKgP,MAExCsD,EAAW3R,MAoGL,yBAAKoB,UAAU,mBACb,2BACEqP,WAAS,EACTnR,KAAK,OACLoR,YAAY,YACZC,MAAOtR,EAAKI,SACZmR,SAAU,SAACL,GACTvP,EAASxB,EAAe+Q,EAAEM,OAAOF,QACjC/F,OAAOkG,aAAaC,QAAQ,WAAYR,EAAEM,OAAOF,WAIvD,yBAAKvP,UAAU,mBACb,2BAAOA,UAAU,+BAA+B9B,KAAK,SAASqR,MAAM,YAO9E,MAA4CvC,EAAad,QAAjDvC,EAAR,EAAQA,SAAUtC,EAAlB,EAAkBA,SAElB,OAFA,EAA4BqE,YAO1B,kBAAC,IAAM0F,SAAP,KACE,kBAACvG,EAAA,EAAD,CAAOC,KAAMnM,EAAMyR,SAAWH,GAC5B,kBAACpF,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,MAAP,8BAEF,kBAACH,EAAA,EAAMI,KAAP,KACE,uBAAGjL,UAAU,eAAb,QACA,yBAAKA,UAAU,eACb,kBAACqR,GAAA,EAAD,CAASC,UAAU,cAIzB,kBAAC,GAAD,CACE9P,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV0F,SAAUA,EACViD,gBA1LkB,SAAC5I,GACvB,MAA+ByK,EAAad,QAApChE,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SAClB,IAAI0F,EAAJ,CAGA,IAAM6G,EAAcrM,EAAWH,EAAMC,GACrC,KAAIuM,EAAYjN,OAAS,GAAzB,CAGA,IAAMjD,EAAW,GACjB,GAA2B,IAAvBkQ,EAAYjN,OACd,GAAIG,EAAM8M,GAAc,CACtB,IAAMnQ,EAAS,CACbV,KAAM,QACNC,QAAS,CAAEqE,SAAUuM,EAAa5F,KAAM7B,IAE1C/G,QAAQC,IAAI,yBACZ+P,EAAW3R,GACXC,EAASoR,cAAe,OAExB1P,QAAQC,IAAI,qBACZgJ,OAAOqF,WAAWyB,EAAoB,KAI1C/E,EAAS,2BACJ1M,GADG,IAEN2D,SAAUuM,QAiKR/F,QAASA,EACTW,SAAUA,EACVtC,SAAUA,EAEVC,OAAQA,EACRW,SAAS,YA5BN,kBAAC,GAAD,CAAYe,QAASA,EAASsC,QAAQ,KCvHlCiG,G,kDApGb,WAAYlL,GAAQ,IAAD,uBACjB,cAAMA,IA6BRmL,qBAAuB,WACrB,EAAKpD,eA/BY,OAIjB,EAAKzP,MAAQ,CACXwK,KAAM,GACNsI,QAAS,MACTC,MAAM,EACNC,MANY,IAFG,E,qDAYnB,WAAqB,IAAD,OAClBnL,KAAKoL,SAAWlS,EAAUoE,WAAW,SAErC0C,KAAK4H,YAAc5H,KAAKoL,SAASlE,YAAW,SAACC,GAC3C,IAAMkE,EAAW,GACjBlE,EAASvL,SAAQ,SAAC2B,GAChB8N,EAASpR,KAAT,aACE0I,KAAMpF,EAAIY,IACPZ,EAAIF,YAGX,EAAK0H,SAAS,CACZmG,MAAM,EACNC,MAAOE,S,oBASb,WACE,MAAwBrL,KAAK7H,MAArBgT,EAAR,EAAQA,MAAOD,EAAf,EAAeA,KAEf,GADAnR,QAAQC,IAAImR,IACPD,EACH,OAAO,KAET,IAAMI,EAAcH,EAAMhP,QAAO,SAACoP,GAChC,IAAQ/N,EAAe+N,EAAf/N,WACR,IAAKA,EACH,OAAO,EAET,IAAMgO,EAAUhO,EAAWiO,WACrBC,GAAM,IAAIC,MAAOC,UAEvB,OADY1J,KAAK2J,OAAOH,EAAMF,GAAW,KAC5B,MAEf,OACE,yBAAKhS,UAAU,YAAYC,MAAO,CAAEwE,OAAQ,UAClB,IAAvBqN,EAAYhQ,OACX,kBAAC,WAAD,KACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBAAkBC,MAAO,CAAEqS,UAAgC,GAArB9I,OAAOC,cAC1D,0BAAMzJ,UAAU,cAAhB,yCAEF,oCACQ,kBAAC,IAAD,CAAM+H,GAAG,SAAT,QADR,gBAGA,2BACE,kBAAC,IAAD,CAAM/H,UAAU,kBAAkB+H,GAAG,KAArC,YAQR,kBAAC,WAAD,KACE,wBAAI/H,UAAU,oBAAd,mBACA,yBAAKA,UAAU,4BACZ8R,EAAY5Q,KAAI,SAAC+M,EAAM9M,GACtB,OACE,yBAAKnB,UAAU,iBAAiBgH,IAAKiH,EAAK9E,MACxC,yBAAKnJ,UAAU,uBACb,yBAAKA,UAAU,uBACb,kBAAC,IAAD,CAAM+H,GAAE,iBAAYkG,EAAK9E,OAAS8E,EAAK9E,aAOnD,yBAAKnJ,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMA,UAAU,kBAAkB+H,GAAG,KAArC,gB,GAzFIb,a,wCCmBd/C,GACM,IADNA,GAEJ2B,EAFI3B,GAGO,EAHPA,GAIM,KAGNoO,GAAkC,SAACrN,GACvC,IAAIsN,EAAO/P,OAAOyC,GAKlB,OAJIzC,OAAOgQ,MAAMD,KACfA,EAAO,GAEQ,MAAS,EAAIA,IAI1BE,GAAkB,WACtB,IAAMvG,EAAcjK,IAEpB,OAAO,2BACFU,EAAU,CACXT,KAAMgK,EAAYlJ,MAAM,IACxBzB,MAAO2K,EAAYlJ,MAAM,EAAG,OAHhC,IAKET,SANe,MAgBbmQ,GAAe,CACnB3J,QAAS,CACP4J,IAAK,CACHxJ,MAAO,EACP9E,MAAOH,GAAc,IAEvB0O,IAAK,CACHzJ,MAAO,EACP9E,MAAOH,GAAc,KAGzBuH,aAAa,EACbpE,OAAQ,MACRqC,UAAU,EACVzB,SAAU,KACVb,SAAU,KACVyL,gBAAiB,IACjBzK,UAAW,IAAI8J,MAGXY,G,kDACJ,WAAY1M,GAAQ,IAAD,8BACjB,cAAMA,IAQR2M,gBAAkB,SAAC7D,GACjBA,EAAEC,iBACF,EAAK7D,SAAS,CACZG,aAAa,EACbrD,UAAW,IAAI8J,OAGjB5R,QAAQC,IAAR,sBAA2B,EAAK7B,MAAMmU,gBAAtC,QACAjE,YAAW,WACT,IAAMoE,EAAWzJ,OAAO2E,YAAY,EAAK+E,QAAS,EAAKvU,MAAMmU,iBAC7D,EAAKvH,SAAS,CACZ0H,eAED9O,KAtBc,EAyBnBgP,kBAAoB,WAClB,IAAMC,EAAkB5J,OAAOkG,aAAa2D,QAAQ,kBAChDC,EAAaF,EAAkB3Q,OAAO2Q,GAAmB,EACvDN,EAAkBP,GAAgCe,GACxD,EAAK/H,SAAS,CACZ+H,aACAR,qBA/Be,EAmCnBtB,qBAAuB,WACO,OAAxB,EAAK7S,MAAMsU,UACbzJ,OAAO+D,cAAc,EAAK5O,MAAMsU,WArCjB,EAyCnBC,QAAU,WACR,MAAsC,EAAKvU,MAAnC6C,EAAR,EAAQA,MAAO0G,EAAf,EAAeA,SAAUb,EAAzB,EAAyBA,SACzB,IAAIa,IAAYb,EAAhB,CApGc,EA0Gd,MAAerE,kBAAQxB,GAAOyB,MAAM,EAAG,GAAvC,mBAAOpB,EAAP,KAAUE,EAAV,KACMC,EV9Be,SAACH,EAAGE,GAI3B,IAHA,IAEIwR,EAAS,GACJpS,EAAI,EAAGA,EAAI,EAAGA,IACjBU,EAAEV,KAAOY,EAAEZ,GACboS,GAAkB1R,EAAEV,GAIpBoS,IADW,GADA9Q,OAAOZ,EAAEV,IAAMsB,OAAOV,EAAEZ,MACVqS,WAI7B,OAAOD,EAAOE,OUiBFC,CAAU7R,EAAGE,GACnBP,EAAMH,SAASW,KACjB,EAAKuJ,SAAS,CACZrD,SAAU,MACV1F,SAAU,CAACX,GACX8R,SAAU,CAAC5R,EAAGC,GACd2H,UAAU,IAEgB,OAAxB,EAAKhL,MAAMsU,UACb1F,cAAc,EAAK5O,MAAMsU,UAE3B,EAAK1H,SAAS,CACZqI,aAAcpK,OAAO2E,YAAY,EAAK0F,iBAAkB,UA9D3C,EAmEnBA,iBAAmB,WACjB,MAA+B,EAAKlV,MAA5B6D,EAAR,EAAQA,SAAUmR,EAAlB,EAAkBA,SACZG,EAAO,YAAOH,GACpB,GAAuB,IAAnBG,EAAQhS,OAAZ,CAGA,IAAMiN,EAAW,sBAAOvM,GAAP,CAAiBsR,EAAQC,QAC1C,EAAKxI,SAAS,CACZoI,SAAUG,EACVtR,SAAUuM,IAEe,IAAvBA,EAAYjN,SACkB,OAA5B,EAAKnD,MAAMiV,cACbrG,cAAc,EAAK5O,MAAMiV,cAE3B,EAAKpF,eAAeO,EAAa,UAlFlB,EAsFnBiF,kBAAoB,SAAC1M,EAAQ2M,GAC3B,IAAQjL,EAAY,EAAKrK,MAAjBqK,QACF2F,EAAW3F,EAAQ1B,GAAQ8B,MAAQ6K,EAQzC,MAAO,CAPYnV,IAAOkK,EAAD,eACtB1B,EAAS,CACRsH,OAAQ,CACNxF,MAAOuF,MAIOA,IAhGH,EAmGnBuF,cAAgB,WACd,MAA+B,EAAKvV,MAA5BuJ,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SAClB,GAAI0F,IAAajG,EAAMO,GAAW,CAChC,MAAqB,EAAKwR,kBAAkB9L,GAAW,IAAhDmG,EAAP,oBACA,EAAK9C,SAAS,CACZvC,QAASqF,EACTnG,SAAU,KACViM,kBAAclF,EACdzM,SAAU,OA3GG,EAgHnBsM,qBAAuB,SAAC5G,GACtB,MAA+B,EAAK8L,kBAAkB9L,EAAU,GAAhE,mBAAOmG,EAAP,KAAmBM,EAAnB,KACQ1Q,EAAS,EAAKoI,MAAMyF,YAApB7N,KACFoJ,EAAWsH,GAAYxK,GAAmB+D,EAAW,GACrDrJ,EAAW,CACfmK,QAASqF,EACThH,YAEF,IAAKiD,kBAAQjD,GAAW,CACtB,IAAM4F,EAAOhP,GAAQA,EAAKgP,KAAQ,YAC5BmH,EAAyB,OAAZlM,EAAoB,EAAI,EACrCmM,EAAa3L,KAAK2J,QAAO,IAAIF,MAAOC,UAAY,EAAKzT,MAAM0J,UAAU+J,WAAa,KACxFkC,KACGC,KAAK,YAAa,CACjBtH,MACAoH,aACAD,aACAI,iBAAkB,EAAK7V,MAAM2U,WAC7BmB,cAAe9F,IAEhBrO,MAAK,WACJC,QAAQC,IAAI,gBAEb6M,OAAM,SAACqH,GACNnU,QAAQC,IAAI,yBAIlB,OADA,EAAK+K,SAAS1M,GACPA,GA5IU,EA+InB8V,eAAiB,SAACzM,GAChB,IAAK,EAAKvJ,MAAMuJ,SAAU,CACxB,IACMpJ,EAAS,CACboJ,WACAiM,cAHc,IAAIhC,MAAOC,WAK3B,EAAK7G,SAASzM,GACd,EAAKyM,SAAS,CACZqJ,YAAapL,OAAOqF,YAAW,WAC7B,EAAKqF,kBACJ/P,QA1JU,EA+JnBqK,eAAiB,SAACO,EAAa7G,GAC7B,IAAMrJ,EAAW,CACf8K,SAAU1H,EAAM8M,GAChBvM,SAAUuM,EACV7G,YAEErJ,EAAS8K,WACX,EAAKhL,MAAMiW,aAAeC,aAAa,EAAKlW,MAAMiW,aAClD/F,YAAW,WACT,EAAKJ,cACJ,MAEL,EAAKlD,SAAS1M,IA3KG,EA8KnBsM,gBAAkB,SAAC5I,GACjB,MAAuC,EAAK5D,MAApCgL,EAAR,EAAQA,SAAUzB,EAAlB,EAAkBA,SAAUZ,EAA5B,EAA4BA,OAC5B,IAAKqC,GAAyB,QAAbzB,EAAoB,CACnC,IAAM6G,EAAcrM,EAAWH,EAAM,EAAK5D,MAAM6D,UAC3C0F,GACH,EAAKyM,eAAerN,GAEtB,EAAKiE,SAAS,CACZ/I,SAAUuM,IAER9M,EAAM8M,IACR,EAAKP,eAAeO,EAAa,SAzLpB,EA8LnB3D,aAAe,WACb,IAAMvM,EAAW+D,EAAU,EAAKjE,OAChC,EAAK4M,SAAS1M,IAhMG,EAmMnB4P,UAAY,WACV,MAA+B,EAAK9P,MAA5BuJ,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SAClB,GAAI0F,GAAYjG,EAAMO,GAAW,CAC/BjC,QAAQC,IAAI,uBACZ,EAAKsO,qBAAqB5G,GAC1B,IAAMrJ,EAAQ,aACZ8K,UAAU,EACVzB,SAAU,KACViM,kBAAclF,GACX6F,EAAoB,EAAKnW,QAE9B,EAAK4M,SAAS1M,GAEhB,EAAKF,MAAMsU,UAAY1F,cAAc,EAAK5O,MAAMsU,UAChDpE,YAAW,WACT,IAAMoE,EAAWzJ,OAAO2E,YAAY,EAAK+E,QAAS,EAAKvU,MAAMmU,iBAC7D,EAAKvH,SAAS,CACZ0H,eAED9O,KAtNc,EAyNnB4Q,UAAY,WACV,EAAKpW,MAAMsU,UAAYzJ,OAAO+D,cAAc,EAAK5O,MAAMsU,UACvD,EAAK1H,SAAL,2BACKyJ,oBAAUrC,KACVD,QA3NL,EAAK/T,MAAL,uCACKqW,oBAAUrC,KACVD,MAFL,IAGEY,WAAY,IALG,E,0CAiOnB,WAAU,IAAD,OACP,EAA4E9M,KAAK7H,MAAzE6C,EAAR,EAAQA,MAAOW,EAAf,EAAeA,KAAMK,EAArB,EAAqBA,SAAU0F,EAA/B,EAA+BA,SAAUc,EAAzC,EAAyCA,QAAS0C,EAAlD,EAAkDA,YAC1CI,GADR,EAA+DnC,SACvCnD,KAAKH,MAArByF,aACA7N,EAAS6N,EAAT7N,KACR,OAAI6N,EAAYvN,QACP,aAEJmN,EA8DH,kBAAC,IAAM0F,SAAP,KACE,kBAAC,GAAD,CACE5P,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV0F,SAAUA,EACViD,gBAAiB3E,KAAK2E,gBACtB8J,cAAe,aACf7J,aAAc5E,KAAK4E,aACnBpC,QAASA,EACTW,SAAUnD,KAAK7H,MAAMgL,SACrBtC,SAAUb,KAAK7H,MAAM0I,SACrBC,OAAQd,KAAK7H,MAAM2I,OACnByN,UAAWvO,KAAKuO,UAChBxN,MAAM,EACNU,SAAS,YA1EX,yBAAKjI,UAAU,0BACH,OAAT/B,GAAiB,kBAAC,EAAD,MAClB,wBAAI+B,UAAU,oBAAd,0BACA,wBAAIA,UAAU,QAAd,4BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,0BAAMkP,SAAU1I,KAAKwM,iBACnB,yBAAKhT,UAAU,wBACb,kBAAC,KAAD,CACEkV,SAAU,EACVC,SAAU,EAEV5F,MAAO/I,KAAK7H,MAAM2U,WAElB9D,SAAU,SAAC8D,GAET,IAAMR,EAAkBP,GAAgCe,GACxD9J,OAAOkG,aAAaC,QAAQ,iBAAkB2D,EAAWE,YAEzD,EAAKjI,SAAS,CACZuH,kBAEAQ,mBAKR,2BAAOpV,KAAK,SAASqR,MAAM,QAAQvP,UAAU,qBAE/C,uBAAGC,MAAO,CAAEqS,UAAW,SAAvB,YAA2CnO,GAA3C,0BAEF,yBAAKnE,UAAU,YACb,wBAAIC,MAAO,CAAEmV,cAAe,SAC1B,wBAAIpV,UAAU,QACZ,kBAAC,IAAD,CAAM+H,GAAG,UAAT,sBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,0BAKN9J,GACA,yBAAK+B,UAAU,YACb,6BACE,8FAEA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,mB,GA5RCkH,aAiUJmO,gBAJS,SAAC1W,GAAD,MAAY,CAClCmN,YAAanN,EAAMV,QAGNoX,CAAyBtC,IC5YxC,SAASuC,GAASjP,GAChB,IAAQkP,EAA+BlP,EAA/BkP,IAAKC,EAA0BnP,EAA1BmP,SAAUC,EAAgBpP,EAAhBoP,YACvB,OACE,yBAAKzV,UAAU,kBACb,kBAAC,IAAD,CAAM+H,GAAIwN,GACR,yBAAKvV,UAAU,+BACb,kBAAC,EAAD,CAAMsG,KAAMkP,MAGhB,uBAAGxV,UAAU,eAAeyV,IA4CnBC,OAvCf,WAkBE,OACE,yBAAK1V,UAAU,0BACb,wBAAIA,UAAU,8CAAd,aACA,yBAAKA,UAAU,8BApBD,CAChB,CACEuV,IAAK,QACLC,SAAU,OACVC,YAAa,cAEf,CACEF,IAAK,SACLC,SAAU,OACVC,YAAa,aAEf,CACEF,IAAK,QACLC,SAAU,OACVC,YAAa,cAOAvU,KAAI,SAACyU,EAAMxU,GACpB,OAAO,kBAACmU,GAAD,eAAUtO,IAAG,eAAU7F,IAASwU,QAG3C,yBAAK3V,UAAU,qBACb,6BACA,2BACE,kBAAC,IAAD,CAAM+H,GAAG,UAAT,UAEF,2BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,uBC9CV,SAAS6N,GAAT,GAA6B,IAATtP,EAAQ,EAARA,KAClB,OACE,yBAAKtG,UAAU,cACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAMA,MAwJLuP,OAlJf,WAGE,OACE,yBAAK7V,UAAU,mBACb,iDACA,yJAIA,yIAIA,qHACA,yBAAKA,UAAU,OAdE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAe1CkB,KAAI,SAACc,EAAGb,GACpB,OAAO,kBAACyU,GAAD,CAAU5O,IAAK7F,EAAGmF,KAAMtE,QAGnC,gGACA,wBAAIhC,UAAU,mBACZ,qCACA,sCACA,qCACA,qCAEF,mGACA,4HAES,4CAFT,OAEkC,+CAElC,mGACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAER,IACP,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,YAIjB,iEACA,wBAAItG,UAAU,mBACZ,4CACA,4CACA,kDACA,iDAEF,qEACA,mDACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,YAIjB,wBAAItG,UAAU,mBACZ,iDACA,iDACA,kDACA,4CAEF,iDACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,YAIjB,wBAAItG,UAAU,mBACZ,2CACA,iDACA,iDACA,oEAEF,wIAEsB,4CAFtB,QAEgD,6CAFhD,wBAIA,yIAEiB,oCAFjB,0FAKA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,WAGf,yBAAKtG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMsG,KAAK,YAIjB,wBAAItG,UAAU,mBACZ,iDACA,iDACA,kDACA,iDAEF,sGACA,2BACE,kBAAC,IAAD,CAAM+H,GAAG,KAAT,gBCrGO+N,OA7Cf,SAAezP,GACb,IAAMpI,EAAOuJ,aAAY,SAAC7I,GAAD,OAAWA,EAAMV,QA4B1C,OA1BA4L,qBAAU,WACRpK,SAEGsW,oBACAzV,MAAK,SAASiT,GACb,GAAIA,EAAOyC,WAET,IAAIC,EAAQ1C,EAAOyC,WAAWE,YAIhC,IAAIjY,EAAOsV,EAAOtV,KAClBsC,QAAQC,IAAIyV,EAAOhY,MAEpBoP,OAAM,SAASC,GAEEA,EAAM6I,KACH7I,EAAM8I,QAEb9I,EAAM+I,MAED/I,EAAM0I,gBAG1B,IAEE/X,EAUH,yBAAK+B,UAAU,aACb,kBAAC,EAAD,OATA,yBAAKA,UAAU,aACb,4BAAQG,QAASoD,EAAsBvD,UAAU,OAAjD,aCvBFmE,GAAS,CACbmS,YAAa,IACbxQ,SACA8F,UAAW,EACX2K,SAAU,MAGN7D,GAAkB,WACtB,IAAMvG,EAAcjK,IACpB,OAAO,2BACFU,EAAU,CACXT,KAAMgK,EAAYlJ,MAAM,IACxBzB,MAAO2K,EAAYlJ,MAAM,EAAG,OAHhC,IAKET,SAAU,MAIRgU,GAAgB,SAACC,GAErB,IADA,IAAMzN,EAAU,GACP7H,EAAI,EAAGA,EAAIsV,EAAKtV,IACvB6H,EAAQ7H,GAAK,CACXiI,MAAO,EACP9E,MAAOH,GAAO2B,OAAO3E,IAGzB,OAAO6H,GAGH2J,GAAe,CACnB+D,WAAY,KACZ1N,QAASwN,GAAc,GACvB9K,aAAa,EACbvC,KAAM,IACNQ,UAAU,EACVzB,SAAU,KACViM,aAAc,KACd9M,SAAU,GACViM,WAAY,EACZR,gBAAiB,IACjBa,SAAU,IAmMGgD,G,kDA/Lb,WAAYtQ,GAAQ,IAAD,8BACjB,cAAMA,IAOR2M,gBAAkB,SAAC0D,GACjB,EAAKnL,SAAS,CACZmL,aACA1N,QAASwN,GAAcE,KAEzB,EAAKnL,SAAS,CACZG,aAAa,KAdE,EAkBnBsI,kBAAoB,SAAC7K,EAAM8K,GACzB,IAAQjL,EAAY,EAAKrK,MAAjBqK,QACF2F,EAAW3F,EAAQG,GAAMC,MAAQ6K,EAQvC,MAAO,CAPYnV,IAAOkK,EAAD,eACtBG,EAAO,CACNyF,OAAQ,CACNxF,MAAOuF,MAIOA,IA5BH,EA+BnBuF,cAAgB,WACd,MAA+B,EAAKvV,MAA5BuJ,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SAClB,IAAKP,EAAMO,GAAW,CACpB,MAAqB,EAAKwR,kBAAkB9L,GAAW,IAAhDmG,EAAP,oBACA,EAAK9C,SAAS,CACZvC,QAASqF,EACTnG,SAAU,KACViM,aAAc,KACd3R,SAAU,OAvCG,EA4CnBsM,qBAAuB,SAAC5G,GACtB,MAA+B,EAAK8L,kBAAkB9L,EAAU,GAAhE,mBAEMrJ,EAAW,CACfmK,QAHF,KAIE3B,SAJF,MAC6BlD,GAAOyH,UAAY1D,EAAW,IAK3D,EAAKqD,SAAS1M,IAnDG,EAsDnB8V,eAAiB,SAACzM,GAChB,IAAK,EAAKvJ,MAAMuJ,SAAU,CACxB,IACMpJ,EAAS,CACboJ,WACAiM,cAHc,IAAIhC,MAAOC,WAK3B,EAAK7G,SAASzM,GAEd,EAAK8X,YAAc/H,YAAW,WAC5B,EAAKqF,kBACJ/P,GAAOmS,eAjEK,EAqEnB9H,eAAiB,SAACO,EAAa7G,GAC7B,IAAMrJ,EAAW,CACf8K,SAAU1H,EAAM8M,GAChBvM,SAAUuM,EACV7G,YAEErJ,EAAS8K,WACXkL,aAAa,EAAK+B,aAClB/H,YAAW,WACT,EAAKJ,cACJ,MAEL,EAAKlD,SAAS1M,IAjFG,EAoFnBsM,gBAAkB,SAAC5I,GACjB,MAA+B,EAAK5D,MAA5BgL,EAAR,EAAQA,SAAUzB,EAAlB,EAAkBA,SAClB,IAAKyB,GAAyB,OAAbzB,EAAmB,CAClC,IAAM6G,EAAcrM,EAAWH,EAAM,EAAK5D,MAAM6D,UAChD,EAAK+I,SAAS,CACZ/I,SAAUuM,IAER9M,EAAM8M,IACR,EAAKP,eAAeO,EAAa7G,KA5FpB,EAiGnBe,kBAAoB,SAAC4N,GAEF,OADI,EAAKlY,MAAlBuJ,UAEN,EAAKyM,eAAekC,IApGL,EAwGnBzL,aAAe,WACb,IAAMvM,EAAW+D,EAAU,EAAKjE,OAChC,EAAK4M,SAAS1M,IA1GG,EA6GnB4P,UAAY,WACV,MAA+B,EAAK9P,MAA5BuJ,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SAClB,GAAIP,EAAMO,GAAW,CACnBjC,QAAQC,IAAI,uBACZ,IAAMkO,EAAY,EAAKI,qBAAqB5G,GACtCrJ,EAAQ,2BACT6P,GADS,IAEZ/E,UAAU,EACVzB,SAAU,KACViM,aAAc,MACXW,EAAoB,EAAKnW,QAE9B,EAAK4M,SAAS1M,GAEhB0O,cAAc,EAAK0F,UACnBpE,YAAW,WACT,EAAKoE,SAAW9E,YAAY,EAAK+E,QAAS,EAAKvU,MAAMmU,mBACpD3O,GAAOoS,WA9HO,EAiInBxB,UAAY,WACVxH,cAAc,EAAK0F,UACnB,EAAK1H,SAAL,2BACKyJ,oBAAUrC,KACVD,QAnIL,EAAK/T,MAAL,2BACKqW,oBAAUrC,KACVD,MAJY,E,0CAyInB,WAAU,IAAD,OACP,EAA2ElM,KAAK7H,MAAxE6C,EAAR,EAAQA,MAAOW,EAAf,EAAeA,KAAMK,EAArB,EAAqBA,SAAU0F,EAA/B,EAA+BA,SAAUc,EAAzC,EAAyCA,QAAS0N,EAAlD,EAAkDA,WAAlD,EAA8D/M,SAE9D,OADApJ,QAAQC,IAAIwI,GACP0N,EA4BH,kBAAC,IAAMtF,SAAP,KACE,kBAAC,GAAD,CACE5P,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV0F,SAAUA,EACViD,gBAAiB3E,KAAK2E,gBACtBlC,kBAAmBzC,KAAKyC,kBACxBgM,cAAezO,KAAKyO,cACpBjM,QAASA,EACTW,SAAUnD,KAAK7H,MAAMgL,SACrBtC,SAAUb,KAAK7H,MAAM0I,SACrBC,OAAQd,KAAK7H,MAAMwK,KACnB4L,UAAWvO,KAAKuO,UAChBxN,MAAM,EACNqC,cAAc,EACd3B,SAAS,mBA1CX,yBAAKjI,UAAU,aACb,wBAAIA,UAAU,QAAd,4BACA,yBAAKA,UAAU,mBACZ,YAAIY,MAAM,GAAGC,QAAQK,KAAI,SAACC,GACzB,OACE,yBACE6F,IAAG,kBAAa7F,GAChBhB,QAAS,WACP,EAAK6S,gBAAgB7R,EAAI,IAE3BnB,UAAU,cAEV,4BAAQA,UAAU,gBAAgBmB,EAAI,QAK9C,6BACE,2BACE,kBAAC,IAAD,CAAM4G,GAAG,SAAT,e,GAlKab,a,2yMCgBZ4P,OAnEf,SAAezQ,GACb,IAAMyF,EAActE,aAAY,SAAC7I,GAAD,OAAWA,EAAMV,QACzCA,EAAS6N,EAAT7N,KACR,EAA0BqL,mBAAS,MAAnC,mBAAOyN,EAAP,KAAcC,EAAd,KAeA,OAdiBnX,cAEjBgK,qBAAU,WACR,IAAMoN,EAAQ,wCAAG,+EACf3C,KAAMlK,IAAN,0BAA6BnM,EAAKgP,MAAO3M,MAAK,SAAC4W,GAC7CF,EAASE,EAASrT,SAFL,2CAAH,qDAMTiI,EAAYvN,SAAoB,OAATN,GAC1BgZ,MAED,CAACnL,EAAYvN,UAEZuN,EAAYvN,QACP,aAGI,OAATN,EAEA,yBAAK+B,UAAU,kBACb,oDACA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,aASN,yBAAKA,UAAU,0BACb,0CACA,2BAAOA,UAAU,uBACf,+BACE,4BACE,0CACA,4CACA,oDAIJ,+BACG+W,GACCA,EAAM7V,KAAI,SAACiW,EAAKhW,GACd,OACE,wBAAI6F,IAAG,gBAAW7F,IAChB,4BAAKgW,EAAI3C,kBACT,4BAAK2C,EAAIC,cACT,4BAAK1O,KAAK2J,MAAa8E,EAAIE,UAAYF,EAAIC,aAA3B,KAAhB,WAMZ,2BACE,kBAAC,IAAD,CAAMrP,GAAG,KAAT,gBC/COuP,GApBE,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SAAmBtH,EAAmB,EAA5BuH,QAC5B,OACE,oCACE,kBAAC3M,EAAA,EAAD,CAAOC,KAAMmF,GACX,kBAACpF,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,MAAP,8BAEF,kBAACH,EAAA,EAAMI,KAAP,KAAasM,GACb,kBAAC1M,EAAA,EAAM4M,OAAP,SCcFtT,GACM,IADNA,GAIM,KAGNuO,GAAkB,SAACgF,GACvB,IAIMC,EAJa,SAACD,GAClB,OAAOhP,KAAK2J,OAAOqF,EAAe,GAAK,GAGzBE,CAAWF,GACrBvL,EAAcjK,IACpB,OAAO,2BACFU,EACD,CACET,KAAMgK,GAER,CAAEtJ,UAAW6U,EAAc5U,YAAa6U,KAL5C,IAOEnV,SAAU,MAURmQ,GAAe,CACnB3J,QAAS,CACP4J,IAAK,CACHxJ,MAAO,EACP9E,MAjCJwB,EAiCyB,KAGzB4F,aAAa,EACbvC,KAAM,MACNQ,UAAU,EACVtC,UAAU,EACVgB,UAAW,KACXD,YAAa,KACbD,UAAW,GACX0P,YAAa,KACbH,aAAc,GACdzH,cAAc,EACd6H,UAAW,QAOPC,G,kDACJ,WAAY1R,GAAQ,IAAD,8BACjB,cAAMA,IAMR2M,gBAAkB,SAAC7D,GACjBA,EAAEC,iBACF,IAAQsI,EAAiB,EAAK/Y,MAAtB+Y,aACFM,EAAYtF,GAAgBgF,GAC5BrP,EAAY,IAAI8J,KACtB,EAAK5G,SAAL,yBACEG,aAAa,EACbrD,YACAD,YAAa,GACV4P,GAJL,IAKEH,YAAatW,EAAUyW,EAAUxW,UAEnCgI,OAAOyO,OAAS9J,aAAY,WAC1B,IAAM/F,EAAcM,KAAK2J,QAAO,IAAIF,MAAOC,UAAY/J,EAAU+J,WAAa,KAC9E,EAAK7G,SAAS,CACZnD,kBAED,MAxBc,EA2BnB+K,kBAAoB,aA3BD,EA6BnBa,kBAAoB,SAAC7K,EAAM8K,GACzB,IAAQjL,EAAY,EAAKrK,MAAjBqK,QACF2F,EAAW3F,EAAQG,GAAMC,MAAQ6K,EAQvC,MAAO,CAPYnV,IAAOkK,EAAD,eACtBG,EAAO,CACNyF,OAAQ,CACNxF,MAAOuF,MAIOA,IAvCH,EA0CnBgG,eAAiB,SAACzM,GAChB,IAAK,EAAKvJ,MAAMuJ,SAAU,CACxB,IACMpJ,EAAS,CACboJ,WACAiM,cAHc,IAAIhC,MAAOC,WAK3B,EAAK7G,SAASzM,GAEd,EAAK8X,YAAc/H,YAAW,WAC5B,EAAKqF,kBACJ/P,MArDY,EAyDnBqK,eAAiB,SAACO,EAAa7G,GAC7B,IAAMrJ,EAAW,CACf8K,SAAU1H,EAAM8M,GAChBvM,SAAUuM,EACV7G,YAEErJ,EAAS8K,WACXkL,aAAa,EAAK+B,aAClB/H,YAAW,WACT,EAAKJ,cACJ,MAEL,EAAKlD,SAAS1M,IArEG,EAwEnBoW,cAAgB,aAxEG,EA4EnB3E,mBAAqB,WAAsB,IAArB4H,EAAoB,wDACxC,EAAK3M,UAAS,SAACyB,GACb,GAAqC,IAAjCA,EAAaxK,SAASV,SACpBoW,IAAYjW,EAAM+K,EAAaxK,WACjC,MAAO,CACLA,SAAU,QAjFD,EAwFnB2I,gBAAkB,SAAC5I,GACjB,IAAMwM,EAAcrM,EAAWH,EAAM,EAAK5D,MAAM6D,UAErB,IAAvBuM,EAAYjN,SACVG,EAAM8M,IACRxO,QAAQC,IAAI,aACZ,EAAK+K,UAAS,SAACyB,GACbxD,OAAOqF,YAAW,WAChB,EAAKtD,SAAS,CACZ0E,cAAc,IAEhB,EAAKK,oBAAmB,KACvB,KACH,IAAQnI,EAAc6E,EAAd7E,UAOR,OANiBA,EACdjH,KAAI,SAAC2O,GAEJ,OADesI,kBAAQpJ,EAAYqJ,OAAQvI,MAG5CwI,OAAM,SAAC9E,GAAD,OAAYA,KAQd,CACLpL,UAFgB,sBAAOA,GAAP,CAAkB4G,EAAYqJ,SAG9CnI,cAAc,EACd6H,UAAW,QATJ,CACL7H,cAAc,EACd6H,UAAW,uBAWjBvX,QAAQC,IAAI,qBACZgJ,OAAOqF,WAAW,EAAKyB,mBAAoB,QAI/C,EAAK/E,SAAL,2BArCiB,IAqCjB,IAEE/I,SAAUuM,MAjIK,EAqInB3D,aAAe,aArII,EA2InBqD,UAAY,WACV,MAA+B,EAAK9P,MAA5BuJ,EAAR,EAAQA,SAAU1F,EAAlB,EAAkBA,SAClB,GAAIP,EAAMO,GAAW,CACnBjC,QAAQC,IAAI,uBACZ,IAAMkO,EAAY,EAAKI,qBAAqB5G,GACtCrJ,EAAQ,2BACT6P,GADS,IAEZ/E,UAAU,EACVzB,SAAU,KACViM,aAAc,MACXW,EAAoB,EAAKnW,QAE9B,EAAK4M,SAAS1M,GAEhB0O,cAAc,EAAK0F,UACnBpE,YAAW,WACT,EAAKoE,SAAW9E,YAAY,EAAK+E,QAAS,EAAKvU,MAAMmU,mBACpD3O,KA5Jc,EA+JnB4Q,UAAY,WACVxH,cAAc,EAAK0F,UACnB,EAAK1H,SAAL,2BACKyJ,oBAAUrC,KACVD,QAjKL,EAAK/T,MAAL,eACKqW,oBAAUrC,KAHE,E,0CAuKnB,WACE,MAUInM,KAAK7H,MATP6C,EADF,EACEA,MACAW,EAFF,EAEEA,KACAK,EAHF,EAGEA,SACA0F,EAJF,EAIEA,SACAc,EALF,EAKEA,QACA0C,EANF,EAMEA,YAEAvD,GARF,EAOEwB,SAPF,EAQExB,WACA8H,EATF,EASEA,aAEMnE,EAAgBtF,KAAKH,MAArByF,YACA7N,EAAS6N,EAAT7N,KACR,OAAI6N,EAAYvN,QACP,aAEJmN,EAqDH,kBAAC,IAAM0F,SAAP,KACE,kBAAC,GAAD,CAAOoG,QAASvH,GACd,uBAAGjQ,UAAU,0BAA0BwG,KAAK7H,MAAMmZ,YAEpD,kBAAC,GAAD,CACEtW,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV0F,SAAUA,EACViD,gBAAiB3E,KAAK2E,gBACtB8J,cAAezO,KAAKyO,cACpBjM,QAASA,EACTW,SAAUnD,KAAK7H,MAAMgL,SACrBtC,SAAUb,KAAK7H,MAAM0I,SACrBC,OAAQd,KAAK7H,MAAMwK,KACnB4L,UAAWvO,KAAKuO,UAChBxN,MAAM,EACNU,SAAS,SACTE,UAAWA,EACXE,UAAW7B,KAAK7H,MAAM0J,UACtBD,YAAa5B,KAAK7H,MAAMyJ,eAvE1B,yBAAKpI,UAAU,aACH,OAAT/B,GAAiB,kBAAC,EAAD,MAClB,2CACA,2DACA,yBAAK+B,UAAU,OACb,yBAAKA,UAAU,aAkBb,0BAAMkP,SAAU1I,KAAKwM,iBACnB,2BAAO9U,KAAK,SAASqR,MAAM,QAAQvP,UAAU,UAGjD,yBAAKA,UAAU,OACb,yBAAKC,MAAO,CAAEqS,UAAW,QAAUtS,UAAU,WAC3C,uBAAGC,MAAO,CAAEqS,UAAW,SACrB,kBAAC,IAAD,CAAMvK,GAAG,SAAT,uBAEA9J,GACA,kBAAC,WAAD,KACE,6BACA,oFAEA,2BACE,4BAAQkC,QAASoD,EAAsBvD,UAAU,OAAjD,qB,GAjODkH,aA6QNmO,gBAJS,SAAC1W,GAAD,MAAY,CAClCmN,YAAanN,EAAMV,QAGNoX,CAAyB0C,ICxTzBO,G,4JAtBb,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/C,KACjC,kBAAC,IAAD,CAAO8C,KAAK,QAAQC,UAAW5M,KAC/B,kBAAC,IAAD,CAAO2M,KAAK,SAASC,UAAWlH,KAChC,kBAAC,IAAD,CAAOiH,KAAK,mBAAmBC,UAAWzI,KAC1C,kBAAC,IAAD,CAAOwI,KAAK,QAAQC,UAAW1F,KAC/B,kBAAC,IAAD,CAAOyF,KAAK,SAASC,UAAW9B,KAChC,kBAAC,IAAD,CAAO6B,KAAK,SAASC,UAAW5C,KAChC,kBAAC,IAAD,CAAO2C,KAAK,SAASC,UAAW3C,KAChC,kBAAC,IAAD,CAAO0C,KAAK,SAASC,UAAW3B,KAChC,kBAAC,IAAD,CAAO0B,KAAK,UAAUC,UAAWV,Y,GAfxB7Q,aCgDNwR,OApDf,SAAarS,GACX,MAAwBiD,mBAAS,MAAjC,mBACM1J,GADN,UACiBC,eA+CjB,OA7CAgK,qBAAU,WACRpK,IAASW,OAAOuY,oBAAmB,SAAC1a,GAClC,GAAIA,EAAM,CACR,IAAMI,EAAWmL,OAAOkG,aAAa2D,QAAQ,aAAepV,EAAK2a,YAAYrS,MAAM,KAAK,GAClFsS,EAAS,CACbD,YAAa3a,EAAK2a,YAClBvC,MAAOpY,EAAKoY,MACZyC,cAAe7a,EAAK6a,cACpBC,SAAU9a,EAAK8a,SACfC,YAAa/a,EAAK+a,YAClB/L,IAAKhP,EAAKgP,IACVgM,aAAchb,EAAKgb,aACnB5a,YAEFuB,EAAS5B,EAAW,CAAEO,SAAS,EAAON,KAAM4a,KAC5CvE,KACGlK,IADH,oBACoBnM,EAAKgP,MACtB3M,MAAK,SAACiT,GACLhT,QAAQC,IAAI,yBAEb6M,OAAM,SAACqH,GACFA,EAAIwC,UAAoC,MAAxBxC,EAAIwC,SAASgC,QAC/B3Y,QAAQC,IAAI,uBACZ8T,KACGC,KAAK,YAAa,CACjBtH,IAAKhP,EAAKgP,IACV/D,KAAM2P,IAEPvY,MAAK,WACJC,QAAQC,IAAI,mCAEb6M,OAAM,SAACqH,GACNnU,QAAQC,IAAI,yBAA0BkU,OAG1CnU,QAAQC,IAAI,qDAIlBD,QAAQC,IAAI,iBACZZ,EAAS5B,EAAW,CAAEO,SAAS,EAAON,KAAM,aAG/C,IAEI,kBAAC,GAAD,O,iBClDTkb,EAASC,OACP,kBAAC,IAAD,CAAU5a,MAAOA,GACf,kBAAC,GAAD,OAEF6a,SAASC,eAAe,U,mBCb1BC,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.8adf202a.chunk.js","sourcesContent":["import { Reducer, Action as ReduxAction } from 'redux'\n\n// import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { configureStore } from '@reduxjs/toolkit'\n// import { composeWithDevTools } from 'redux-devtools-extension'\n// import reduxThunk from 'redux-thunk'\nimport update from 'immutability-helper'\n\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_NICKNAME = 'UPDATE_NICKNAME'\n\nexport const updateUser = (user) => ({\n  type: UPDATE_USER,\n  payload: user,\n})\n\nexport const logOut = () => ({\n  type: 'LOGOUT',\n})\n\nexport const updateNickname = (nickname) => ({\n  type: UPDATE_NICKNAME,\n  payload: nickname,\n})\n\nexport const defaultUser = { loading: true, user: {} }\n\nconst userReducer = (state = defaultUser, action) => {\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case UPDATE_NICKNAME:\n      const newState = update(state, {\n        user: { nickname: { $set: action.payload } },\n      })\n      return newState\n    case 'LOGOUT':\n      return { loading: false, user: null }\n    default:\n      return state\n  }\n}\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n})\n\nexport default store\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig\n","import * as firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\nimport 'firebase/auth'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\nexport default firestore\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation,\n} from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { logOut } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\n\nfunction Signout() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch(logOut())\n        console.log('Signed out.')\n        history.push('/')\n      })\n  }\n\n  return (\n    <div className=\"my-3\" style={{ cursor: 'pointer' }}>\n      <p className=\"text-right text-white\">\n        <a className=\"btn btn-danger\" onClick={signOut}>\n          Sign Out\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Signout\n","import 'firebase/auth'\nimport 'firebase/firestore'\n\nimport * as firebase from 'firebase/app'\n\nimport { GameState, Player } from './models'\nimport { find, isNil, shuffle } from 'lodash'\n\nimport firestore from '../firestore'\n\nexport const range = (n) => {\n  return [...Array(n).keys()]\n}\n\nconst displaySet = (tuple, rowSize = 3) => {\n  let matrix\n  if (rowSize === 4) {\n    matrix = range(3).map((i) => {\n      const row = range(4).map((j) => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  } else {\n    matrix = range(4).map((i) => {\n      const row = range(3).map((j) => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  }\n  console.log(matrix.join('\\n'))\n}\n\nexport const serializeGame = (state) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  })\n  return status\n}\n\nexport const countSets = (board, { debug = false, returnWhenFound = false } = {}) => {\n  let count = 0\n  let candidate = []\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]]\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c])\n          }\n          count++\n          if (returnWhenFound) {\n            return count\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nexport const makeDeck = () => {\n  let deck = []\n  range(3).forEach((c) => {\n    range(3).forEach((n) => {\n      range(3).forEach((s) => {\n        range(3).forEach((f) => {\n          const card = '' + c + s + n + f\n          deck.push(card)\n        })\n      })\n    })\n  })\n  return deck\n}\n\nexport const isSet = (selected) => {\n  if (selected.length !== 3) {\n    return false\n  }\n  const [a, b, c] = selected\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i])\n    if (sum % 3 !== 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const nameThird = (a, b) => {\n  let features\n  let missing\n  let result = ''\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i]\n    } else {\n      features = Number(a[i]) + Number(b[i])\n      missing = (3 - features).toString()\n      result = result + missing\n    }\n  }\n  return result.trim()\n}\n\nexport const cardToggle = (card, selected) => {\n  if (selected.includes(card)) {\n    return selected.filter((c) => c !== card)\n  } else {\n    return [...selected, card]\n  }\n}\n\nexport const reshuffle = ({ board = [], deck }, boardSize = 12, minimumSets = 1) => {\n  let newDeck = shuffle([...board, ...deck])\n  while (\n    countSets(newDeck.slice(0, boardSize)) < minimumSets &&\n    countSets(newDeck, { returnWhenFound: true }) > 0\n  ) {\n    newDeck = shuffle(newDeck)\n  }\n  return {\n    deck: newDeck.slice(boardSize),\n    board: newDeck.slice(0, boardSize),\n  }\n}\n\nexport const removeSelected = (state) => {\n  const { board, deck, selected } = state\n  const newCards = deck.slice(0, 3)\n  let newBoard = [...board]\n  let newDeck = deck.slice(3)\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c)\n    newBoard[index] = newCards[i]\n  })\n  while (countSets(newBoard) === 0) {\n    ;({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }))\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  }\n}\n\nexport const handleGoogleSignIn = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function(result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = result.credential\n      var token = credential.accessToken\n      // The signed-in user info.\n      var user = result.user\n      console.log(token, user)\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code\n      var errorMessage = error.message\n      // The email of the user's account used.\n      var email = error.email\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential\n      // ...\n    })\n}\n\nexport const handleGoogleRedirect = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase.auth().signInWithRedirect(provider)\n}\n\nexport const updateGame = (reference, data) => {\n  let game\n  if (typeof reference === 'string') {\n    game = firestore.collection('games').doc(reference)\n  } else {\n    game = reference\n  }\n  game.update({\n    ...data,\n    lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n  })\n}\n\nexport const sendAction = (gameId, action) => {\n  const actions = firestore\n    .collection('games')\n    .doc(gameId)\n    .collection('actions')\n  actions\n    .add({\n      ...action,\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(function(docRef) {\n      if (action.type === 'found') {\n        const docId = docRef.id\n        console.log('Document written with ID: ', docId)\n        const pendingActionId = docId\n        return pendingActionId\n        // TODO: Trigger message if action isnt processed in reasonable time\n      }\n    })\n}\n\nexport const playerNotRegistered = (players, name) => {\n  const player = find(players, ['name', name])\n  return isNil(player)\n}\n","import './card.css'\n\nimport React, { Component, Fragment } from 'react'\n\nimport { range } from '../utils/helpers'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g\n          display=\"none\"\n          overflow=\"visible\"\n          y=\"0\"\n          x=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n          id=\"canvasGrid\"\n        >\n          <rect fill=\"#fff\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#61d020',\n    1: '#1b2f92',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape shape={shape} fill={this.getFill(color, fill)} color={this.colors[color]} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card d-flex justify-content-center\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map((i) => {\n          return (\n            <svg\n              key={i}\n              className=\"shape\"\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport sadTrombone from '../assets/sad_trombone.mp3'\nimport applause from '../assets/applause.mp3'\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction GameOver(props) {\n  const { gameOver: winnerName, myName, solo } = props\n  const finalSound = () => {\n    const soundEffect = winnerName === myName ? applause : sadTrombone\n    return <audio src={soundEffect} autoPlay />\n  }\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n\n  return (\n    <div className=\"game-over container mt-5\">\n      {finalSound()}\n      <div className=\"row justify-content-center\">\n        <div className=\"col col-md-6\">\n          <div className=\"card shadow\">\n            <h3 className=\"text-center mt-3\">GAME OVER!</h3>\n            <p className=\"text-center mb-4\">Winner: {winnerName} </p>\n            <div className=\"row justify-content-center\">\n              <div className=\"col-4\">\n                <p className=\"text-center\">\n                  <Link to=\"/\">Main</Link>\n                </p>\n              </div>\n              {solo && user !== null && (\n                <div className=\"col-4\">\n                  <p className=\"text-center\">\n                    <Link to=\"/stats\">Stats</Link>\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameOver\n","export const colors = ['light-blue', 'pink', 'amber', 'light-green', 'purple', 'orange']\n","import React, { useEffect, useState } from 'react'\n\nimport { Link } from 'react-router-dom'\nimport { colors } from '../config'\nimport { countSets } from '../utils/helpers'\n\nconst formatTime = (seconds) => {\n  const pad = (ss) => {\n    var p = '00'\n    var result = (p + ss).slice(-p.length)\n    return result\n  }\n  const mm = Math.floor(seconds / 60)\n  const ss = seconds - 60 * mm\n  return `${mm}:${pad(ss)}`\n}\n\nfunction TopBar({ gameMode, deck, board, declarer, setsFound, startTime, elapsedTime }) {\n  const sets = countSets(board)\n  switch (gameMode) {\n    case 'shared-device':\n      return null\n    case 'versus':\n      return (\n        <div className={`topbar py-2 bg-${declarer ? 'light' : 'dark'}-orange`}>\n          <nav className=\"text-white\">\n            <div className=\"d-flex justify-content-around text-center\">\n              <div>Sets: {sets}</div>\n              <div>{declarer && <>SET! {declarer}</>}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    case 'puzzle':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div\n              className=\"nav-wrapper\"\n              style={{ display: 'flex', justifyContent: 'space-between' }}\n            >\n              <div>Total Sets: {sets}</div>\n              <div>Remaining: {sets - setsFound.length}</div>\n              <div>Time: {formatTime(elapsedTime)}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nexport default TopBar\n","import React, { Component, Fragment, useEffect, useState } from 'react'\nimport { debounce, get, isEmpty, map } from 'lodash'\n\nimport Card from './Card'\nimport GameOver from './GameOver'\nimport Modal from 'react-bootstrap/Modal'\nimport TopBar from './TopBar'\nimport { countSets } from '../utils/helpers'\n\nfunction SharedPlayersDisplay({ players, declarer, handlePlayerClick }) {\n  return (\n    <div className=\"row my-4 text-center justify-content-between\">\n      {players.map((info) => {\n        return (\n          <div\n            className={`col-2 bg-${info.color} ${info.name == declarer ? 'active-player' : ''}`}\n            onClick={() => {\n              handlePlayerClick(info.name)\n            }}\n            key={info.name}\n          >\n            <p className=\"my-2 align-middle\">{info.name == declarer ? 'SET!' : info.score}</p>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Board(props) {\n  const [sets, setSets] = useState(null)\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight)\n  const {\n    board,\n    selected,\n    deck,\n    declarer,\n    players,\n    gameOver,\n    myName,\n    setFound,\n    sharedDevice,\n    solo,\n    gameMode,\n  } = props\n\n  useEffect(() => {\n    const resize = debounce(() => {\n      setWindowHeight(window.innerHeight)\n    }, 150)\n\n    window.addEventListener('resize', resize)\n\n    return function cleanup() {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSets(countSets(board, { debug: process.env.NODE_ENV !== 'production' }))\n  }, [board])\n\n  const getBorderColor = ({ declarer, players }) => {\n    if (declarer) {\n      return get(players, `${declarer}.color`, '')\n    }\n    return get(players, `${myName}.color`, '')\n  }\n\n  const borderColor = getBorderColor(props)\n\n  if (!isEmpty(gameOver)) {\n    return <GameOver gameOver={gameOver} myName={myName} solo={solo} />\n  }\n\n  const playersArray = map(players, (info, name) => {\n    return {\n      name,\n      ...info,\n    }\n  })\n\n  const topBoxes = Math.ceil(playersArray.length / 2)\n  const topPlayers = playersArray.slice(0, topBoxes)\n  const bottomPlayers = playersArray.slice(topBoxes)\n\n  return (\n    <Fragment>\n      {(isEmpty(players) || !Object.keys(players).includes(myName)) && (\n        <Modal show>\n          <Modal.Header>\n            <Modal.Title>Waiting to join...</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Players:</h4>\n            <ul className=\"collection\">\n              {map(players, (info, name) => {\n                return (\n                  <li key={name} className=\"collection-item\">\n                    <span className={`player-name`}>\n                      {name} {info.host && '(host)'}\n                    </span>\n                  </li>\n                )\n              })}\n            </ul>\n          </Modal.Body>\n        </Modal>\n      )}\n\n      <TopBar {...props} />\n      <div className=\"container\">\n        {sharedDevice && (\n          <SharedPlayersDisplay\n            players={topPlayers}\n            declarer={declarer}\n            handlePlayerClick={props.handlePlayerClick}\n          />\n        )}\n\n        <div className=\"board d-flex flex-column align-items-center\">\n          <div className=\"board-main-container\">\n            {board.map((card) => {\n              return (\n                <div\n                  key={card}\n                  className={`card-wrapper`}\n                  onClick={() => {\n                    props.handleCardClick(card)\n                  }}\n                >\n                  <div\n                    className={`card-holder ${selected.includes(card) ? `bg-${borderColor}` : ''}`}\n                  >\n                    <div\n                      className={`card ${\n                        setFound && selected.length === 3 && !selected.includes(card)\n                          ? 'blurry'\n                          : ''\n                      }`}\n                    >\n                      <Card desc={card} />\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          {!sharedDevice && gameMode !== 'puzzle' && (\n            <div className=\"row my-1 text-center fixed-bottom\">\n              {map(players, (info, name) => {\n                return (\n                  <div key={name} className=\"col s4 m3\">\n                    <span className={`player-name bg-${info.color}`}>\n                      {name}: {info.score}\n                    </span>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n\n          {sharedDevice && (\n            <SharedPlayersDisplay\n              players={bottomPlayers}\n              declarer={declarer}\n              handlePlayerClick={props.handlePlayerClick}\n            />\n          )}\n\n          {props.handleRedeal && (\n            <div className=\"row mt-3\">\n              <div className=\"col mt-3 mt-md-4\">\n                <button onClick={props.handleRedeal} className=\"btn btn-primary\">\n                  Shuffle\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport { map, findKey } from 'lodash'\n\nfunction PlayerList({ isHost, players, setState }) {\n  const host = findKey(players, (player) => player.host)\n\n  return (\n    <div className=\"container mt-4\">\n      <h4>Players:</h4>\n      <ul className=\"collection\">\n        {map(players, (info, name) => {\n          return (\n            <li key={name} className=\"collection-item\">\n              <span className={`player-name`}>\n                {name} {info.host && '(host)'}\n              </span>\n            </li>\n          )\n        })}\n      </ul>\n      {isHost ? (\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setState({\n              gameStarted: true,\n            })\n          }}\n        >\n          Start Game\n        </button>\n      ) : (\n        <p>Waiting for host to start game...</p>\n      )}\n    </div>\n  )\n}\n\nexport default PlayerList\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateNickname } from '../redux-helpers'\nimport { Link } from 'react-router-dom'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nimport Signout from './Signout'\nimport Board from './Board'\nimport {\n  handleGoogleRedirect,\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected,\n  isSet,\n  updateGame,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport PlayerList from './PlayerList'\nimport { findKey, isEmpty } from 'lodash'\nimport { Action, MultiState } from '../utils/models'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\n// const firebaseRefs = {}\n\ninterface FirebaseRefs {\n  game: any\n  actions: any\n}\n\nfunction Host() {\n  const userReducer = useSelector((state: any) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current as FirebaseRefs\n\n  const initialDeck = makeDeck()\n  const initialGameState: {\n    deck: string[]\n    board: string[]\n    selected: string[]\n  } = {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n\n  const [gameInProgress, setGameInProgress] = useState<object | undefined>()\n  const [gameTitle, setGameTitle] = useState('')\n  const [activeGameUpdater, setActiveGameUpdater] = useState()\n  const [gameSubscription, setGameSubscription] = useState()\n  const [actionsSubscription, setActionSubscription] = useState()\n\n  const [state, setFullState] = useState<MultiState>({\n    gameTitle: '',\n    players: {},\n    created: false,\n    gameStarted: false,\n    myName: '',\n    setFound: false,\n    declarer: null,\n    gameOver: '',\n    ...initialGameState,\n  })\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  useEffect(() => {\n    if (user && !isEmpty(user.uid)) {\n      firestore\n        .collection('games')\n        .where('creator_uid', '==', user.uid)\n        .get()\n        .then(function(querySnapshot) {\n          querySnapshot.forEach(function(doc) {\n            console.log(doc.id)\n            const oldGame = {\n              ...doc.data(),\n              gameTitle: doc.id,\n            }\n            console.log('Old game: ', oldGame)\n            setGameInProgress(oldGame)\n          })\n        })\n        .catch(function(error) {\n          console.log('Error getting documents: ', error)\n        })\n    }\n  }, [user])\n\n  useEffect(() => {\n    return () => {\n      if (actionsSubscription) {\n        // @ts-ignore\n        actionsSubscription()\n      }\n      if (gameSubscription) {\n        // @ts-ignore\n        gameSubscription()\n      }\n    }\n  }, [gameSubscription, actionsSubscription])\n\n  useEffect(() => {\n    return function() {\n      window.clearInterval(activeGameUpdater)\n    }\n  }, [activeGameUpdater])\n\n  const setState = (update: Partial<MultiState>) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const handleRejectResume = () => {\n    // @ts-ignore\n    const { gameTitle } = gameInProgress\n    firestore\n      .collection('games')\n      .doc(gameTitle)\n      .delete()\n      .then(() => {\n        console.log('Deleted old game')\n        setGameInProgress(undefined)\n      })\n  }\n\n  const handleCardClick = (card: string) => {\n    const { myName } = state\n    if (!state.declarer) {\n      const newSelected = cardToggle(card, state.selected)\n      if (isSet(newSelected)) {\n        updateSelected(newSelected, myName)\n      }\n      setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  const handleRedeal = () => {\n    const newState = reshuffle(state)\n    setAndSendState(newState)\n  }\n\n  const actionsSubscribe = (reference: string | any) => {\n    let doc\n    if (typeof reference === 'string') {\n      doc = firestore.collection('games').doc(reference)\n    } else {\n      doc = reference\n    }\n    const actions = doc.collection('actions')\n    console.log(actions)\n    actions.onSnapshot((snapshot: any) => {\n      console.log('got action snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    return actions\n    const actionSubscription = actions.onSnapshot((snapshot: any) => {\n      console.log('got snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    setActionSubscription(actions)\n  }\n\n  const subscribeToGame = async (gameTitle: string) => {\n    firebaseRefs.game = firestore.collection('games').doc(gameTitle)\n    const gameUpdateId = window.setInterval(() => {\n      updateGame(firebaseRefs.game, {})\n    }, 30000)\n    // @ts-ignore\n    setActiveGameUpdater(gameUpdateId)\n\n    const unsubscribe = actionsSubscribe(firebaseRefs.game)\n    setActionSubscription(unsubscribe)\n  }\n\n  const reloadGame = () => {\n    // @ts-ignore\n    const host = findKey(gameInProgress.players, (player) => player.host)\n    // @ts-ignore\n    const { gameTitle } = gameInProgress\n    setState({ gameTitle })\n    subscribeToGame(gameTitle)\n\n    setState({\n      myName: host,\n      created: true,\n      ...gameInProgress,\n      // @ts-ignore\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  const handleCreateGame = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const { myName, board, deck, selected, players, gameOver } = state\n    const officialTitle = !isEmpty(gameTitle) ? gameTitle : `${myName}'s game`\n    setState({ gameTitle: officialTitle })\n    firebaseRefs.game = firestore.collection('games').doc(officialTitle)\n    firebaseRefs.game.set({\n      creator_uid: user.uid,\n      players,\n      board,\n      deck,\n      selected,\n      gameOver,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    const updateId = window.setInterval(() => {\n      firebaseRefs.game.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    // @ts-ignore\n\n    setActiveGameUpdater(updateId)\n\n    firebaseRefs.actions = actionsSubscribe(officialTitle)\n\n    console.log(firebaseRefs.actions)\n    // firebaseRefs.actions.onSnapshot((snapshot: any) => {\n    //   console.log('got action snapshot')\n    //   snapshot.docChanges().forEach((change: any) => {\n    //     if (change.type === 'added') {\n    //       const action = change.doc.data() as Action\n    //       console.log(action)\n    //       processAction(action)\n    //       firebaseRefs.actions.doc(change.doc.id).delete()\n    //     }\n    //     if (change.type === 'removed') {\n    //       console.log('Removed action: ', change.doc.data())\n    //     }\n    //   })\n    // })\n\n    // const unsubscribe = actionsSubscribe(officialTitle)\n    // setActionSubscription(unsubscribe)\n\n    setState({\n      created: true,\n    })\n  }\n\n  const handleSetName = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setState({\n      myName: user.nickname,\n      players: {\n        [user.nickname]: {\n          host: true,\n          uid: user.uid,\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  const markPointForDeclarer = (declarer: string) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = currentState.current\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    if (gameOver) {\n      window.setTimeout(() => {\n        firebaseRefs.game.delete()\n        clearInterval(activeGameUpdater)\n      }, 3000)\n    }\n\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  const processAction = (action: Action) => {\n    const { type, payload } = action\n    const { players, declarer, board } = currentState.current\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            host: false,\n            uid: payload.uid,\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer && verifySelectedOnBoard(board, payload.selected)) {\n          updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  const removeSet = (selected: string[], declarer: string) => {\n    if (isSet(selected)) {\n      const newScores = markPointForDeclarer(declarer)\n      const newState: Partial<MultiState> = {\n        ...currentState.current,\n        setFound: false,\n        declarer: null,\n        ...newScores,\n        ...removeSelected(currentState.current),\n      }\n      setAndSendState(newState)\n    }\n  }\n\n  const setAndSendState = (update: Partial<MultiState>) => {\n    console.log('updating', currentState.current.gameTitle)\n    setState(update)\n    updateGame(firebaseRefs.game, update)\n  }\n\n  const verifySelectedOnBoard = (board: string[], selected: string[]) => {\n    for (let i = 0; i < selected.length; i++) {\n      if (!board.includes(selected[i])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const updateSelected = (newSelected: string[], declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    setAndSendState(newState)\n    if (newState.setFound) {\n      setTimeout(() => {\n        removeSet(newSelected, declarer)\n      }, 4000)\n    }\n  }\n\n  const { board, deck, selected, declarer, players, created, gameStarted, myName } = state\n\n  if (userLoading) {\n    return 'Loading...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container mt-4\">\n        <p>To host a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  if (gameInProgress && !state.created) {\n    return (\n      <div className=\"container\">\n        <p>You are already hosting a game. Return to it?</p>\n        <button className=\"btn btn-primary mr-5\" onClick={() => reloadGame()}>\n          YES!\n        </button>\n        <button className=\"btn btn-danger\" onClick={handleRejectResume}>\n          No, remove it\n        </button>\n      </div>\n    )\n  }\n\n  if (myName === '') {\n    return (\n      <div className=\"container\">\n        <Signout />\n        <h4>Enter your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"row mb-4\">\n            <div className=\"col-md-3 mb-3 mr-md-4\">\n              <input\n                autoFocus\n                placeholder=\"hostname\"\n                value={user.nickname}\n                onChange={(e) => {\n                  dispatch(updateNickname(e.target.value))\n                  window.localStorage.setItem('nickname', e.target.value)\n                }}\n              />\n            </div>\n            <div className=\"col-md-3\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n        <div>\n          <p>\n            <Link to=\"/\">Main Menu</Link>\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!created) {\n    return (\n      <div className=\"container mt-4\">\n        <h4>Name your game:</h4>\n        <form onSubmit={handleCreateGame}>\n          <div className=\"mb-3\">\n            <input\n              autoFocus\n              placeholder={`${myName}'s game`}\n              onChange={(e) => {\n                setGameTitle(e.target.value)\n              }}\n              value={gameTitle}\n            />\n          </div>\n          <div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  if (!gameStarted) {\n    return <PlayerList isHost={true} players={players} setState={setAndSendState} />\n  }\n\n  return (\n    <Board\n      board={board}\n      deck={deck}\n      selected={selected}\n      declarer={declarer}\n      handleCardClick={handleCardClick}\n      // handleDeclare={this.handleDeclare}\n      handleRedeal={handleRedeal}\n      players={players}\n      setFound={state.setFound}\n      gameOver={state.gameOver}\n      myName={state.myName}\n      gameMode=\"versus\"\n    />\n  )\n}\n\nexport default Host\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isEmpty } from 'lodash'\nimport { Link } from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport { updateNickname } from '../redux-helpers'\nimport { cardToggle, isSet, handleGoogleSignIn, handleGoogleRedirect } from '../utils/helpers'\nimport firestore from '../firestore'\n// import Modal from './Modal'\nimport Signout from './Signout'\nimport Board from './Board'\nimport PlayerList from './PlayerList'\nimport Modal from 'react-bootstrap/Modal'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Spinner from 'react-bootstrap/Spinner'\n\nfunction Guest(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const [state, setFullState] = useState({\n    popupVisible: false,\n    setFound: false,\n    displayAnimation: false,\n    animatedSet: [],\n    declarer: '',\n    deck: [],\n    board: [],\n    selected: [],\n    pending: null,\n    gameStarted: false,\n  })\n  const [myName, setMyName] = useState('')\n  const [modalDelayMsg, setDelayMsg] = useState()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current\n  // const [firebaseRefs, setFirebaseRefs] = useState({})\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  const setState = (update) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const resetLocalSelected = () => {\n    const { declarer, selected } = currentState.current\n    if (isEmpty(declarer) && selected.length === 3 && !isSet(selected)) {\n      setState({\n        selected: [],\n      })\n    }\n  }\n\n  const handleCardClick = (card) => {\n    const { declarer, selected } = currentState.current\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, selected)\n    if (newSelected.length > 3) {\n      return\n    }\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name: myName },\n        }\n        console.log('Found set, sending...')\n        sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(resetLocalSelected, 1000)\n      }\n    }\n\n    setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  const handleSetName = (e) => {\n    e.preventDefault()\n    const nameInput = user.nickname\n    if (isEmpty(nameInput)) {\n      return\n    }\n    setMyName(nameInput)\n    const action = {\n      type: 'join',\n      payload: { name: nameInput, uid: user.uid },\n    }\n    sendAction(action)\n  }\n\n  const processUpdate = (doc) => {\n    const updatedState = { ...doc.data() }\n    const { selected: mySelected } = currentState.current\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    // Don't mess with selected cards unless necessary\n    const newSelected =\n      mySelected.length < 3 && isEmpty(updatedState.declarer) ? mySelected : updatedState.selected\n    console.log('New selected', newSelected)\n    setState({\n      ...updatedState,\n      selected: newSelected,\n      popupVisible: false,\n    })\n  }\n\n  const sendAction = (action) => {\n    console.log('Creating on', firebaseRefs.actions)\n    firebaseRefs.actions\n      .add({\n        ...action,\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(function(docRef) {\n        if (action.type === 'found') {\n          const docId = docRef.id\n          console.log('Document written with ID: ', docId)\n          setState({\n            pending: docId,\n          })\n          // TODO: Trigger message if action isnt processed in reasonable time\n        }\n      })\n  }\n\n  useEffect(() => {\n    const { gameName } = props.match.params\n    firebaseRefs.game = firestore.collection('games').doc(gameName)\n    const unsubGames = firebaseRefs.game.onSnapshot((doc) => {\n      processUpdate(doc)\n    })\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n\n    const unsubActions = firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'removed') {\n          const { pending } = currentState.current\n          if (pending === change.doc.id) {\n            console.log('Pending action removed!')\n            setState({\n              pending: null,\n            })\n          }\n        }\n      })\n    })\n\n    return function cleanup() {\n      if (firebaseRefs.game) {\n        unsubGames()\n      }\n      if (firebaseRefs.actions) {\n        unsubActions()\n      }\n    }\n  }, [])\n\n  const { board, deck, selected, declarer, players, popupVisible } = state\n\n  if (userReducer.loading) {\n    return 'Loading profile...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container\">\n        <p>To join a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n        <p>\n          <Link to=\"/lobby\">Back</Link>\n        </p>\n      </div>\n    )\n  }\n  if (!myName) {\n    return (\n      <div className=\"container\">\n        <Signout />\n\n        <h4 className=\"mb-3\">Choose your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"col-12 col-md-4\">\n            <input\n              autoFocus\n              type=\"text\"\n              placeholder=\"your name\"\n              value={user.nickname}\n              onChange={(e) => {\n                dispatch(updateNickname(e.target.value))\n                window.localStorage.setItem('nickname', e.target.value)\n              }}\n            />\n          </div>\n          <div className=\"col-12 col-md-4\">\n            <input className=\"btn btn-primary mt-3 ml-md-3\" type=\"submit\" value=\"Join\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  const { setFound, gameOver, gameStarted } = currentState.current\n\n  if (!gameStarted) {\n    return <PlayerList players={players} isHost={false} />\n  }\n\n  return (\n    <React.Fragment>\n      <Modal show={state.pending && popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p className=\"text-center\">SET!</p>\n          <div className=\"text-center\">\n            <Spinner animation=\"border\" />\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        players={players}\n        setFound={setFound}\n        gameOver={gameOver}\n        // syncing={this.state.syncing}\n        myName={myName}\n        gameMode=\"versus\"\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Guest\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot((snapshot) => {\n      const newGames = []\n      snapshot.forEach((doc) => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { games, init } = this.state\n    console.log(games)\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter((g) => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col-8 col-md-6\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <p>\n                  Click <Link to=\"/host\">here</Link> to host one\n                </p>\n                <p>\n                  <Link className=\"btn btn-primary\" to=\"/\">\n                    Back\n                  </Link>\n                </p>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"text-center my-4\">Available games</h4>\n            <div className=\"row align-content-center\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col-6 col-md-4\" key={game.name}>\n                    <div className=\"card available-game\">\n                      <div className=\"my-auto text-center\">\n                        <Link to={`/guest/${game.name}`}>{game.name}</Link>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div className=\"row\">\n              <div className=\"col mt-4\">\n                <Link className=\"btn btn-primary\" to=\"/\">\n                  Back\n                </Link>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import { GameState, Players, SoloState } from '../utils/models'\nimport React, { Component, Fragment } from 'react'\nimport {\n  cardToggle,\n  handleGoogleRedirect,\n  isSet,\n  makeDeck,\n  nameThird,\n  removeSelected as removeSelectedCards,\n  reshuffle,\n} from '../utils/helpers'\nimport { cloneDeep, isEmpty, shuffle } from 'lodash'\n\nimport Board from './Board'\nimport InputRange from 'react-input-range'\nimport { Link } from 'react-router-dom'\nimport Signout from './Signout'\n// import Slider from 'react-rangeslider'\nimport axios from 'axios'\nimport { colors } from '../config'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst calculateIntervalFromDifficulty = (d) => {\n  let diff = Number(d)\n  if (Number.isNaN(diff)) {\n    diff = 1\n  }\n  const interval = 24000 / (5 * diff)\n  return interval\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  const selected = []\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected,\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  myName: 'you',\n  setFound: false,\n  declarer: null,\n  gameOver: null,\n  cpuTurnInterval: 1000,\n  startTime: new Date(),\n}\n\nclass Solo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n      difficulty: 2,\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n      startTime: new Date(),\n    })\n\n    console.log(`Turns every ${this.state.cpuTurnInterval} ms`)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const savedDifficulty = window.localStorage.getItem('soloDifficulty')\n    let difficulty = savedDifficulty ? Number(savedDifficulty) : 2\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      difficulty,\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    if (this.state.cpuTimer !== null) {\n      window.clearInterval(this.state.cpuTimer)\n    }\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver } = this.state\n    if (declarer || gameOver) {\n      return\n    }\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      if (this.state.cpuTimer !== null) {\n        clearInterval(this.state.cpuTimer)\n      }\n      this.setState({\n        cpuAnimation: window.setInterval(this.animateCpuChoice, 900),\n      })\n    }\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    if (cpuCopy.length === 0) {\n      return\n    }\n    const newSelected = [...selected, cpuCopy.pop()]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      if (this.state.cpuAnimation !== null) {\n        clearInterval(this.state.cpuAnimation)\n      }\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (myName, delta) => {\n    const { players } = this.state\n    const newScore = players[myName].score + delta\n    const newPlayers = update(players, {\n      [myName]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (declarer && !isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: undefined,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const { user } = this.props.userReducer\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    if (!isEmpty(gameOver)) {\n      const uid = (user && user.uid) || 'anonymous'\n      const player_won = declarer == 'you' ? 1 : 0\n      const total_time = Math.round((new Date().getTime() - this.state.startTime.getTime()) / 1000)\n      axios\n        .post('/api/game', {\n          uid,\n          total_time,\n          player_won,\n          difficulty_level: this.state.difficulty,\n          winning_score: newScore,\n        })\n        .then(() => {\n          console.log('Game sent')\n        })\n        .catch((err) => {\n          console.log('Error sending game')\n        })\n    }\n    this.setState(newState)\n    return newState\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n      this.setState({\n        undeclareId: window.setTimeout(() => {\n          this.expireDeclare()\n        }, config.turnTime),\n      })\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      this.state.undeclareId && clearTimeout(this.state.undeclareId)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer, myName } = this.state\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(myName)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (declarer && isSet(selected)) {\n      console.log('Set found, removing')\n      this.markPointForDeclarer(declarer)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: undefined,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    this.state.cpuTimer && clearInterval(this.state.cpuTimer)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      // GameSettings\n      return (\n        <div className=\"container main-content\">\n          {user !== null && <Signout />}\n          <h3 className=\"text-center mb-4\">Solo Play vs. Computer</h3>\n          <h4 className=\"mb-4\">Choose difficulty level:</h4>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <form onSubmit={this.handleStartGame}>\n                <div className=\"col-10 col-md-6 mb-5\">\n                  <InputRange\n                    maxValue={8}\n                    minValue={1}\n                    //@ts-ignore\n                    value={this.state.difficulty}\n                    //@ts-ignore\n                    onChange={(difficulty) => {\n                      //@ts-ignore\n                      const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n                      window.localStorage.setItem('soloDifficulty', difficulty.toString())\n                      //@ts-ignore\n                      this.setState({\n                        cpuTurnInterval,\n                        // @ts-ignore\n                        difficulty,\n                      })\n                    }}\n                  />\n                </div>\n                <input type=\"submit\" value=\"Start\" className=\"btn btn-primary\" />\n              </form>\n              <p style={{ marginTop: '24px' }}>First to {config.playingTo} points is the winner</p>\n            </div>\n            <div className=\"row mt-4\">\n              <ul style={{ listStyleType: 'none' }}>\n                <li className=\"mb-4\">\n                  <Link to=\"/local\">Local Multiplayer</Link>\n                </li>\n                <li>\n                  <Link to=\"/\">Back to Main Menu</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          {!user && (\n            <div className=\"row mt-4\">\n              <div>\n                <p>To save your game statistics, sign in with your Google account.</p>\n\n                <p>\n                  <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n                    Sign in\n                  </button>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={() => {}}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.myName}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"versus\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Solo)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nfunction MenuItem(props) {\n  const { url, cardName, description } = props\n  return (\n    <div className=\"col-9 col-md-4\">\n      <Link to={url}>\n        <div className=\"card shadow-sm mb-3 mb-md-4\">\n          <Card desc={cardName} />\n        </div>\n      </Link>\n      <p className=\"text-center\">{description}</p>\n    </div>\n  )\n}\n\nfunction Main() {\n  const menuItems = [\n    {\n      url: '/solo',\n      cardName: '0012',\n      description: 'Solo/Local',\n    },\n    {\n      url: '/lobby',\n      cardName: '1121',\n      description: 'Join Game',\n    },\n    {\n      url: '/host',\n      cardName: '2200',\n      description: 'Host Game',\n    },\n  ]\n  return (\n    <div className=\"container mt-3 mt-md-5\">\n      <h1 className=\"d-none d-md-block text-center mb-3 mb-md-5\">Main Menu</h1>\n      <div className=\"row justify-content-center\">\n        {menuItems.map((item, i) => {\n          return <MenuItem key={`card-${i}`} {...item} />\n        })}\n      </div>\n      <div className=\"d-none d-md-block\">\n        <hr />\n        <p>\n          <Link to=\"/rules\">Rules</Link>\n        </p>\n        <p>\n          <Link to=\"/stats\">View Statistics</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport Card from './Card'\nimport { Link } from 'react-router-dom'\n\nfunction ShowCard({ desc }) {\n  return (\n    <div className=\"col-4 my-2\">\n      <div className=\"card\">\n        <Card desc={desc} />\n      </div>\n    </div>\n  )\n}\n\nfunction Rules() {\n  const displayCards = ['0000', '1210', '0022', '2101', '0120', '2011']\n\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find sets of three cards that are either the same or different\n        along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        {displayCards.map((c, i) => {\n          return <ShowCard key={i} desc={c} />\n        })}\n      </div>\n      <p>You'll notice that every card has four different characteristics:</p>\n      <ul className=\"browser-default\">\n        <li>color</li>\n        <li>number</li>\n        <li>shape</li>\n        <li>fill</li>\n      </ul>\n      <p>and each of those characteristics has three different possibilities.</p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>Which you can describe as follows:</p>\n      <ul className=\"browser-default\">\n        <li>color - SAME</li>\n        <li>shape - SAME</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Therefore, the three cards form a set.</p>\n      <p>Here is another set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - SAME</li>\n      </ul>\n      <p>This is not a set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>fill - SAME</li>\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - NOT THE SAME OR DIFFERENT!</li>\n      </ul>\n      <p>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Each characteristic is different for all three cards, so this is a set.</p>\n      <p>\n        <Link to=\"/\">Back Home</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Signout from './Signout'\nimport { handleGoogleRedirect } from '../utils/helpers'\nimport * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\nfunction Login(props) {\n  const user = useSelector((state) => state.user)\n\n  useEffect(() => {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(function(result) {\n        if (result.credential) {\n          // This gives you a Google Access Token. You can use it to access the Google API.\n          var token = result.credential.accessToken\n          // ...\n        }\n        // The signed-in user info.\n        var user = result.user\n        console.log(token, user)\n      })\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code\n        var errorMessage = error.message\n        // The email of the user's account used.\n        var email = error.email\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential\n        // ...\n      })\n  }, [])\n\n  if (!user) {\n    return (\n      <div className=\"container\">\n        <button onClick={handleGoogleRedirect} className=\"btn\">\n          Sign in\n        </button>\n      </div>\n    )\n  }\n  return (\n    <div className=\"container\">\n      <Signout />\n    </div>\n  )\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport { Link } from 'react-router-dom'\n\nconst debugging = false\n\nconst config = {\n  declareTime: 5000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst createPlayers = (num) => {\n  const players = {}\n  for (let i = 0; i < num; i++) {\n    players[i] = {\n      score: 0,\n      color: config.colors[i],\n    }\n  }\n  return players\n}\n\nconst initialState = {\n  numPlayers: null,\n  players: createPlayers(2),\n  gameStarted: false,\n  name: '1',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: '',\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass SharedDevice extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (numPlayers) => {\n    this.setState({\n      numPlayers,\n      players: createPlayers(numPlayers),\n    })\n    this.setState({\n      gameStarted: true,\n    })\n  }\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.declareTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer } = this.state\n    if (!setFound && declarer !== null) {\n      const newSelected = cardToggle(card, this.state.selected)\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, declarer)\n      }\n    }\n  }\n\n  handlePlayerClick = (clickerName) => {\n    const { declarer } = this.state\n    if (declarer === null) {\n      this.performDeclare(clickerName)\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, numPlayers, setFound } = this.state\n    console.log(players)\n    if (!numPlayers) {\n      return (\n        <div className=\"container\">\n          <h4 className=\"mb-4\">Choose Number of Players</h4>\n          <div className=\"row text-center\">\n            {[...Array(6).keys()].map((i) => {\n              return (\n                <div\n                  key={`players-${i}`}\n                  onClick={() => {\n                    this.handleStartGame(i + 1)\n                  }}\n                  className=\"mb-3 col-4\"\n                >\n                  <button className=\"btn btn-info\">{i + 1}</button>\n                </div>\n              )\n            })}\n          </div>\n          <div>\n            <p>\n              <Link to=\"/solo\">Back</Link>\n            </p>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handlePlayerClick={this.handlePlayerClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          sharedDevice={true}\n          gameMode=\"shared-device\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SharedDevice\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { handleGoogleRedirect } from '../utils/helpers'\n\nimport axios from 'axios'\n\nfunction Stats(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n  const [stats, setStats] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const getStats = async () => {\n      axios.get(`/api/user/stats/${user.uid}`).then((response) => {\n        setStats(response.data)\n      })\n    }\n\n    if (!userReducer.loading && user !== null) {\n      getStats()\n    }\n  }, [userReducer.loading])\n\n  if (userReducer.loading) {\n    return 'Loading...'\n  }\n\n  if (user === null) {\n    return (\n      <div className=\"container mt-4\">\n        <p>Sign in to view stats</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mt-2 mt-md-4\">\n      <h3>Statistics</h3>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Difficulty</th>\n            <th>Games Played</th>\n            <th>Winning Percentage</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {stats &&\n            stats.map((row, i) => {\n              return (\n                <tr key={`stats-${i}`}>\n                  <td>{row.difficulty_level}</td>\n                  <td>{row.games_played}</td>\n                  <td>{Math.round(100 * (row.games_won / row.games_played))}%</td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n      <p>\n        <Link to=\"/\">Main Menu</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Stats\n","import React from 'react'\nimport Modal from 'react-bootstrap/Modal'\n\nconst SetModal = ({ children, visible: popupVisible }) => {\n  return (\n    <>\n      <Modal show={popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{children}</Modal.Body>\n        <Modal.Footer></Modal.Footer>\n      </Modal>\n    </>\n  )\n\n  return (\n    <div className={`modal popup-message ${popupVisible ? 'show' : ''}`}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default SetModal\n","import React, { Component, Fragment } from 'react'\nimport {\n  cardToggle,\n  countSets,\n  handleGoogleRedirect,\n  isSet,\n  makeDeck,\n  nameThird,\n  removeSelected as removeSelectedCards,\n  reshuffle,\n} from '../utils/helpers'\nimport { cloneDeep, isEqual, shuffle } from 'lodash'\n\nimport Board from './Board'\nimport { Link } from 'react-router-dom'\n// import Slider from 'react-rangeslider'\nimport Modal from './Modal'\nimport Signout from './Signout'\nimport axios from 'axios'\nimport { colors } from '../config'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = (cardsOnBoard) => {\n  const getMinSets = (cardsOnBoard) => {\n    return Math.round((cardsOnBoard - 3) / 3)\n  }\n\n  const minSets = getMinSets(cardsOnBoard)\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle(\n      {\n        deck: initialDeck,\n      },\n      { boardSize: cardsOnBoard, minimumSets: minSets },\n    ),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  gameOver: false,\n  startTime: null,\n  elapsedTime: null,\n  setsFound: [],\n  setsOnBoard: null,\n  cardsOnBoard: 12,\n  popupVisible: false,\n  popUpText: 'SET!',\n}\n\nconst sortSet = (set) => {\n  return set.sort()\n}\n\nclass Puzzle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    const { cardsOnBoard } = this.state\n    const gameState = createGameState(cardsOnBoard)\n    const startTime = new Date()\n    this.setState({\n      gameStarted: true,\n      startTime,\n      elapsedTime: 0,\n      ...gameState,\n      setsOnBoard: countSets(gameState.board),\n    })\n    window.timeId = setInterval(() => {\n      const elapsedTime = Math.round((new Date().getTime() - startTime.getTime()) / 1000)\n      this.setState({\n        elapsedTime,\n      })\n    }, 1000)\n  }\n\n  componentDidMount = () => {}\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleDeclare = () => {\n    return\n  }\n\n  resetLocalSelected = (noCheck = false) => {\n    this.setState((currentState) => {\n      if (currentState.selected.length === 3) {\n        if (noCheck || !isSet(currentState.selected)) {\n          return {\n            selected: [],\n          }\n        }\n      }\n    })\n  }\n\n  handleCardClick = (card) => {\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        console.log('Set found')\n        this.setState((currentState) => {\n          window.setTimeout(() => {\n            this.setState({\n              popupVisible: false,\n            })\n            this.resetLocalSelected(true)\n          }, 2000)\n          const { setsFound } = currentState\n          const isNewSet = setsFound\n            .map((set) => {\n              const result = isEqual(newSelected.sort(), set)\n              return !result\n            })\n            .every((result) => result)\n          if (!isNewSet) {\n            return {\n              popupVisible: true,\n              popUpText: 'Already found!',\n            }\n          }\n          const newSetsFound = [...setsFound, newSelected.sort()]\n          return {\n            setsFound: newSetsFound,\n            popupVisible: true,\n            popUpText: 'SET!',\n          }\n        })\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1200)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  handleRedeal = () => {\n    return\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameStarted,\n      setFound,\n      setsFound,\n      popupVisible,\n    } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          {user !== null && <Signout />}\n          <h3>Puzzle Mode</h3>\n          <p>Find as many sets as you can</p>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              {/* <Slider\n                ref={(input) => {\n                  this.difficultyInput = input\n                }}\n                min={2}\n                max={4}\n                orientation=\"horizontal\"\n                tooltip={true}\n                // labels={{ 2: 6, 3: 9, 4: 12 }}\n                format={(v) => 3 * v}\n                value={Number(this.state.cardsOnBoard) / 3}\n                onChange={(cards) => {\n                  this.setState({\n                    cardsOnBoard: cards * 3,\n                  })\n                }}\n              /> */}\n              <form onSubmit={this.handleStartGame}>\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n            <div className=\"row\">\n              <div style={{ marginTop: '48px' }} className=\"col s12\">\n                <p style={{ marginTop: '36px' }}>\n                  <Link to=\"/solo\">Back to Solo Menu</Link>\n                </p>\n                {!user && (\n                  <Fragment>\n                    <hr />\n                    <p>To save your stats, sign in with your Google account.</p>\n\n                    <p>\n                      <button onClick={handleGoogleRedirect} className=\"btn\">\n                        Sign in\n                      </button>\n                    </p>\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">{this.state.popUpText}</p>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"puzzle\"\n          setsFound={setsFound}\n          startTime={this.state.startTime}\n          elapsedTime={this.state.elapsedTime}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Puzzle)\n","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Host from './Host'\nimport Guest from './Guest'\nimport Lobby from './Lobby'\nimport Solo from './Solo'\nimport Main from './Main'\nimport Rules from './Rules'\nimport Login from './Login'\nimport SharedDevice from './SharedDevice'\nimport Stats from './Stats'\nimport Puzzle from './Puzzle'\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/local\" component={SharedDevice} />\n            <Route path=\"/rules\" component={Rules} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/stats\" component={Stats} />\n            <Route path=\"/puzzle\" component={Puzzle} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default Routes\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\n// import 'firebase/firestore'\n// import firestore from '../firestore'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\n\nfunction App(props) {\n  const [user, setUser] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const nickname = window.localStorage.getItem('nickname') || user.displayName.split(' ')[0]\n        const myUser = {\n          displayName: user.displayName,\n          email: user.email,\n          emailVerified: user.emailVerified,\n          photoURL: user.photoURL,\n          isAnonymous: user.isAnonymous,\n          uid: user.uid,\n          providerData: user.providerData,\n          nickname,\n        }\n        dispatch(updateUser({ loading: false, user: myUser }))\n        axios\n          .get(`/api/user/${user.uid}`)\n          .then((result) => {\n            console.log('User is registered')\n          })\n          .catch((err) => {\n            if (err.response && err.response.status === 404) {\n              console.log('User not registered')\n              axios\n                .post('/api/user', {\n                  uid: user.uid,\n                  info: myUser,\n                })\n                .then(() => {\n                  console.log('User registered successfully')\n                })\n                .catch((err) => {\n                  console.log('Error registering user', err)\n                })\n            } else {\n              console.log('An error occurred trying to GET user info')\n            }\n          })\n      } else {\n        console.log('Not signed in')\n        dispatch(updateUser({ loading: false, user: null }))\n      }\n    })\n  }, [])\n\n  return <Routes />\n}\n\nexport default App\n","import './styles/bts/bootstrap.scss'\nimport './styles/bts/index.scss'\n\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport store from './redux-helpers'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n","module.exports = __webpack_public_path__ + \"static/media/sad_trombone.baad2ca9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/applause.c2030d5b.mp3\";"],"sourceRoot":""}