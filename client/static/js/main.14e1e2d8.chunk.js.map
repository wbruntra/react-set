{"version":3,"sources":["redux-helpers.js","firebaseConfig.js","firestore.js","utils/helpers.js","components/Signout.js","components/Card.js","components/GameOver.js","config.js","components/TopBar.js","components/Board.js","components/PlayerList.js","components/Guest.js","components/Host.tsx","components/Lobby.js","components/Login.js","components/Main.js","components/Modal.js","components/Puzzle.js","components/Rules.js","components/SharedDevice.js","components/Solo.js","components/Stats.js","components/Training.js","useInterval.js","components/Routes.js","components/App.js","index.js"],"names":["updateUser","user","type","payload","updateNickname","nickname","defaultUser","loading","store","configureStore","reducer","state","action","newState","update","$set","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firestore","range","n","Array","keys","displaySet","tuple","matrix","rowSize","map","i","j","includes","join","console","log","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","push","selected","Number","nameThird","result","toString","trim","cardToggle","filter","reshuffle","boardSize","minimumSets","newDeck","shuffle","slice","removeSelected","newCards","newBoard","index","indexOf","handleGoogleRedirect","provider","GoogleAuthProvider","signInWithRedirect","updateGame","reference","data","collection","doc","lastUpdate","FieldValue","serverTimestamp","Signout","dispatch","useDispatch","history","useHistory","className","style","cursor","onClick","auth","signOut","then","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","num","ry","rx","cy","cx","points","Card","colors","0","1","2","white","getFill","drawShape","props","desc","split","this","number","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","Component","GameOver","winnerName","gameOver","solo","myName","finalScore","reset","useSelector","isNaN","to","formatTime","seconds","mm","Math","floor","ss","pad","TopBar","gameMode","declarer","setsFound","players","elapsedTime","timeLeft","sets","justifyContent","you","score","SharedPlayersDisplay","handlePlayerClick","info","name","Board","useState","setSets","window","innerHeight","setWindowHeight","setFound","sharedDevice","useEffect","resize","debounce","addEventListener","removeEventListener","process","borderColor","get","getBorderColor","isEmpty","playersArray","topBoxes","ceil","topPlayers","bottomPlayers","Object","Modal","show","Header","Title","Body","host","handleCardClick","handleRedeal","PlayerList","isHost","setState","findKey","player","gameStarted","Guest","userReducer","popupVisible","displayAnimation","animatedSet","pending","setFullState","setMyName","firebaseRefs","useRef","current","currentState","resetLocalSelected","sendAction","actions","add","created","docRef","docId","gameName","match","params","game","unsubGames","onSnapshot","updatedState","mySelected","newSelected","processUpdate","unsubActions","snapshot","docChanges","change","onSubmit","e","preventDefault","nameInput","uid","autoFocus","placeholder","value","onChange","target","localStorage","setItem","Fragment","Spinner","animation","setTimeout","turnTime","playingTo","Host","userLoading","initialDeck","initialGameState","gameInProgress","setGameInProgress","gameTitle","setGameTitle","activeGameUpdater","setActiveGameUpdater","gameSubscription","actionsSubscription","setActionSubscription","where","querySnapshot","oldGame","catch","error","clearInterval","actionsSubscribe","processAction","delete","subscribeToGame","gameUpdateId","setInterval","unsubscribe","newPlayers","setAndSendState","verifySelectedOnBoard","updateSelected","removeSet","newScores","newScore","$merge","markPointForDeclarer","reloadGame","undefined","officialTitle","set","creator_uid","updateId","Lobby","componentWillUnmount","newGame","init","games","gamesRef","newGames","activeGames","g","updated","toMillis","now","Date","getTime","round","marginTop","Login","getRedirectResult","credential","token","accessToken","code","message","email","MenuItem","url","cardName","description","Main","item","SetModal","children","visible","Footer","createGameState","cardsOnBoard","minSets","getMinSets","initialState","startTime","setsOnBoard","popUpText","Puzzle","handleStartGame","gameState","timeId","componentDidMount","updatePlayerScore","delta","performDeclare","timeDeclared","undeclareID","expireDeclare","clearTimeout","handleDeclare","noCheck","isEqual","sort","every","removeSelectedCards","cpuTimer","cpuTurn","cpuTurnInterval","resetGame","cloneDeep","connect","ShowCard","Rules","declareTime","cpuDelay","createPlayers","numPlayers","difficulty","cpuFound","SharedDevice","clickerName","calculateIntervalFromDifficulty","diff","cpu","Solo","savedDifficulty","getItem","cpuAnimation","animateCpuChoice","cpuCopy","pop","player_won","total_time","axios","post","difficulty_level","winning_score","err","undeclareId","maxValue","minValue","listStyleType","Stats","stats","setStats","getStats","response","row","games_played","games_won","GameOverModal","handleClose","handleHide","textDecoration","Button","variant","Training","setBoard","setSelected","setScore","setStartTime","setElapsedTime","turnStartTime","setTurnStartTime","turnTimeTotal","setTurnTimeTotal","setTimeSinceTurnStart","timeRemaining","setTimeRemaining","setGameOver","modalHidden","setModalHidden","startTurn","calc","log2","calculateTurnTime","callback","delay","savedCallback","useInterval","elapsed","timeSinceTurnStart","getNewBoard","startingSetCards","_","third","restBoard","getBoardStartingWithSet","v","Routes","exact","path","component","App","onAuthStateChanged","displayName","myUser","emailVerified","photoURL","isAnonymous","providerData","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14e1e2d8.chunk.js","sourcesContent":["import { Reducer, Action as ReduxAction } from 'redux'\n\n// import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { configureStore } from '@reduxjs/toolkit'\n// import { composeWithDevTools } from 'redux-devtools-extension'\n// import reduxThunk from 'redux-thunk'\nimport update from 'immutability-helper'\n\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_NICKNAME = 'UPDATE_NICKNAME'\n\nexport const updateUser = (user) => ({\n  type: UPDATE_USER,\n  payload: user,\n})\n\nexport const logOut = () => ({\n  type: 'LOGOUT',\n})\n\nexport const updateNickname = (nickname) => ({\n  type: UPDATE_NICKNAME,\n  payload: nickname,\n})\n\nexport const defaultUser = { loading: true, user: {} }\n\nconst userReducer = (state = defaultUser, action) => {\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case UPDATE_NICKNAME:\n      const newState = update(state, {\n        user: { nickname: { $set: action.payload } },\n      })\n      return newState\n    case 'LOGOUT':\n      return { loading: false, user: null }\n    default:\n      return state\n  }\n}\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n})\n\nexport default store\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig\n","import * as firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\nimport 'firebase/auth'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\nexport default firestore\n","import 'firebase/auth'\nimport 'firebase/firestore'\n\nimport * as firebase from 'firebase/app'\n\nimport { GameState, Player } from './models'\nimport { find, isNil, shuffle } from 'lodash'\n\nimport _ from 'lodash'\nimport firestore from '../firestore'\n\nexport const range = (n) => {\n  return [...Array(n).keys()]\n}\n\nconst displaySet = (tuple, rowSize = 3) => {\n  let matrix\n  if (rowSize === 4) {\n    matrix = range(3).map((i) => {\n      const row = range(4).map((j) => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  } else {\n    matrix = range(4).map((i) => {\n      const row = range(3).map((j) => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  }\n  console.log(matrix.join('\\n'))\n}\n\nexport const serializeGame = (state) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  })\n  return status\n}\n\nexport const countSets = (board, { debug = false, returnWhenFound = false } = {}) => {\n  let count = 0\n  let candidate = []\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]]\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c])\n          }\n          count++\n          if (returnWhenFound) {\n            return count\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nexport const makeDeck = () => {\n  let deck = []\n  range(3).forEach((c) => {\n    range(3).forEach((n) => {\n      range(3).forEach((s) => {\n        range(3).forEach((f) => {\n          const card = '' + c + s + n + f\n          deck.push(card)\n        })\n      })\n    })\n  })\n  return deck\n}\n\nexport const isSet = (selected) => {\n  if (selected.length !== 3) {\n    return false\n  }\n  const [a, b, c] = selected\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i])\n    if (sum % 3 !== 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const nameThird = (a, b) => {\n  let features\n  let missing\n  let result = ''\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i]\n    } else {\n      features = Number(a[i]) + Number(b[i])\n      missing = (3 - features).toString()\n      result = result + missing\n    }\n  }\n  return result.trim()\n}\n\nexport const cardToggle = (card, selected) => {\n  if (selected.includes(card)) {\n    return selected.filter((c) => c !== card)\n  } else {\n    return [...selected, card]\n  }\n}\n\nexport const reshuffle = ({ board = [], deck }, boardSize = 12, minimumSets = 1) => {\n  let newDeck = shuffle([...board, ...deck])\n  while (\n    countSets(newDeck.slice(0, boardSize)) < minimumSets &&\n    countSets(newDeck, { returnWhenFound: true }) > 0\n  ) {\n    newDeck = shuffle(newDeck)\n  }\n  return {\n    deck: newDeck.slice(boardSize),\n    board: newDeck.slice(0, boardSize),\n  }\n}\n\n/**\n * The first two cards on the board will form a set with some other card\n */\n\nexport const getBoardStartingWithSet = ({ startingSetCards = 2, boardSize = 12 }) => {\n  let deck = _.shuffle(makeDeck())\n  let board = [...deck.slice(0, 2)]\n  const third = nameThird(board[0], board[1])\n  // board.push(third)\n  deck = deck.slice(2)\n  deck = deck.filter((c) => c !== third)\n  let restBoard = _.shuffle([third, ...deck.slice(0, boardSize - 3)])\n  board = [...board, ...restBoard]\n  deck = deck.slice(boardSize - 3)\n  return {\n    board,\n    deck,\n  }\n}\n\nexport const removeSelected = (state) => {\n  const { board, deck, selected } = state\n  const newCards = deck.slice(0, 3)\n  let newBoard = [...board]\n  let newDeck = deck.slice(3)\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c)\n    newBoard[index] = newCards[i]\n  })\n  while (countSets(newBoard) === 0) {\n    ;({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }))\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  }\n}\n\nexport const handleGoogleSignIn = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function(result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = result.credential\n      var token = credential.accessToken\n      // The signed-in user info.\n      var user = result.user\n      console.log(token, user)\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code\n      var errorMessage = error.message\n      // The email of the user's account used.\n      var email = error.email\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential\n      // ...\n    })\n}\n\nexport const handleGoogleRedirect = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase.auth().signInWithRedirect(provider)\n}\n\nexport const updateGame = (reference, data) => {\n  let game\n  if (typeof reference === 'string') {\n    game = firestore.collection('games').doc(reference)\n  } else {\n    game = reference\n  }\n  game.update({\n    ...data,\n    lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n  })\n}\n\nexport const sendAction = (gameId, action) => {\n  const actions = firestore\n    .collection('games')\n    .doc(gameId)\n    .collection('actions')\n  actions\n    .add({\n      ...action,\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(function(docRef) {\n      if (action.type === 'found') {\n        const docId = docRef.id\n        console.log('Document written with ID: ', docId)\n        const pendingActionId = docId\n        return pendingActionId\n        // TODO: Trigger message if action isnt processed in reasonable time\n      }\n    })\n}\n\nexport const playerNotRegistered = (players, name) => {\n  const player = find(players, ['name', name])\n  return isNil(player)\n}\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation,\n} from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { logOut } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\n\nfunction Signout() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch(logOut())\n        console.log('Signed out.')\n        history.push('/')\n      })\n  }\n\n  return (\n    <div className=\"my-3\" style={{ cursor: 'pointer' }}>\n      <p className=\"text-right text-white\">\n        <a className=\"btn btn-danger\" onClick={signOut}>\n          Sign Out\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Signout\n","import './card.scss'\n\nimport React, { Component, Fragment } from 'react'\n\nimport { range } from '../utils/helpers'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g\n          display=\"none\"\n          overflow=\"visible\"\n          y=\"0\"\n          x=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n          id=\"canvasGrid\"\n        >\n          <rect fill=\"#fff\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color, num }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n  return null\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#61d020',\n    1: '#1b2f92',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [num, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape\n          shape={shape}\n          num={num}\n          fill={this.getFill(color, fill)}\n          color={this.colors[color]}\n        />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card d-flex justify-content-center\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map((i) => {\n          return (\n            <svg\n              key={i}\n              className={`shape ${number === '1' ? 'double' : ''}`}\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","// import sadTrombone from '../assets/sad_trombone.mp3'\n// import applause from '../assets/applause.mp3'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Link } from 'react-router-dom'\nimport React from 'react'\n\nfunction GameOver(props) {\n  const { gameOver: winnerName, myName, solo, finalScore, reset } = props\n  // const finalSound = () => {\n  //   const soundEffect = winnerName === myName ? applause : sadTrombone\n  //   return <audio src={soundEffect} autoPlay />\n  // }\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n\n  return (\n    <div className=\"game-over container mt-5\">\n      {/* {finalSound()} */}\n      <div className=\"row justify-content-center\">\n        <div className=\"col col-md-6\">\n          <div className=\"card shadow\">\n            <h3 className=\"text-center mt-3\">GAME OVER!</h3>\n            {!isNaN(finalScore) ? (\n              <div className=\"d-flex flex-column justify-content-center\">\n                <p className=\"text-center my-2\">Final Score: {finalScore} </p>\n                <div className=\"d-flex flex-row justify-content-center\">\n                  <button className=\"btn btn-primary my-2\" onClick={() => reset()}>\n                    Reset\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <p className=\"text-center mb-4\">Winner: {winnerName} </p>\n            )}\n            <div className=\"row justify-content-center\">\n              <div className=\"col-4\">\n                <p className=\"text-center\">\n                  <Link to=\"/\">Main</Link>\n                </p>\n              </div>\n              {solo && user !== null && (\n                <div className=\"col-4\">\n                  <p className=\"text-center\">\n                    <Link to=\"/stats\">Stats</Link>\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameOver\n","export const colors = ['light-blue', 'pink', 'amber', 'light-green', 'purple', 'orange']\n","import React, { useEffect, useState } from 'react'\n\nimport { Link } from 'react-router-dom'\nimport { colors } from '../config'\nimport { countSets } from '../utils/helpers'\nimport useInterval from '../useInterval'\n\nconst formatTime = (seconds) => {\n  const pad = (ss) => {\n    var p = '00'\n    var result = (p + ss).slice(-p.length)\n    return result\n  }\n  const mm = Math.floor(seconds / 60)\n  const ss = seconds - 60 * mm\n  return `${mm}:${pad(ss)}`\n}\n\nfunction TopBar({ gameMode, deck, board, declarer, setsFound, players, elapsedTime, timeLeft }) {\n  const sets = countSets(board)\n\n  switch (gameMode) {\n    case 'shared-device':\n      return null\n    case 'versus':\n      return (\n        <div className={`topbar py-2 bg-${declarer ? 'light' : 'dark'}-orange`}>\n          <nav className=\"text-white\">\n            <div className=\"d-flex justify-content-around text-center\">\n              <div>Sets: {sets}</div>\n              <div>{declarer && <>SET! {declarer}</>}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    case 'puzzle':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div\n              className=\"nav-wrapper\"\n              style={{ display: 'flex', justifyContent: 'space-between' }}\n            >\n              <div>Total Sets: {sets}</div>\n              <div>Remaining: {sets - setsFound.length}</div>\n              <div>Time: {formatTime(elapsedTime)}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    case 'training':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div className=\"nav-wrapper d-flex justify-content-around\">\n              <div>Time: {formatTime(elapsedTime)}</div>\n              {/* <div>Hello World!</div> */}\n              <div>Score: {players.you.score}</div>\n              <div>Remaining: {timeLeft >= 0 ? timeLeft : 'X'}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nexport default TopBar\n","import React, { Component, Fragment, useEffect, useState } from 'react'\nimport { debounce, get, isEmpty, map } from 'lodash'\n\nimport Card from './Card'\nimport GameOver from './GameOver'\nimport Modal from 'react-bootstrap/Modal'\nimport TopBar from './TopBar'\nimport { countSets } from '../utils/helpers'\n\nfunction SharedPlayersDisplay({ players, declarer, handlePlayerClick }) {\n  return (\n    <div className=\"row my-4 text-center justify-content-between\">\n      {players.map((info) => {\n        return (\n          <div\n            className={`col-2 bg-${info.color} ${info.name == declarer ? 'active-player' : ''}`}\n            onClick={() => {\n              handlePlayerClick(info.name)\n            }}\n            key={info.name}\n          >\n            <p className=\"my-2 align-middle\">{info.name == declarer ? 'SET!' : info.score}</p>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Board(props) {\n  const [sets, setSets] = useState(null)\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight)\n  const {\n    board,\n    selected,\n    deck,\n    declarer,\n    players,\n    gameOver,\n    myName,\n    setFound,\n    sharedDevice,\n    solo,\n    gameMode,\n  } = props\n\n  useEffect(() => {\n    const resize = debounce(() => {\n      setWindowHeight(window.innerHeight)\n    }, 150)\n\n    window.addEventListener('resize', resize)\n\n    return function cleanup() {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSets(countSets(board, { debug: process.env.NODE_ENV !== 'production' }))\n  }, [board])\n\n  const getBorderColor = ({ declarer, players }) => {\n    if (declarer) {\n      return get(players, `${declarer}.color`, '')\n    }\n    return get(players, `${myName}.color`, '')\n  }\n\n  const borderColor = getBorderColor(props)\n\n  if (!isEmpty(gameOver)) {\n    return <GameOver gameOver={gameOver} myName={myName} solo={solo} />\n  }\n\n  const playersArray = map(players, (info, name) => {\n    return {\n      name,\n      ...info,\n    }\n  })\n\n  const topBoxes = Math.ceil(playersArray.length / 2)\n  const topPlayers = playersArray.slice(0, topBoxes)\n  const bottomPlayers = playersArray.slice(topBoxes)\n\n  return (\n    <Fragment>\n      {(isEmpty(players) || !Object.keys(players).includes(myName)) && (\n        <Modal show>\n          <Modal.Header>\n            <Modal.Title>Waiting to join...</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Players:</h4>\n            <ul className=\"collection\">\n              {map(players, (info, name) => {\n                return (\n                  <li key={name} className=\"collection-item\">\n                    <span className={`player-name`}>\n                      {name} {info.host && '(host)'}\n                    </span>\n                  </li>\n                )\n              })}\n            </ul>\n          </Modal.Body>\n        </Modal>\n      )}\n\n      <TopBar {...props} />\n      <div className=\"container\">\n        {sharedDevice && (\n          <SharedPlayersDisplay\n            players={topPlayers}\n            declarer={declarer}\n            handlePlayerClick={props.handlePlayerClick}\n          />\n        )}\n\n        <div className=\"board d-flex flex-column align-items-center\">\n          <div className=\"board-main-container\">\n            {board.map((card) => {\n              return (\n                <div\n                  key={card}\n                  className={`card-wrapper`}\n                  onClick={() => {\n                    props.handleCardClick(card)\n                  }}\n                >\n                  <div\n                    className={`card-holder ${selected.includes(card) ? `bg-${borderColor}` : ''}`}\n                  >\n                    <div\n                      className={`card ${\n                        setFound && selected.length === 3 && !selected.includes(card)\n                          ? 'blurry'\n                          : ''\n                      }`}\n                    >\n                      <Card desc={card} />\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          {!sharedDevice && gameMode !== 'puzzle' && (\n            <div className=\"row my-1 text-center fixed-bottom\">\n              {map(players, (info, name) => {\n                return (\n                  <div key={name} className=\"col s4 m3\">\n                    <span className={`player-name bg-${info.color}`}>\n                      {name}: {info.score}\n                    </span>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n\n          {props.handleRedeal && (\n            <div className=\"row mt-3\">\n              <div className=\"col mt-3 mt-md-4\">\n                <button onClick={props.handleRedeal} className=\"btn btn-primary\">\n                  Shuffle\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n        {sharedDevice && (\n          <SharedPlayersDisplay\n            players={bottomPlayers}\n            declarer={declarer}\n            handlePlayerClick={props.handlePlayerClick}\n          />\n        )}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport { map, findKey } from 'lodash'\n\nfunction PlayerList({ isHost, players, setState }) {\n  const host = findKey(players, (player) => player.host)\n\n  return (\n    <div className=\"container mt-4\">\n      <h4>Players:</h4>\n      <ul className=\"collection\">\n        {map(players, (info, name) => {\n          return (\n            <li key={name} className=\"collection-item\">\n              <span className={`player-name`}>\n                {name} {info.host && '(host)'}\n              </span>\n            </li>\n          )\n        })}\n      </ul>\n      {isHost ? (\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setState({\n              gameStarted: true,\n            })\n          }}\n        >\n          Start Game\n        </button>\n      ) : (\n        <p>Waiting for host to start game...</p>\n      )}\n    </div>\n  )\n}\n\nexport default PlayerList\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isEmpty } from 'lodash'\nimport { Link } from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport { updateNickname } from '../redux-helpers'\nimport { cardToggle, isSet, handleGoogleSignIn, handleGoogleRedirect } from '../utils/helpers'\nimport firestore from '../firestore'\n// import Modal from './Modal'\nimport Signout from './Signout'\nimport Board from './Board'\nimport PlayerList from './PlayerList'\nimport Modal from 'react-bootstrap/Modal'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Spinner from 'react-bootstrap/Spinner'\n\nfunction Guest(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const [state, setFullState] = useState({\n    popupVisible: false,\n    setFound: false,\n    displayAnimation: false,\n    animatedSet: [],\n    declarer: '',\n    deck: [],\n    board: [],\n    selected: [],\n    pending: null,\n    gameStarted: false,\n  })\n  const [myName, setMyName] = useState('')\n  const [modalDelayMsg, setDelayMsg] = useState()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current\n  // const [firebaseRefs, setFirebaseRefs] = useState({})\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  const setState = (update) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const resetLocalSelected = () => {\n    const { declarer, selected } = currentState.current\n    if (isEmpty(declarer) && selected.length === 3 && !isSet(selected)) {\n      setState({\n        selected: [],\n      })\n    }\n  }\n\n  const handleCardClick = (card) => {\n    const { declarer, selected } = currentState.current\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, selected)\n    if (newSelected.length > 3) {\n      return\n    }\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name: myName },\n        }\n        console.log('Found set, sending...')\n        sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(resetLocalSelected, 1000)\n      }\n    }\n\n    setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  const handleSetName = (e) => {\n    e.preventDefault()\n    const nameInput = user.nickname\n    if (isEmpty(nameInput)) {\n      return\n    }\n    setMyName(nameInput)\n    const action = {\n      type: 'join',\n      payload: { name: nameInput, uid: user.uid },\n    }\n    sendAction(action)\n  }\n\n  const processUpdate = (doc) => {\n    const updatedState = { ...doc.data() }\n    const { selected: mySelected } = currentState.current\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    // Don't mess with selected cards unless necessary\n    const newSelected =\n      mySelected.length < 3 && isEmpty(updatedState.declarer) ? mySelected : updatedState.selected\n    console.log('New selected', newSelected)\n    setState({\n      ...updatedState,\n      selected: newSelected,\n      popupVisible: false,\n    })\n  }\n\n  const sendAction = (action) => {\n    console.log('Creating on', firebaseRefs.actions)\n    firebaseRefs.actions\n      .add({\n        ...action,\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(function(docRef) {\n        if (action.type === 'found') {\n          const docId = docRef.id\n          console.log('Document written with ID: ', docId)\n          setState({\n            pending: docId,\n          })\n          // TODO: Trigger message if action isnt processed in reasonable time\n        }\n      })\n  }\n\n  useEffect(() => {\n    const { gameName } = props.match.params\n    firebaseRefs.game = firestore.collection('games').doc(gameName)\n    const unsubGames = firebaseRefs.game.onSnapshot((doc) => {\n      processUpdate(doc)\n    })\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n\n    const unsubActions = firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'removed') {\n          const { pending } = currentState.current\n          if (pending === change.doc.id) {\n            console.log('Pending action removed!')\n            setState({\n              pending: null,\n            })\n          }\n        }\n      })\n    })\n\n    return function cleanup() {\n      if (firebaseRefs.game) {\n        unsubGames()\n      }\n      if (firebaseRefs.actions) {\n        unsubActions()\n      }\n    }\n  }, [])\n\n  const { board, deck, selected, declarer, players, popupVisible } = state\n\n  if (userReducer.loading) {\n    return 'Loading profile...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container\">\n        <p>To join a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n        <p>\n          <Link to=\"/lobby\">Back</Link>\n        </p>\n      </div>\n    )\n  }\n  if (!myName) {\n    return (\n      <div className=\"container\">\n        <Signout />\n\n        <h4 className=\"mb-3\">Choose your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"col-12 col-md-4\">\n            <input\n              autoFocus\n              type=\"text\"\n              placeholder=\"your name\"\n              value={user.nickname}\n              onChange={(e) => {\n                dispatch(updateNickname(e.target.value))\n                window.localStorage.setItem('nickname', e.target.value)\n              }}\n            />\n          </div>\n          <div className=\"col-12 col-md-4\">\n            <input className=\"btn btn-primary mt-3 ml-md-3\" type=\"submit\" value=\"Join\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  const { setFound, gameOver, gameStarted } = currentState.current\n\n  if (!gameStarted) {\n    return <PlayerList players={players} isHost={false} />\n  }\n\n  return (\n    <React.Fragment>\n      <Modal show={state.pending && popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p className=\"text-center\">SET!</p>\n          <div className=\"text-center\">\n            <Spinner animation=\"border\" />\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        players={players}\n        setFound={setFound}\n        gameOver={gameOver}\n        // syncing={this.state.syncing}\n        myName={myName}\n        gameMode=\"versus\"\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Guest\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateNickname } from '../redux-helpers'\nimport { Link } from 'react-router-dom'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nimport Signout from './Signout'\nimport Board from './Board'\nimport {\n  handleGoogleRedirect,\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected,\n  isSet,\n  updateGame,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport PlayerList from './PlayerList'\nimport { findKey, isEmpty } from 'lodash'\nimport { Action, MultiState } from '../utils/models'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\n// const firebaseRefs = {}\n\ninterface FirebaseRefs {\n  game: any\n  actions: any\n}\n\nfunction Host() {\n  const userReducer = useSelector((state: any) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current as FirebaseRefs\n\n  const initialDeck = makeDeck()\n  const initialGameState: {\n    deck: string[]\n    board: string[]\n    selected: string[]\n  } = {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n\n  const [gameInProgress, setGameInProgress] = useState<object | undefined>()\n  const [gameTitle, setGameTitle] = useState('')\n  const [activeGameUpdater, setActiveGameUpdater] = useState()\n  const [gameSubscription, setGameSubscription] = useState()\n  const [actionsSubscription, setActionSubscription] = useState()\n\n  const [state, setFullState] = useState<MultiState>({\n    gameTitle: '',\n    players: {},\n    created: false,\n    gameStarted: false,\n    myName: '',\n    setFound: false,\n    declarer: null,\n    gameOver: '',\n    ...initialGameState,\n  })\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  useEffect(() => {\n    if (user && !isEmpty(user.uid)) {\n      firestore\n        .collection('games')\n        .where('creator_uid', '==', user.uid)\n        .get()\n        .then(function(querySnapshot) {\n          querySnapshot.forEach(function(doc) {\n            console.log(doc.id)\n            const oldGame = {\n              ...doc.data(),\n              gameTitle: doc.id,\n            }\n            console.log('Old game: ', oldGame)\n            setGameInProgress(oldGame)\n          })\n        })\n        .catch(function(error) {\n          console.log('Error getting documents: ', error)\n        })\n    }\n  }, [user])\n\n  useEffect(() => {\n    return () => {\n      if (actionsSubscription) {\n        // @ts-ignore\n        actionsSubscription()\n      }\n      if (gameSubscription) {\n        // @ts-ignore\n        gameSubscription()\n      }\n    }\n  }, [gameSubscription, actionsSubscription])\n\n  useEffect(() => {\n    return function() {\n      window.clearInterval(activeGameUpdater)\n    }\n  }, [activeGameUpdater])\n\n  const setState = (update: Partial<MultiState>) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const handleRejectResume = () => {\n    // @ts-ignore\n    const { gameTitle } = gameInProgress\n    firestore\n      .collection('games')\n      .doc(gameTitle)\n      .delete()\n      .then(() => {\n        console.log('Deleted old game')\n        setGameInProgress(undefined)\n      })\n  }\n\n  const handleCardClick = (card: string) => {\n    const { myName } = state\n    if (!state.declarer) {\n      const newSelected = cardToggle(card, state.selected)\n      if (isSet(newSelected)) {\n        updateSelected(newSelected, myName)\n      }\n      setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  const handleRedeal = () => {\n    const newState = reshuffle(state)\n    setAndSendState(newState)\n  }\n\n  const actionsSubscribe = (reference: string | any) => {\n    let doc\n    if (typeof reference === 'string') {\n      doc = firestore.collection('games').doc(reference)\n    } else {\n      doc = reference\n    }\n    const actions = doc.collection('actions')\n    console.log(actions)\n    actions.onSnapshot((snapshot: any) => {\n      console.log('got action snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    return actions\n    const actionSubscription = actions.onSnapshot((snapshot: any) => {\n      console.log('got snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    setActionSubscription(actions)\n  }\n\n  const subscribeToGame = async (gameTitle: string) => {\n    firebaseRefs.game = firestore.collection('games').doc(gameTitle)\n    const gameUpdateId = window.setInterval(() => {\n      updateGame(firebaseRefs.game, {})\n    }, 30000)\n    // @ts-ignore\n    setActiveGameUpdater(gameUpdateId)\n\n    const unsubscribe = actionsSubscribe(firebaseRefs.game)\n    setActionSubscription(unsubscribe)\n  }\n\n  const reloadGame = () => {\n    // @ts-ignore\n    const host = findKey(gameInProgress.players, (player) => player.host)\n    // @ts-ignore\n    const { gameTitle } = gameInProgress\n    setState({ gameTitle })\n    subscribeToGame(gameTitle)\n\n    setState({\n      myName: host,\n      created: true,\n      ...gameInProgress,\n      // @ts-ignore\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  const handleCreateGame = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const { myName, board, deck, selected, players, gameOver } = state\n    const officialTitle = !isEmpty(gameTitle) ? gameTitle : `${myName}'s game`\n    setState({ gameTitle: officialTitle })\n    firebaseRefs.game = firestore.collection('games').doc(officialTitle)\n    firebaseRefs.game.set({\n      creator_uid: user.uid,\n      players,\n      board,\n      deck,\n      selected,\n      gameOver,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    const updateId = window.setInterval(() => {\n      firebaseRefs.game.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    // @ts-ignore\n\n    setActiveGameUpdater(updateId)\n\n    firebaseRefs.actions = actionsSubscribe(officialTitle)\n\n    console.log(firebaseRefs.actions)\n    // firebaseRefs.actions.onSnapshot((snapshot: any) => {\n    //   console.log('got action snapshot')\n    //   snapshot.docChanges().forEach((change: any) => {\n    //     if (change.type === 'added') {\n    //       const action = change.doc.data() as Action\n    //       console.log(action)\n    //       processAction(action)\n    //       firebaseRefs.actions.doc(change.doc.id).delete()\n    //     }\n    //     if (change.type === 'removed') {\n    //       console.log('Removed action: ', change.doc.data())\n    //     }\n    //   })\n    // })\n\n    // const unsubscribe = actionsSubscribe(officialTitle)\n    // setActionSubscription(unsubscribe)\n\n    setState({\n      created: true,\n    })\n  }\n\n  const handleSetName = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setState({\n      myName: user.nickname,\n      players: {\n        [user.nickname]: {\n          host: true,\n          uid: user.uid,\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  const markPointForDeclarer = (declarer: string) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = currentState.current\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    if (gameOver) {\n      window.setTimeout(() => {\n        firebaseRefs.game.delete()\n        clearInterval(activeGameUpdater)\n      }, 3000)\n    }\n\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  const processAction = (action: Action) => {\n    const { type, payload } = action\n    const { players, declarer, board } = currentState.current\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            host: false,\n            uid: payload.uid,\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer && verifySelectedOnBoard(board, payload.selected)) {\n          updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  const removeSet = (selected: string[], declarer: string) => {\n    if (isSet(selected)) {\n      const newScores = markPointForDeclarer(declarer)\n      const newState: Partial<MultiState> = {\n        ...currentState.current,\n        setFound: false,\n        declarer: null,\n        ...newScores,\n        ...removeSelected(currentState.current),\n      }\n      setAndSendState(newState)\n    }\n  }\n\n  const setAndSendState = (update: Partial<MultiState>) => {\n    console.log('updating', currentState.current.gameTitle)\n    setState(update)\n    updateGame(firebaseRefs.game, update)\n  }\n\n  const verifySelectedOnBoard = (board: string[], selected: string[]) => {\n    for (let i = 0; i < selected.length; i++) {\n      if (!board.includes(selected[i])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const updateSelected = (newSelected: string[], declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    setAndSendState(newState)\n    if (newState.setFound) {\n      setTimeout(() => {\n        removeSet(newSelected, declarer)\n      }, 4000)\n    }\n  }\n\n  const { board, deck, selected, declarer, players, created, gameStarted, myName } = state\n\n  if (userLoading) {\n    return 'Loading...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container mt-4\">\n        <p>To host a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  if (gameInProgress && !state.created) {\n    return (\n      <div className=\"container\">\n        <p>You are already hosting a game. Return to it?</p>\n        <button className=\"btn btn-primary mr-5\" onClick={() => reloadGame()}>\n          YES!\n        </button>\n        <button className=\"btn btn-danger\" onClick={handleRejectResume}>\n          No, remove it\n        </button>\n      </div>\n    )\n  }\n\n  if (myName === '') {\n    return (\n      <div className=\"container\">\n        <Signout />\n        <h4>Enter your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"row mb-4\">\n            <div className=\"col-md-3 mb-3 mr-md-4\">\n              <input\n                autoFocus\n                placeholder=\"hostname\"\n                value={user.nickname}\n                onChange={(e) => {\n                  dispatch(updateNickname(e.target.value))\n                  window.localStorage.setItem('nickname', e.target.value)\n                }}\n              />\n            </div>\n            <div className=\"col-md-3\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n        <div>\n          <p>\n            <Link to=\"/\">Main Menu</Link>\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!created) {\n    return (\n      <div className=\"container mt-4\">\n        <h4>Name your game:</h4>\n        <form onSubmit={handleCreateGame}>\n          <div className=\"mb-3\">\n            <input\n              autoFocus\n              placeholder={`${myName}'s game`}\n              onChange={(e) => {\n                setGameTitle(e.target.value)\n              }}\n              value={gameTitle}\n            />\n          </div>\n          <div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  if (!gameStarted) {\n    return <PlayerList isHost={true} players={players} setState={setAndSendState} />\n  }\n\n  return (\n    <Board\n      board={board}\n      deck={deck}\n      selected={selected}\n      declarer={declarer}\n      handleCardClick={handleCardClick}\n      // handleDeclare={this.handleDeclare}\n      handleRedeal={handleRedeal}\n      players={players}\n      setFound={state.setFound}\n      gameOver={state.gameOver}\n      myName={state.myName}\n      gameMode=\"versus\"\n    />\n  )\n}\n\nexport default Host\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot((snapshot) => {\n      const newGames = []\n      snapshot.forEach((doc) => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { games, init } = this.state\n    console.log(games)\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter((g) => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col-8 col-md-6\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <p>\n                  Click <Link to=\"/host\">here</Link> to host one\n                </p>\n                <p>\n                  <Link className=\"btn btn-primary\" to=\"/\">\n                    Back\n                  </Link>\n                </p>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"text-center my-4\">Available games</h4>\n            <div className=\"row align-content-center\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col-6 col-md-4\" key={game.name}>\n                    <div className=\"card available-game\">\n                      <div className=\"my-auto text-center\">\n                        <Link to={`/guest/${game.name}`}>{game.name}</Link>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div className=\"row\">\n              <div className=\"col mt-4\">\n                <Link className=\"btn btn-primary\" to=\"/\">\n                  Back\n                </Link>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Signout from './Signout'\nimport { handleGoogleRedirect } from '../utils/helpers'\nimport * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\nfunction Login(props) {\n  const user = useSelector((state) => state.user)\n\n  useEffect(() => {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(function(result) {\n        if (result.credential) {\n          // This gives you a Google Access Token. You can use it to access the Google API.\n          var token = result.credential.accessToken\n          // ...\n        }\n        // The signed-in user info.\n        var user = result.user\n        console.log(token, user)\n      })\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code\n        var errorMessage = error.message\n        // The email of the user's account used.\n        var email = error.email\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential\n        // ...\n      })\n  }, [])\n\n  if (!user) {\n    return (\n      <div className=\"container\">\n        <button onClick={handleGoogleRedirect} className=\"btn\">\n          Sign in\n        </button>\n      </div>\n    )\n  }\n  return (\n    <div className=\"container\">\n      <Signout />\n    </div>\n  )\n}\n\nexport default Login\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nfunction MenuItem(props) {\n  const { url, cardName, description } = props\n  return (\n    <div className=\"col-9 col-md-4\">\n      <Link to={url}>\n        <div className=\"card shadow-sm mb-3 mb-md-4\">\n          <Card desc={cardName} />\n        </div>\n      </Link>\n      <p className=\"text-center\">{description}</p>\n    </div>\n  )\n}\n\nfunction Main() {\n  const menuItems = [\n    {\n      url: '/solo',\n      cardName: '0012',\n      description: 'Solo/Local',\n    },\n    {\n      url: '/lobby',\n      cardName: '1121',\n      description: 'Join Game',\n    },\n    {\n      url: '/host',\n      cardName: '2200',\n      description: 'Host Game',\n    },\n  ]\n  return (\n    <div className=\"container mt-3 mt-md-5\">\n      <h1 className=\"d-none d-md-block text-center mb-3 mb-md-5\">Main Menu</h1>\n      <div className=\"row justify-content-center\">\n        {menuItems.map((item, i) => {\n          return <MenuItem key={`card-${i}`} {...item} />\n        })}\n      </div>\n      <div className=\"d-none d-md-block\">\n        <hr />\n        <p>\n          <Link to=\"/rules\">Rules</Link>\n        </p>\n        <p>\n          <Link to=\"/stats\">View Statistics</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport Modal from 'react-bootstrap/Modal'\n\nconst SetModal = ({ children, visible: popupVisible }) => {\n  return (\n    <>\n      <Modal show={popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{children}</Modal.Body>\n        <Modal.Footer></Modal.Footer>\n      </Modal>\n    </>\n  )\n\n  return (\n    <div className={`modal popup-message ${popupVisible ? 'show' : ''}`}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default SetModal\n","import React, { Component, Fragment } from 'react'\nimport {\n  cardToggle,\n  countSets,\n  handleGoogleRedirect,\n  isSet,\n  makeDeck,\n  nameThird,\n  removeSelected as removeSelectedCards,\n  reshuffle,\n} from '../utils/helpers'\nimport { cloneDeep, isEqual, shuffle } from 'lodash'\n\nimport Board from './Board'\nimport { Link } from 'react-router-dom'\n// import Slider from 'react-rangeslider'\nimport Modal from './Modal'\nimport Signout from './Signout'\nimport axios from 'axios'\nimport { colors } from '../config'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = (cardsOnBoard) => {\n  const getMinSets = (cardsOnBoard) => {\n    return Math.round((cardsOnBoard - 3) / 3)\n  }\n\n  const minSets = getMinSets(cardsOnBoard)\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle(\n      {\n        deck: initialDeck,\n      },\n      { boardSize: cardsOnBoard, minimumSets: minSets },\n    ),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  gameOver: false,\n  startTime: null,\n  elapsedTime: null,\n  setsFound: [],\n  setsOnBoard: null,\n  cardsOnBoard: 12,\n  popupVisible: false,\n  popUpText: 'SET!',\n}\n\nconst sortSet = (set) => {\n  return set.sort()\n}\n\nclass Puzzle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    const { cardsOnBoard } = this.state\n    const gameState = createGameState(cardsOnBoard)\n    const startTime = new Date()\n    this.setState({\n      gameStarted: true,\n      startTime,\n      elapsedTime: 0,\n      ...gameState,\n      setsOnBoard: countSets(gameState.board),\n    })\n    window.timeId = setInterval(() => {\n      const elapsedTime = Math.round((new Date().getTime() - startTime.getTime()) / 1000)\n      this.setState({\n        elapsedTime,\n      })\n    }, 1000)\n  }\n\n  componentDidMount = () => {}\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleDeclare = () => {\n    return\n  }\n\n  resetLocalSelected = (noCheck = false) => {\n    this.setState((currentState) => {\n      if (currentState.selected.length === 3) {\n        if (noCheck || !isSet(currentState.selected)) {\n          return {\n            selected: [],\n          }\n        }\n      }\n    })\n  }\n\n  handleCardClick = (card) => {\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        console.log('Set found')\n        this.setState((currentState) => {\n          window.setTimeout(() => {\n            this.setState({\n              popupVisible: false,\n            })\n            this.resetLocalSelected(true)\n          }, 2000)\n          const { setsFound } = currentState\n          const isNewSet = setsFound\n            .map((set) => {\n              const result = isEqual(newSelected.sort(), set)\n              return !result\n            })\n            .every((result) => result)\n          if (!isNewSet) {\n            return {\n              popupVisible: true,\n              popUpText: 'Already found!',\n            }\n          }\n          const newSetsFound = [...setsFound, newSelected.sort()]\n          return {\n            setsFound: newSetsFound,\n            popupVisible: true,\n            popUpText: 'SET!',\n          }\n        })\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1200)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  handleRedeal = () => {\n    return\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameStarted,\n      setFound,\n      setsFound,\n      popupVisible,\n    } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          {user !== null && <Signout />}\n          <h3>Puzzle Mode</h3>\n          <p>Find as many sets as you can</p>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              {/* <Slider\n                ref={(input) => {\n                  this.difficultyInput = input\n                }}\n                min={2}\n                max={4}\n                orientation=\"horizontal\"\n                tooltip={true}\n                // labels={{ 2: 6, 3: 9, 4: 12 }}\n                format={(v) => 3 * v}\n                value={Number(this.state.cardsOnBoard) / 3}\n                onChange={(cards) => {\n                  this.setState({\n                    cardsOnBoard: cards * 3,\n                  })\n                }}\n              /> */}\n              <form onSubmit={this.handleStartGame}>\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n            <div className=\"row\">\n              <div style={{ marginTop: '48px' }} className=\"col s12\">\n                <p style={{ marginTop: '36px' }}>\n                  <Link to=\"/solo\">Back to Solo Menu</Link>\n                </p>\n                {!user && (\n                  <Fragment>\n                    <hr />\n                    <p>To save your stats, sign in with your Google account.</p>\n\n                    <p>\n                      <button onClick={handleGoogleRedirect} className=\"btn\">\n                        Sign in\n                      </button>\n                    </p>\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">{this.state.popUpText}</p>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"puzzle\"\n          setsFound={setsFound}\n          startTime={this.state.startTime}\n          elapsedTime={this.state.elapsedTime}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Puzzle)\n","import React from 'react'\nimport Card from './Card'\nimport { Link } from 'react-router-dom'\n\nfunction ShowCard({ desc }) {\n  return (\n    <div className=\"col-4 my-2\">\n      <div className=\"card\">\n        <Card desc={desc} />\n      </div>\n    </div>\n  )\n}\n\nfunction Rules() {\n  const displayCards = ['0000', '1210', '0022', '2101', '0120', '2011']\n\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find sets of three cards that are either the same or different\n        along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        {displayCards.map((c, i) => {\n          return <ShowCard key={i} desc={c} />\n        })}\n      </div>\n      <p>You'll notice that every card has four different characteristics:</p>\n      <ul className=\"browser-default\">\n        <li>color</li>\n        <li>number</li>\n        <li>shape</li>\n        <li>fill</li>\n      </ul>\n      <p>and each of those characteristics has three different possibilities.</p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>Which you can describe as follows:</p>\n      <ul className=\"browser-default\">\n        <li>color - SAME</li>\n        <li>shape - SAME</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Therefore, the three cards form a set.</p>\n      <p>Here is another set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - SAME</li>\n      </ul>\n      <p>This is not a set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>fill - SAME</li>\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - NOT THE SAME OR DIFFERENT!</li>\n      </ul>\n      <p>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Each characteristic is different for all three cards, so this is a set.</p>\n      <p>\n        <Link to=\"/\">Back Home</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { Component } from 'react'\nimport {\n  cardToggle,\n  isSet,\n  makeDeck,\n  nameThird,\n  removeSelected as removeSelectedCards,\n  reshuffle,\n} from '../utils/helpers'\nimport { cloneDeep, shuffle } from 'lodash'\n\nimport Board from './Board'\nimport { Link } from 'react-router-dom'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\n\nconst debugging = false\n\nconst config = {\n  declareTime: 5000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst createPlayers = (num) => {\n  const players = {}\n  for (let i = 0; i < num; i++) {\n    players[i] = {\n      score: 0,\n      color: config.colors[i],\n    }\n  }\n  return players\n}\n\nconst initialState = {\n  numPlayers: null,\n  players: createPlayers(2),\n  gameStarted: false,\n  name: '1',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: '',\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass SharedDevice extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (numPlayers) => {\n    this.setState({\n      numPlayers,\n      players: createPlayers(numPlayers),\n    })\n    this.setState({\n      gameStarted: true,\n    })\n  }\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.declareTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer } = this.state\n    if (!setFound && declarer !== null) {\n      const newSelected = cardToggle(card, this.state.selected)\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, declarer)\n      }\n    }\n  }\n\n  handlePlayerClick = (clickerName) => {\n    const { declarer } = this.state\n    if (declarer === null) {\n      this.performDeclare(clickerName)\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, numPlayers, setFound } = this.state\n    if (!numPlayers) {\n      return (\n        <div className=\"container\">\n          <h4 className=\"mb-4\">Choose Number of Players</h4>\n          <div className=\"row text-center\">\n            {[...Array(6).keys()].map((i) => {\n              return (\n                <div\n                  key={`players-${i}`}\n                  onClick={() => {\n                    this.handleStartGame(i + 1)\n                  }}\n                  className=\"mb-3 col-4\"\n                >\n                  <button className=\"btn btn-info\">{i + 1}</button>\n                </div>\n              )\n            })}\n          </div>\n          <div>\n            <p>\n              <Link to=\"/solo\">Back</Link>\n            </p>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handlePlayerClick={this.handlePlayerClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          sharedDevice={true}\n          gameMode=\"shared-device\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SharedDevice\n","import { GameState, Players, SoloState } from '../utils/models'\nimport React, { Component, Fragment } from 'react'\nimport {\n  cardToggle,\n  handleGoogleRedirect,\n  isSet,\n  makeDeck,\n  nameThird,\n  removeSelected as removeSelectedCards,\n  reshuffle,\n} from '../utils/helpers'\nimport { cloneDeep, isEmpty, shuffle } from 'lodash'\n\nimport Board from './Board'\nimport InputRange from 'react-input-range'\nimport { Link } from 'react-router-dom'\nimport Signout from './Signout'\n// import Slider from 'react-rangeslider'\nimport axios from 'axios'\nimport { colors } from '../config'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst calculateIntervalFromDifficulty = (d) => {\n  let diff = Number(d)\n  if (Number.isNaN(diff)) {\n    diff = 1\n  }\n  const interval = 24000 / (5 * diff)\n  return interval\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  const selected = []\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected,\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  myName: 'you',\n  setFound: false,\n  declarer: null,\n  gameOver: null,\n  cpuTurnInterval: 1000,\n  startTime: new Date(),\n}\n\nclass Solo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n      difficulty: 2,\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n      startTime: new Date(),\n    })\n\n    console.log(`Turns every ${this.state.cpuTurnInterval} ms`)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const savedDifficulty = window.localStorage.getItem('soloDifficulty')\n    let difficulty = savedDifficulty ? Number(savedDifficulty) : 2\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      difficulty,\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    if (this.state.cpuTimer !== null) {\n      window.clearInterval(this.state.cpuTimer)\n    }\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver } = this.state\n    if (declarer || gameOver) {\n      return\n    }\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      if (this.state.cpuTimer !== null) {\n        clearInterval(this.state.cpuTimer)\n      }\n      this.setState({\n        cpuAnimation: window.setInterval(this.animateCpuChoice, 900),\n      })\n    }\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    if (cpuCopy.length === 0) {\n      return\n    }\n    const newSelected = [...selected, cpuCopy.pop()]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      if (this.state.cpuAnimation !== null) {\n        clearInterval(this.state.cpuAnimation)\n      }\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (myName, delta) => {\n    const { players } = this.state\n    const newScore = players[myName].score + delta\n    const newPlayers = update(players, {\n      [myName]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (declarer && !isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: undefined,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const { user } = this.props.userReducer\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    if (!isEmpty(gameOver)) {\n      const uid = (user && user.uid) || 'anonymous'\n      const player_won = declarer == 'you' ? 1 : 0\n      const total_time = Math.round((new Date().getTime() - this.state.startTime.getTime()) / 1000)\n      axios\n        .post('/api/game', {\n          uid,\n          total_time,\n          player_won,\n          difficulty_level: this.state.difficulty,\n          winning_score: newScore,\n        })\n        .then(() => {\n          console.log('Game sent')\n        })\n        .catch((err) => {\n          console.log('Error sending game')\n        })\n    }\n    this.setState(newState)\n    return newState\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n      this.setState({\n        undeclareId: window.setTimeout(() => {\n          this.expireDeclare()\n        }, config.turnTime),\n      })\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      this.state.undeclareId && clearTimeout(this.state.undeclareId)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer, myName } = this.state\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(myName)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (declarer && isSet(selected)) {\n      console.log('Set found, removing')\n      this.markPointForDeclarer(declarer)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: undefined,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    this.state.cpuTimer && clearInterval(this.state.cpuTimer)\n    setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      // GameSettings\n      return (\n        <div className=\"container main-content\">\n          {user !== null && <Signout />}\n          <h3 className=\"text-center mb-4\">Solo Play vs. Computer</h3>\n          <h4 className=\"mb-4\">Choose difficulty level:</h4>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <form onSubmit={this.handleStartGame}>\n                <div className=\"col-10 col-md-6 mb-5\">\n                  <InputRange\n                    maxValue={8}\n                    minValue={1}\n                    //@ts-ignore\n                    value={this.state.difficulty}\n                    //@ts-ignore\n                    onChange={(difficulty) => {\n                      //@ts-ignore\n                      const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n                      window.localStorage.setItem('soloDifficulty', difficulty.toString())\n                      //@ts-ignore\n                      this.setState({\n                        cpuTurnInterval,\n                        // @ts-ignore\n                        difficulty,\n                      })\n                    }}\n                  />\n                </div>\n                <input type=\"submit\" value=\"Start\" className=\"btn btn-primary\" />\n              </form>\n              <p style={{ marginTop: '24px' }}>First to {config.playingTo} points is the winner</p>\n            </div>\n            <div className=\"row mt-4\">\n              <p>Other Game Options:</p>\n              <ul style={{ listStyleType: 'none' }}>\n                <li className=\"mb-4\">\n                  <Link to=\"/local\">Local Multiplayer</Link>\n                </li>\n                <li className=\"mb-4\">\n                  <Link to=\"/training\">Training</Link>\n                </li>\n                <hr />\n                <li>\n                  <Link to=\"/\">Back to Main Menu</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          {!user && (\n            <div className=\"row mt-4\">\n              <div>\n                <p>To save your game statistics, sign in with your Google account.</p>\n\n                <p>\n                  <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n                    Sign in\n                  </button>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={() => {}}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.myName}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"versus\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Solo)\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { handleGoogleRedirect } from '../utils/helpers'\n\nimport axios from 'axios'\n\nfunction Stats(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n  const [stats, setStats] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const getStats = async () => {\n      axios.get(`/api/user/stats/${user.uid}`).then((response) => {\n        setStats(response.data)\n      })\n    }\n\n    if (!userReducer.loading && user !== null) {\n      getStats()\n    }\n  }, [userReducer.loading])\n\n  if (userReducer.loading) {\n    return 'Loading...'\n  }\n\n  if (user === null) {\n    return (\n      <div className=\"container mt-4\">\n        <p>Sign in to view stats</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mt-2 mt-md-4\">\n      <h3>Statistics</h3>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Difficulty</th>\n            <th>Games Played</th>\n            <th>Winning Percentage</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {stats &&\n            stats.map((row, i) => {\n              return (\n                <tr key={`stats-${i}`}>\n                  <td>{row.difficulty_level}</td>\n                  <td>{row.games_played}</td>\n                  <td>{Math.round(100 * (row.games_won / row.games_played))}%</td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n      <p>\n        <Link to=\"/\">Main Menu</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Stats\n","import React, { Component, Fragment, useEffect, useRef, useState } from 'react'\nimport { getBoardStartingWithSet, isSet } from '../utils/helpers'\n\nimport Board from './Board'\nimport Button from 'react-bootstrap/Button'\nimport { Link } from 'react-router-dom'\nimport Modal from 'react-bootstrap/Modal'\nimport { colors } from '../config'\nimport useInterval from '../useInterval'\n\nconst GameOverModal = ({ handleClose, show, finalScore, handleHide }) => {\n  return (\n    <>\n      <Modal\n        // onHide={() => {\n        //   handleClose()\n        // }}\n        show={show}\n      >\n        <Modal.Body>\n          <h3 className=\"text-center mt-3\">GAME OVER!</h3>\n          <div className=\"d-flex flex-column justify-content-center\">\n            <p className=\"text-center my-2\">Final Score: {finalScore} </p>\n            <p className=\"text-center my-2\">\n              Best Score: {localStorage.getItem('highScoreTraining') || 0}\n            </p>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <button className=\"btn btn-primary\" onClick={handleClose}>\n            <Link style={{ color: 'white', textDecoration: 'none' }} to=\"/\">\n              Main Menu\n            </Link>\n          </button>\n          <Button onClick={handleClose} variant=\"secondary\">\n            Restart\n          </Button>\n          <Button onClick={handleHide} variant=\"secondary\">\n            Hide\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst Training = () => {\n  const [board, setBoard] = useState([])\n  const [selected, setSelected] = useState([])\n  const [score, setScore] = useState(0)\n\n  const [startTime, setStartTime] = useState(null)\n  const [elapsedTime, setElapsedTime] = useState(0)\n\n  const [turnStartTime, setTurnStartTime] = useState(null)\n  const [turnTimeTotal, setTurnTimeTotal] = useState(99)\n  const [timeSinceTurnStart, setTimeSinceTurnStart] = useState(0)\n\n  const [timeRemaining, setTimeRemaining] = useState(99)\n\n  const timeRef = useRef(null)\n  timeRef.current = timeRemaining\n\n  const [gameOver, setGameOver] = useState(false)\n  const [modalHidden, setModalHidden] = useState(false)\n\n  const calculateTurnTime = (score) => {\n    const calc = Math.round(6 - Math.log2(score + 1))\n    console.log(calc)\n    return calc\n  }\n\n  const startTurn = ({ score }) => {\n    setTurnStartTime(Date.now())\n    setTurnTimeTotal(calculateTurnTime(score))\n  }\n\n  useEffect(() => {\n    setStartTime(Date.now())\n    startTurn({ score: 0 })\n  }, [])\n\n  useInterval(\n    () => {\n      const now = Date.now()\n      const elapsed = Math.round((now - startTime) / 1000)\n      const timeSinceTurnStart = Math.round((now - turnStartTime) / 1000)\n      setElapsedTime(elapsed)\n      setTimeSinceTurnStart(timeSinceTurnStart)\n      setTimeRemaining(turnTimeTotal - timeSinceTurnStart)\n\n      if (turnTimeTotal - timeSinceTurnStart < 0) {\n        setGameOver(true)\n      }\n    },\n    gameOver ? null : 250,\n  )\n\n  const getNewBoard = () => {\n    const { board, deck } = getBoardStartingWithSet({ boardSize: 8 })\n    setBoard([...board.slice(0, 2), '0333', ...board.slice(2)])\n    setSelected(board.slice(0, 2))\n  }\n\n  useEffect(() => {\n    getNewBoard()\n  }, [])\n\n  const handleCardClick = (v) => {\n    console.log('handleCardClick', v)\n    if (isSet([...selected, v])) {\n      console.log('yes!')\n      setScore(score + 1)\n      getNewBoard()\n      startTurn({ score: score + 1 })\n    } else {\n      console.log('no!')\n      setSelected([...selected, v])\n      if (Number(localStorage.getItem('highScoreTraining')) < score) {\n        localStorage.setItem('highScoreTraining', score)\n      }\n      setGameOver(true)\n    }\n  }\n\n  const reset = () => {\n    setModalHidden(false)\n    setScore(0)\n    setGameOver(false)\n    getNewBoard()\n    setStartTime(Date.now())\n    startTurn({ score: 0 })\n  }\n\n  // console.log(selected)\n  return (\n    <React.Fragment>\n      <Board\n        board={board}\n        deck={[]}\n        selected={selected}\n        declarer={null}\n        handleCardClick={handleCardClick}\n        handleDeclare={() => {}}\n        players={{\n          you: {\n            name: 'you',\n            score,\n            color: 'light-blue',\n          },\n        }}\n        setFound={false}\n        gameOver={gameOver}\n        myName={'you'}\n        resetGame={() => {}}\n        solo={true}\n        gameMode=\"training\"\n        elapsedTime={elapsedTime}\n        timeLeft={timeRemaining}\n      />\n      <GameOverModal\n        show={gameOver && !modalHidden}\n        finalScore={score}\n        handleClose={reset}\n        handleHide={() => setModalHidden(true)}\n      />\n      {gameOver && (\n        <div className=\"d-flex justify-content-center\">\n          <button className=\"btn btn-primary\" onClick={reset}>\n            Reset\n          </button>\n        </div>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default Training\n","import React, { useEffect, useRef, useState } from 'react'\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n","import React, { Component, Fragment } from 'react'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\n\nimport Guest from './Guest'\nimport Host from './Host'\nimport Lobby from './Lobby'\nimport Login from './Login'\nimport Main from './Main'\nimport Puzzle from './Puzzle'\nimport Rules from './Rules'\nimport SharedDevice from './SharedDevice'\nimport Solo from './Solo'\nimport Stats from './Stats'\nimport Training from './Training'\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/local\" component={SharedDevice} />\n            <Route path=\"/rules\" component={Rules} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/stats\" component={Stats} />\n            <Route path=\"/puzzle\" component={Puzzle} />\n            <Route path=\"/training\" component={Training} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default Routes\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\n// import 'firebase/firestore'\n// import firestore from '../firestore'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\n\nfunction App(props) {\n  const [user, setUser] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const nickname = window.localStorage.getItem('nickname') || user.displayName.split(' ')[0]\n        const myUser = {\n          displayName: user.displayName,\n          email: user.email,\n          emailVerified: user.emailVerified,\n          photoURL: user.photoURL,\n          isAnonymous: user.isAnonymous,\n          uid: user.uid,\n          providerData: user.providerData,\n          nickname,\n        }\n        dispatch(updateUser({ loading: false, user: myUser }))\n        axios\n          .get(`/api/user/${user.uid}`)\n          .then((result) => {\n            console.log('User is registered')\n          })\n          .catch((err) => {\n            if (err.response && err.response.status === 404) {\n              console.log('User not registered')\n              axios\n                .post('/api/user', {\n                  uid: user.uid,\n                  info: myUser,\n                })\n                .then(() => {\n                  console.log('User registered successfully')\n                })\n                .catch((err) => {\n                  console.log('Error registering user', err)\n                })\n            } else {\n              console.log('An error occurred trying to GET user info')\n            }\n          })\n      } else {\n        console.log('Not signed in')\n        dispatch(updateUser({ loading: false, user: null }))\n      }\n    })\n  }, [])\n\n  return <Routes />\n}\n\nexport default App\n","import './styles/bts/bootstrap.scss'\nimport './styles/bts/index.scss'\n\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport store from './redux-helpers'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}