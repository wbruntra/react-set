{"version":3,"sources":["redux-helpers.ts","firebaseConfig.js","firestore.js","components/Signout.js","utils/helpers.tsx","components/Card.js","components/GameOver.js","config.js","components/TopBar.js","components/Board.js","components/PlayerList.js","components/Host.tsx","components/Guest.js","components/Lobby.js","components/Solo.tsx","components/Main.js","components/Rules.js","components/Login.js","components/SharedDevice.js","components/Stats.js","components/Modal.js","components/Puzzle.js","components/Routes.js","components/App.js","index.js","assets/sad_trombone.mp3","assets/applause.mp3"],"names":["updateUser","user","type","payload","updateNickname","nickname","defaultUser","loading","reducers","state","action","update","$set","store","createStore","combineReducers","composeWithDevTools","applyMiddleware","reduxThunk","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firestore","Signout","dispatch","useDispatch","history","useHistory","className","style","cursor","onClick","auth","signOut","then","console","log","push","range","n","Array","keys","displaySet","tuple","rowSize","matrix","map","i","j","includes","join","countSets","board","debug","returnWhenFound","count","candidate","a","length","b","c","isSet","makeDeck","deck","forEach","s","f","card","selected","Number","cardToggle","filter","reshuffle","boardSize","minimumSets","newDeck","shuffle","slice","removeSelected","newCards","newBoard","index","indexOf","handleGoogleRedirect","provider","GoogleAuthProvider","signInWithRedirect","updateGame","reference","data","game","collection","doc","lastUpdate","FieldValue","serverTimestamp","config","Squiggle","fill","color","strokeWidth","width","height","xmlns","id","y","x","display","overflow","stroke","transform","d","fillOpacity","strokeOpacity","Shape","shape","padding","ry","rx","cy","cx","points","Card","Component","colors","0","1","2","white","getFill","this","drawShape","props","desc","split","render","number","patternTransform","patternUnits","x1","y1","x2","y2","key","viewBox","GameOver","winnerName","gameOver","myName","solo","useSelector","soundEffect","applause","sadTrombone","src","autoPlay","finalSound","to","TopBar","gameMode","declarer","setsFound","startTime","elapsedTime","sets","justifyContent","seconds","mm","Math","floor","ss","pad","formatTime","SharedPlayersDisplay","players","handlePlayerClick","info","name","score","Board","useState","setSets","window","innerHeight","setWindowHeight","setFound","sharedDevice","cpuGuessCounter","shownBoard","paused","random","toString","useEffect","resize","debounce","addEventListener","removeEventListener","process","borderColor","get","getBorderColor","isEmpty","playersArray","topBoxes","ceil","topPlayers","bottomPlayers","Object","Modal","show","Header","Title","Body","host","handleCardClick","handleRedeal","handlePause","PlayerList","isHost","setState","findKey","player","gameStarted","turnTime","playingTo","Host","userReducer","userLoading","firebaseRefs","useRef","current","initialDeck","initialGameState","gameInProgress","setGameInProgress","gameTitle","setGameTitle","activeGameUpdater","setActiveGameUpdater","gameSubscription","actionsSubscription","setActionSubscription","created","setFullState","currentState","uid","where","querySnapshot","oldGame","catch","error","clearInterval","handleRejectResume","delete","undefined","actionsSubscribe","actions","onSnapshot","snapshot","docChanges","change","processAction","subscribeToGame","gameUpdateId","setInterval","unsubscribe","handleCreateGame","e","preventDefault","officialTitle","set","creator_uid","updateId","handleSetName","newPlayers","setAndSendState","verifySelectedOnBoard","updateSelected","removeSet","newScores","newScore","$merge","setTimeout","markPointForDeclarer","newState","newSelected","reloadGame","onSubmit","autoFocus","placeholder","value","onChange","target","localStorage","setItem","Guest","popupVisible","displayAnimation","animatedSet","pending","setMyName","resetLocalSelected","nameInput","sendAction","add","docRef","docId","gameName","match","params","unsubGames","updatedState","mySelected","processUpdate","unsubActions","Fragment","Spinner","animation","Lobby","constructor","super","componentWillUnmount","newGame","init","games","componentDidMount","gamesRef","newGames","activeGames","g","updated","toMillis","now","Date","getTime","round","marginTop","calculateIntervalFromDifficulty","diff","isNaN","interval","newSets","numSets","createGameState","initialState","you","cpu","cpuTurnInterval","Solo","handleStartGame","activateCpu","savedDifficulty","getItem","difficulty","cpuTimer","delay","initCpuTimerId","clearTimeout","initialTurnInterval","cpuTurn","stopCpu","prevState","msg","toFixed","logTime","features","missing","result","trim","nameThird","cpuFound","cpuAnimation","animateCpuChoice","cpuCopy","pop","updatePlayerScore","delta","expireDeclare","timeDeclared","player_won","total_time","axios","post","difficulty_level","winning_score","err","performDeclare","undeclareId","removeSelectedCards","unsetTimers","timeoutId","resetGame","cloneDeep","handleDeclare","maxValue","minValue","listStyleType","connect","MenuItem","url","cardName","description","Main","item","ShowCard","Rules","Login","getRedirectResult","credential","token","accessToken","code","message","email","declareTime","cpuDelay","createPlayers","num","numPlayers","SharedDevice","undeclareID","clickerName","Stats","stats","setStats","getStats","response","row","games_played","games_won","SetModal","children","visible","Footer","cardsOnBoard","minSets","getMinSets","setsOnBoard","popUpText","Puzzle","gameState","timeId","noCheck","isEqual","sort","every","ref","input","difficultyInput","min","max","orientation","tooltip","format","v","cards","Routes","exact","path","component","App","onAuthStateChanged","displayName","myUser","emailVerified","photoURL","isAnonymous","providerData","status","ReactDOM","document","getElementById","module","exports"],"mappings":"4PAmBO,MAGMA,EAAcC,IAAD,CACxBC,KAJyB,cAKzBC,QAASF,IAOEG,EAAkBC,IAAD,CAC5BH,KAZ6B,kBAa7BC,QAASE,IAGEC,EAAoB,CAAEC,SAAS,EAAMN,KAAM,IAqBlDO,EAAW,CACfP,KApBkB,CAACQ,EAAQH,EAAaI,KACxC,OAAQA,EAAOR,MACb,IArBuB,cAsBrB,OAAO,eACFO,EADL,GAEKC,EAAOP,SAEd,IAzB2B,kBA6BzB,OAHiBQ,IAAOF,EAAO,CAC7BR,KAAM,CAAEI,SAAU,CAAEO,KAAMF,EAAOP,YAGrC,IAAK,SACH,MAAO,CAAEI,SAAS,EAAON,KAAM,MACjC,QACE,OAAOQ,KAaEI,MALDC,sBACZC,0BAAgBP,GAChBQ,8BAAoBC,0BAAgBC,O,6BCpDvBC,MAXQ,CACrBC,OAAQ,0CACRC,WAAY,2BACZC,YAAa,kCACbC,UAAW,WACXC,cAAe,uBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCHjBC,gBAAuBT,GAKRU,MAFGD,cCkCHE,MA1Bf,WACE,MAAMC,EAAWC,cACXC,EAAUC,cAahB,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,OAAQ,YACrC,uBAAGF,UAAU,yBACX,uBAAGA,UAAU,iBAAiBG,QAdpB,KACdV,IACGW,OACAC,UACAC,KAAK,KACJV,EHEc,CACpB7B,KAAM,WGFAwC,QAAQC,IAAI,eACZV,EAAQW,KAAK,SAOb,e,OC1BD,MAAMC,EAASC,GACb,IAAIC,MAAMD,GAAGE,QA6BhBC,EAAa,CAACC,EAAsBC,EAAkB,KAC1D,IAAIC,EAEFA,EADc,IAAZD,EACON,EAAM,GAAGQ,IAAKC,GACTT,EAAM,GAAGQ,IAAKE,GACpBL,EAAMM,SAAS,EAAIF,EAAIC,GAClB,IAEF,KAEEE,KAAK,KAGTZ,EAAM,GAAGQ,IAAKC,GACTT,EAAM,GAAGQ,IAAKE,GACpBL,EAAMM,SAAS,EAAIF,EAAIC,GAClB,IAEF,KAEEE,KAAK,KAGpBf,QAAQC,IAAIS,EAAOK,KAAK,QAgBbC,EAAY,CAACC,GAAmBC,SAAQ,EAAOC,mBAAkB,GAAU,MACtF,IAAIC,EAAQ,EACRC,EAAY,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAMM,OAAS,EAAGD,IACpC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIP,EAAMM,OAAS,EAAGC,IACxC,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIR,EAAMM,OAAQE,IAEpC,GADAJ,EAAY,CAACJ,EAAMK,GAAIL,EAAMO,GAAIP,EAAMQ,IACnCC,EAAML,KACJH,GACFX,EAAW,CAACe,EAAGE,EAAGC,IAEpBL,IACID,GACF,OAAOC,EAMjB,OAAOA,GAGIO,EAAW,KACtB,IAAIC,EAAiB,GAWrB,OAVAzB,EAAM,GAAG0B,QAASJ,IAChBtB,EAAM,GAAG0B,QAASzB,IAChBD,EAAM,GAAG0B,QAASC,IAChB3B,EAAM,GAAG0B,QAASE,IAChB,MAAMC,EAAO,GAAKP,EAAIK,EAAI1B,EAAI2B,EAC9BH,EAAK1B,KAAK8B,WAKXJ,GAGIF,EAASO,IACpB,GAAwB,IAApBA,EAASV,OACX,OAAO,EAFuC,oBAI9BU,EAJ8B,GAIzCX,EAJyC,KAItCE,EAJsC,KAInCC,EAJmC,KAKhD,IAAK,IAAIb,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADYsB,OAAOZ,EAAEV,IAAMsB,OAAOV,EAAEZ,IAAMsB,OAAOT,EAAEb,KACzC,IAAM,EACd,OAAO,EAGX,OAAO,GAmBIuB,EAAa,CAACH,EAAcC,IACnCA,EAASnB,SAASkB,GACbC,EAASG,OAAQX,GAAMA,IAAMO,GAE7B,IAAIC,EAAUD,GAIZK,EAAY,EAAGpB,QAAQ,GAAIW,QAAmBU,EAAY,GAAIC,EAAc,KACvF,IAAIC,EAAUC,kBAAQ,IAAIxB,KAAUW,IACpC,KACEZ,EAAUwB,EAAQE,MAAM,EAAGJ,IAAcC,GACzCvB,EAAUwB,EAAS,CAAErB,iBAAiB,IAAU,GAEhDqB,EAAUC,kBAAQD,GAEpB,MAAO,CACLZ,KAAMY,EAAQE,MAAMJ,GACpBrB,MAAOuB,EAAQE,MAAM,EAAGJ,KAIfK,EAAkB5E,IAAoE,MACzFkD,EAA0BlD,EAA1BkD,MAAOW,EAAmB7D,EAAnB6D,KAAMK,EAAalE,EAAbkE,SACfW,EAAWhB,EAAKc,MAAM,EAAG,GAC/B,IAAIG,EAAW,IAAI5B,GACfuB,EAAUZ,EAAKc,MAAM,GAKzB,IAJAT,EAASJ,QAAQ,CAACJ,EAAGb,KACnB,IAAIkC,EAAQD,EAASE,QAAQtB,GAC7BoB,EAASC,GAASF,EAAShC,KAEE,IAAxBI,EAAU6B,IAAiB,OACOR,EAAU,CAC/CpB,MAAO4B,EACPjB,KAAMY,IAFEA,EADsB,EAC5BZ,KAAsBiB,EADM,EACb5B,MAMrB,MAAO,CACLW,KAAMY,EACNvB,MAAO4B,EACPZ,SAAU,KA6BDe,EAAuB,KAClC,MAAMC,EAAW,IAAI/D,OAAcgE,mBACnChE,SAAgBiE,mBAAmBF,IAGxBG,EAAa,CAACC,EAAyBC,KAClD,IAAIC,EAEFA,EADuB,kBAAdF,EACFlE,EAAUqE,WAAW,SAASC,IAAIJ,GAElCA,EAETE,EAAKtF,OAAL,eACKqF,EADL,CAEEI,WAAYxE,YAAmByE,WAAWC,sB,MChO9C,MAAMC,EACG,IADHA,EAEI,IAFJA,EAGS,EAHTA,EAIK,GA0BLC,EAAW,EAAGC,OAAMC,YAAa,IACPC,EAAgBJ,EAC9C,OACE,yBAAKK,MAAM,MAAMC,OAAO,MAAMC,MAAM,8BAClC,2BACE,0BAAML,KAAK,OAAOM,GAAG,oBAAoBF,OAAO,MAAMD,MAAM,MAAMI,EAAE,KAAKC,EAAE,OAC3E,uBACEC,QAAQ,OACRC,SAAS,UACTH,EAAE,IACFC,EAAE,IACFJ,OAAO,OACPD,MAAM,OACNG,GAAG,cAEH,0BAAMN,KAAK,OAAOE,YAAY,IAAIK,EAAE,IAAIC,EAAE,IAAIJ,OAAO,OAAOD,MAAM,WAGtE,2BACE,0BACEQ,OAAQV,EACRW,UAAU,qDAKVN,GAAG,QACHO,EAAE,uIAYFC,YAAY,OACZC,cAAc,OACdb,YAAaA,EACbF,KAAMA,OAOVgB,EAAQ,EAAGC,QAAOjB,OAAMC,YAAa,IACnCiB,EAAwCpB,EAA/BM,EAA+BN,EAAvBK,EAAuBL,EAC9C,MAAc,MAAVmB,GACFC,GAAoB,EACb,kBAACnB,EAAD,CAAUC,KAAMA,EAAMC,MAAOA,KAExB,MAAVgB,EAEA,2BACE,6BACEN,OAAQV,EACRkB,IAAKf,EAAS,EAAIc,GAAW,EAC7BE,IAAKjB,EAAQ,EAAIe,GAAW,EAC5BG,GAAIjB,EAAS,EACbkB,GAAInB,EAAQ,EACZW,YAAY,OACZC,cAAc,OACdb,YAAaJ,EACbE,KAAMA,KAKA,MAAViB,EAEA,2BAGE,6BACEM,OAAM,UAAKL,EAAL,YAAgBd,EAAS,EAAzB,uBACJD,EAAQ,EADJ,YACSe,EADT,uBAEJf,EAAQe,EAFJ,YAEed,EAAS,EAFxB,uBAGJD,EAAQ,EAHJ,YAGSC,EAASc,GACxBvF,MAAO,CAAEqE,KAAMA,EAAMW,OAAQV,EAAOC,YAAaJ,WAVzD,GAiBF,MAAM0B,UAAaC,YAAW,eAAD,oBAC3BC,OAAS,CACPC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,MAAO,QALkB,KAQ3BC,QAAU,CAAC9B,EAAOD,IACH,MAATA,EACI,aAAN,OAAoBC,EAApB,YAA6BD,EAA7B,KAEW,MAATA,EACKgC,KAAKN,OAAOzB,GAEd+B,KAAKN,OAAOI,MAfM,KAkB3BG,UAAY,KAAO,MAAD,EACeD,KAAKE,MAAMC,KAAKC,MAAM,IADrC,mBACPnC,EADO,KACAgB,EADA,KACOjB,EADP,KAEhB,OACE,kBAAC,WAAD,KACE,2BACE,6CACA,0BAAMA,KAAMgC,KAAKN,OAAOI,MAAOxB,GAAG,oBAAoBC,EAAE,KAAKC,EAAE,OAC/D,uBACEC,QAAQ,OACRC,SAAS,UACTH,EAAE,IACFC,EAAE,IACFJ,OAAO,OACPD,MAAM,OACNG,GAAG,cAEH,0BAAMJ,YAAY,IAAIK,EAAE,IAAIC,EAAE,IAAIJ,OAAO,OAAOD,MAAM,WAG1D,kBAACa,EAAD,CAAOC,MAAOA,EAAOjB,KAAMgC,KAAKD,QAAQ9B,EAAOD,GAAOC,MAAO+B,KAAKN,OAAOzB,OAK/EoC,SAAU,MAAD,EACyBL,KAAKE,MAAMC,KAAKC,MAAM,IAD/C,mBACAE,EADA,KACQrC,EADR,KACiBD,EADjB,KAEP,OACE,yBAAKtE,UAAU,aACb,yBAAKyE,MAAM,IAAIC,OAAO,KACpB,6BACEE,GAAE,eAAUL,EAAV,YAAmBD,GACrBG,MAAO,GACPC,OAAO,KACPmC,iBAAiB,iBACjBC,aAAa,kBAEb,0BACEC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,KACHjH,MAAO,CAAEgF,OAAQqB,KAAKN,OAAOzB,GAAQC,YAAa,SAKvD9D,EAAM+B,OAAOmE,GAAU,GAAG1F,IAAKC,GAE5B,yBACEgG,IAAKhG,EACLnB,UAAU,QACVoH,QAAO,cAAShD,EAAT,YAAyBA,GAChCO,MAAM,8BAEL2B,KAAKC,gBASLT,Q,kCChKAuB,MAtCf,SAAkBb,GAAQ,MACNc,EAA6Bd,EAAvCe,SAAsBC,EAAiBhB,EAAjBgB,OAAQC,EAASjB,EAATiB,KAM9B3J,EADY4J,YAAapJ,GAAUA,EAAMR,MACzCA,KAER,OACE,yBAAKkC,UAAU,4BARE,MACjB,MAAM2H,EAAcL,IAAeE,EAASI,IAAWC,IACvD,OAAO,2BAAOC,IAAKH,EAAaI,UAAQ,KAOrCC,GACD,yBAAKhI,UAAU,8BACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,oBAAd,cACA,uBAAGA,UAAU,oBAAb,WAAyCsH,EAAzC,KACA,yBAAKtH,UAAU,8BACb,yBAAKA,UAAU,SACb,uBAAGA,UAAU,eACX,kBAAC,IAAD,CAAMiI,GAAG,KAAT,UAGHR,GAAiB,OAAT3J,GACP,yBAAKkC,UAAU,SACb,uBAAGA,UAAU,eACX,kBAAC,IAAD,CAAMiI,GAAG,UAAT,iBChCb,MAAMjC,GAAS,CAAC,aAAc,OAAQ,QAAS,cAAe,SAAU,UCoDhEkC,OApCf,UAAgB,SAAEC,EAAF,KAAYhG,EAAZ,MAAkBX,EAAlB,SAAyB4G,EAAzB,UAAmCC,EAAnC,UAA8CC,EAA9C,YAAyDC,IACvE,MAAMC,EAAOjH,EAAUC,GACvB,OAAQ2G,GACN,IAAK,gBACH,OAAO,KACT,IAAK,SACH,OACE,yBAAKnI,UAAS,yBAAoBoI,EAAW,QAAU,OAAzC,YACZ,yBAAKpI,UAAU,wBACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,OAAf,SAA4BwI,GAC5B,yBAAKxI,UAAU,OAAOoI,GAAY,4CAAQA,OAKpD,IAAK,SACH,OACE,yBAAKpI,UAAU,gBACb,6BACE,yBACEA,UAAU,cACVC,MAAO,CAAE8E,QAAS,OAAQ0D,eAAgB,kBAE1C,4CAAkBD,GAClB,2CAAiBA,EAAOH,EAAUvG,QAClC,sCArCM4G,KAClB,MAKMC,EAAKC,KAAKC,MAAMH,EAAU,IAC1BI,EAAKJ,EAAU,GAAKC,EAC1B,MAAM,GAAN,OAAUA,EAAV,YAPaG,KACH,KACUA,GAAI7F,OADd,KACuBnB,QAKjBiH,CAAID,KA6BIE,CAAWT,OAKjC,QACE,OAAO,O,SCxCb,SAASU,IAAqB,QAAEC,EAAF,SAAWd,EAAX,kBAAqBe,IACjD,OACE,yBAAKnJ,UAAU,gDACZkJ,EAAQhI,IAAKkI,GAEV,yBACEpJ,UAAS,mBAAcoJ,EAAK7E,MAAnB,YAA4B6E,EAAKC,MAAQjB,EAAW,gBAAkB,IAC/EjI,QAAS,KACPgJ,EAAkBC,EAAKC,OAEzBlC,IAAKiC,EAAKC,MAEV,uBAAGrJ,UAAU,qBAAqBoJ,EAAKC,MAAQjB,EAAW,OAASgB,EAAKE,UAkLrEC,OA1Kf,SAAe/C,GAAQ,MAAD,EACIgD,mBAAS,MADb,mBACPC,GADO,aAEoBD,mBAASE,OAAOC,aAFpC,mBAECC,GAFD,WAIlBpI,EAYEgF,EAZFhF,MACAgB,EAWEgE,EAXFhE,SAEA4F,GASE5B,EAVFrE,KAUEqE,EATF4B,UACAc,EAQE1C,EARF0C,QACA3B,EAOEf,EAPFe,SACAC,EAMEhB,EANFgB,OACAqC,EAKErD,EALFqD,SACAC,EAIEtD,EAJFsD,aACArC,EAGEjB,EAHFiB,KACAU,EAEE3B,EAFF2B,SACA4B,EACEvD,EADFuD,gBAGIC,EAAcxD,EAAMyD,OAAiBrJ,MAAMY,EAAMM,QAAQwC,KLjChD1D,MAAM,GAClB0D,KAAK,GACLpD,IAAI,IACIgJ,iBAAO,GAAGC,YAElB7I,KAAK,KK4B2BE,EAEnC4I,oBAAU,KACR,MAAMC,EAASC,mBAAS,KACtBV,EAAgBF,OAAOC,cACtB,KAIH,OAFAD,OAAOa,iBAAiB,SAAUF,GAE3B,WACLX,OAAOc,oBAAoB,SAAUH,KAEtC,IAEHD,oBAAU,KACRX,EAAQlI,EAAUC,EAAO,CAAEC,OAAOgJ,MACjC,CAACjJ,IAEJ,MAOMkJ,EAPiB,GAAGtC,WAAUc,aAC9Bd,EACKuC,cAAIzB,EAAD,UAAad,EAAb,UAA+B,IAEpCuC,cAAIzB,EAAD,UAAa1B,EAAb,UAA6B,IAGrBoD,CAAepE,GAEnC,IAAKqE,kBAAQtD,GACX,OAAO,kBAAC,EAAD,CAAUA,SAAUA,EAAUC,OAAQA,EAAQC,KAAMA,IAG7D,MAAMqD,EAAe5J,cAAIgI,EAAS,CAACE,EAAMC,IAChC,aACLA,QACGD,IAID2B,EAAWnC,KAAKoC,KAAKF,EAAahJ,OAAS,GAC3CmJ,EAAaH,EAAa7H,MAAM,EAAG8H,GACnCG,EAAgBJ,EAAa7H,MAAM8H,GAEzC,OACE,kBAAC,WAAD,MACIF,kBAAQ3B,KAAaiC,OAAOtK,KAAKqI,GAAS7H,SAASmG,KACnD,kBAAC4D,GAAA,EAAD,CAAOC,MAAI,GACT,kBAACD,GAAA,EAAME,OAAP,KACE,kBAACF,GAAA,EAAMG,MAAP,4BAEF,kBAACH,GAAA,EAAMI,KAAP,KACE,wCACA,wBAAIxL,UAAU,cACXkB,cAAIgI,EAAS,CAACE,EAAMC,IAEjB,wBAAIlC,IAAKkC,EAAMrJ,UAAU,mBACvB,0BAAMA,UAAS,eACZqJ,EADH,IACUD,EAAKqC,MAAQ,eAUrC,kBAAC,GAAWjF,GACZ,yBAAKxG,UAAU,aACZ8J,GACC,kBAACb,GAAD,CACEC,QAAS+B,EACT7C,SAAUA,EACVe,kBAAmB3C,EAAM2C,oBAI7B,yBAAKnJ,UAAU,SACb,yBAAKA,UAAU,OACZgK,EAAW9I,IAAI,CAACqB,EAAMpB,IAEnB,yBACEgG,IAAG,eAAUhG,GACbnB,UAAS,oBACTG,QAAS,KACPqG,EAAMkF,gBAAgBnJ,KAGxB,yBACEvC,UAAS,sBAAiBwC,EAASnB,SAASkB,GAAlB,aAAgCmI,GAAgB,KAE1E,yBACE1K,UAAS,eACP6J,GAAgC,IAApBrH,EAASV,SAAiBU,EAASnB,SAASkB,GACpD,SACA,KAGN,kBAAC,EAAD,CAAMkE,KAAMlE,UAOtBuH,GAA6B,WAAb3B,GAChB,yBAAKnI,UAAU,wBACZkB,cAAIgI,EAAS,CAACE,EAAMC,IAEjB,yBAAKlC,IAAKkC,EAAMrJ,UAAU,aACxB,0BACEA,UAAS,yBAAoBoJ,EAAK7E,MAAzB,YACE,QAAT8E,EAAiB,WAAa,GADvB,YAELU,EAAkB,IAAM,EAAI,MAAQ,KAEvCV,EALH,KAKWD,EAAKE,UAQzBQ,GACC,kBAACb,GAAD,CACEC,QAASgC,EACT9C,SAAUA,EACVe,kBAAmB3C,EAAM2C,oBAI5B3C,EAAMmF,cACL,yBAAK3L,UAAU,OACb,yBAAKA,UAAU,oBACb,4BAAQG,QAASqG,EAAMmF,aAAc3L,UAAU,mBAA/C,YAIDwG,EAAMoF,aACL,yBAAK5L,UAAU,oBACb,4BAAQG,QAASqG,EAAMoF,YAAa5L,UAAU,mBAC3CwG,EAAMyD,OAAS,UAAY,eCpJjC4B,OAnCf,UAAoB,OAAEC,EAAF,QAAU5C,EAAV,SAAmB6C,IAGrC,OAFaC,kBAAQ9C,EAAU+C,GAAWA,EAAOR,MAG/C,yBAAKzL,UAAU,kBACb,wCACA,wBAAIA,UAAU,cACXkB,cAAIgI,EAAS,CAACE,EAAMC,IAEjB,wBAAIlC,IAAKkC,EAAMrJ,UAAU,mBACvB,0BAAMA,UAAS,eACZqJ,EADH,IACUD,EAAKqC,MAAQ,aAM9BK,EACC,4BACE9L,UAAU,kBACVG,QAAS,KACP4L,EAAS,CACPG,aAAa,MAJnB,cAWA,kECLR,MAAM9H,GAAS,CACb+H,SAAU,IACVnG,UACAoG,UAAW,GAgeEC,OAtdf,WACE,MAAMC,EAAc5E,YAAapJ,GAAeA,EAAMR,MAC9CA,EAA+BwO,EAA/BxO,KAAeyO,EAAgBD,EAAzBlO,QACRwB,EAAWC,cAGX2M,EADSC,iBAAO,IACMC,QAEtBC,EAAczK,IACd0K,EAIL,eACIhK,EAAU,CACXT,KAAMwK,EAAY1J,MAAM,IACxBzB,MAAOmL,EAAY1J,MAAM,EAAG,MAH/B,CAKCT,SAAU,KAlBE,EAqB8BgH,qBArB9B,mBAqBPqD,EArBO,KAqBSC,EArBT,OAsBoBtD,mBAAS,IAtB7B,mBAsBPuD,EAtBO,KAsBIC,EAtBJ,OAuBoCxD,qBAvBpC,mBAuBPyD,EAvBO,KAuBYC,EAvBZ,OAwBkC1D,qBAxBlC,mBAwBP2D,EAxBO,aAyBuC3D,sBAzBvC,mBAyBP4D,EAzBO,KAyBcC,EAzBd,OA2BgB7D,mBAAQ,aACpCuD,UAAW,GACX7D,QAAS,GACToE,SAAS,EACTpB,aAAa,EACb1E,OAAQ,GACRqC,UAAU,EACVzB,SAAU,KACVb,SAAU,IACPqF,IApCS,mBA2BPtO,EA3BO,KA2BAiP,EA3BA,KAuCRC,EAAef,iBAAOnO,GAC5BkP,EAAad,QAAUpO,EAEvB8L,oBAAU,KACJtM,IAAS+M,kBAAQ/M,EAAK2P,MACxB/N,EACGqE,WAAW,SACX2J,MAAM,cAAe,KAAM5P,EAAK2P,KAChC9C,MACArK,MAAK,SAASqN,GACbA,EAAcvL,SAAQ,SAAS4B,GAC7BzD,QAAQC,IAAIwD,EAAIY,IAChB,MAAMgJ,EAAO,eACR5J,EAAIH,OADI,CAEXkJ,UAAW/I,EAAIY,KAEjBrE,QAAQC,IAAI,aAAcoN,GAC1Bd,EAAkBc,SAGrBC,OAAM,SAASC,GACdvN,QAAQC,IAAI,4BAA6BsN,OAG9C,CAAChQ,IAEJsM,oBAAU,IACD,KACDgD,GAEFA,IAEED,GAEFA,KAGH,CAACA,EAAkBC,IAEtBhD,oBAAU,IACD,WACLV,OAAOqE,cAAcd,IAEtB,CAACA,IAEJ,MAAMlB,EAAYvN,IAChB+O,EAAa,eACRC,EAAad,QADN,GAEPlO,KAIDwP,EAAqB,KAAM,MAEvBjB,EAAcF,EAAdE,UACRrN,EACGqE,WAAW,SACXC,IAAI+I,GACJkB,SACA3N,KAAK,KACJC,QAAQC,IAAI,oBACZsM,OAAkBoB,MAsBlBC,GAAoBvK,IACxB,IAAII,EAEFA,EADuB,kBAAdJ,EACHlE,EAAUqE,WAAW,SAASC,IAAIJ,GAElCA,EAER,MAAMwK,EAAUpK,EAAID,WAAW,WAgB/B,OAfAxD,QAAQC,IAAI4N,GACZA,EAAQC,WAAYC,IAClB/N,QAAQC,IAAI,uBACZ8N,EAASC,aAAanM,QAASoM,IAC7B,GAAoB,UAAhBA,EAAOzQ,KAAkB,CAC3B,MAAMQ,EAASiQ,EAAOxK,IAAIH,OAC1BtD,QAAQC,IAAIjC,GACZkQ,GAAclQ,GACd6P,EAAQpK,IAAIwK,EAAOxK,IAAIY,IAAIqJ,SAET,YAAhBO,EAAOzQ,MACTwC,QAAQC,IAAI,mBAAoBgO,EAAOxK,IAAIH,YAI1CuK,GAkBHM,GAAe,uCAAG,WAAO3B,GAAP,iBAAAlL,EAAA,sDACtB2K,EAAa1I,KAAOpE,EAAUqE,WAAW,SAASC,IAAI+I,GAChD4B,EAAejF,OAAOkF,YAAY,KACtCjL,EAAW6I,EAAa1I,KAAM,KAC7B,KAEHoJ,EAAqByB,GAEfE,EAAcV,GAAiB3B,EAAa1I,MAClDuJ,EAAsBwB,GATA,2CAAH,sDA6BfC,GAAoBC,IACxBA,EAAEC,iBAD8D,MAExDxH,EAAqDlJ,EAArDkJ,OAAQhG,EAA6ClD,EAA7CkD,MAAOW,EAAsC7D,EAAtC6D,KAAMK,EAAgClE,EAAhCkE,SAAU0G,EAAsB5K,EAAtB4K,QAAS3B,EAAajJ,EAAbiJ,SAC1C0H,EAAiBpE,kBAAQkC,GAAT,UAAqCvF,EAArC,WAAsBuF,EAC5ChB,EAAS,CAAEgB,UAAWkC,IACtBzC,EAAa1I,KAAOpE,EAAUqE,WAAW,SAASC,IAAIiL,GACtDzC,EAAa1I,KAAKoL,IAAI,CACpBC,YAAarR,EAAK2P,IAClBvE,UACA1H,QACAW,OACAK,WACA+E,WACAtD,WAAYxE,IAASC,UAAUwE,WAAWC,oBAE5C,MAAMiL,EAAW1F,OAAOkF,YAAY,KAClCpC,EAAa1I,KAAKtF,OAAO,CACvByF,WAAYxE,IAASC,UAAUwE,WAAWC,qBAE3C,KAGH+I,EAAqBkC,GAErB5C,EAAa4B,QAAUD,GAAiBc,GAExC1O,QAAQC,IAAIgM,EAAa4B,SAmBzBrC,EAAS,CACPuB,SAAS,KAIP+B,GAAiBN,IACrBA,EAAEC,iBACFjD,EAAS,CACPvE,OAAQ1J,EAAKI,SACbgL,QAAS,CACP,CAACpL,EAAKI,UAAW,CACfuN,MAAM,EACNgC,IAAK3P,EAAK2P,IACVnE,MAAO,EACP/E,MAAOH,GAAO4B,OAAO,QAiCvByI,GAAiBlQ,IAAoB,MACjCR,EAAkBQ,EAAlBR,KAAMC,EAAYO,EAAZP,QAD0B,EAEHwP,EAAad,QAA1CxD,EAFgC,EAEhCA,QAASd,EAFuB,EAEvBA,SAAU5G,EAFa,EAEbA,MAC3B,OAAQzD,GACN,IAAK,OACH,GAAIoN,OAAOtK,KAAKqI,GAAS7H,SAASrD,EAAQqL,MACxC,OAEF,MAAMiG,EAAU,eACXpG,EADW,CAEd,CAAClL,EAAQqL,MAAO,CACdoC,MAAM,EACNgC,IAAKzP,EAAQyP,IACbnE,MAAO,EACP/E,MAAOH,GAAO4B,OAAOmF,OAAOtK,KAAKqI,GAASpH,WAG9CyN,GAAgB,CAAErG,QAASoG,IAC3B,MACF,IAAK,SACElH,GAAYoH,GAAsBhO,EAAOxD,EAAQwE,WACpDiN,GAAezR,EAAQwE,SAAUxE,EAAQqL,MAE3C,MACF,QACE,SAIAqG,GAAY,CAAClN,EAAoB4F,KACrC,GAAInG,EAAMO,GAAW,CACnB,MAAMmN,EA1DoBvH,KAC5B,IAAKA,EACH,MAAO,GAFwC,MAIzCc,EAAYsE,EAAad,QAAzBxD,QACF0G,EAAW1G,EAAQd,GAAUkB,MAAQ,EACrCgG,EAAa9Q,IAAO0K,EAAS,CACjC,CAACd,GAAW,CACVyH,OAAQ,CACNvG,MAAOsG,MAIPrI,EAAWqI,GAAYxL,GAAOgI,UAAYhE,EAAW,GAQ3D,OAPIb,GACFmC,OAAOoG,WAAW,KAChBtD,EAAa1I,KAAKmK,SAClBF,cAAcd,IACb,KAGE,CACL/D,QAASoG,EACT/H,aAmCkBwI,CAAqB3H,GACjC4H,EAA6B,eAC9BxC,EAAad,QADiB,CAEjC7C,UAAU,EACVzB,SAAU,MACPuH,EAJ8B,GAK9BzM,EAAesK,EAAad,UAEjC6C,GAAgBS,KAIdT,GAAmB/Q,IACvB+B,QAAQC,IAAI,WAAYgN,EAAad,QAAQK,WAC7ChB,EAASvN,GACTmF,EAAW6I,EAAa1I,KAAMtF,IAG1BgR,GAAwB,CAAChO,EAAiBgB,KAC9C,IAAK,IAAIrB,EAAI,EAAGA,EAAIqB,EAASV,OAAQX,IACnC,IAAKK,EAAMH,SAASmB,EAASrB,IAC3B,OAAO,EAGX,OAAO,GAGHsO,GAAiB,CAACQ,EAAuB7H,KAC7C,MAAM4H,EAAW,CACfnG,SAAU5H,EAAMgO,GAChBzN,SAAUyN,EACV7H,YAEFmH,GAAgBS,GACZA,EAASnG,UACXiG,WAAW,KACTJ,GAAUO,EAAa7H,IACtB,MAIC5G,GAA2ElD,EAA3EkD,MAAOW,GAAoE7D,EAApE6D,KAAMK,GAA8DlE,EAA9DkE,SAAU4F,GAAoD9J,EAApD8J,SAAUc,GAA0C5K,EAA1C4K,QAASoE,GAAiChP,EAAjCgP,QAASpB,GAAwB5N,EAAxB4N,YAAa1E,GAAWlJ,EAAXkJ,OAExE,OAAI+E,EACK,aAGL1B,kBAAQ/M,GAER,yBAAKkC,UAAU,kBACb,gFACA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,aAQJ6M,IAAmBvO,EAAMgP,QAEzB,yBAAKtN,UAAU,aACb,4EACA,4BAAQA,UAAU,uBAAuBG,QAAS,IA5MrC,MAEjB,MAAMsL,EAAOO,kBAAQa,EAAe3D,QAAU+C,GAAWA,EAAOR,MAExDsB,EAAcF,EAAdE,UACRhB,EAAS,CAAEgB,cACX2B,GAAgB3B,GAEhBhB,EAAS,aACPvE,OAAQiE,EACR6B,SAAS,GACNT,EAHG,CAKN5I,WAAYxE,IAASC,UAAUwE,WAAWC,sBA+LgB+L,IAAxD,QAGA,4BAAQlQ,UAAU,iBAAiBG,QAAS6N,GAA5C,kBAOS,KAAXxG,GAEA,yBAAKxH,UAAU,aACb,kBAAC,EAAD,MACA,oDACA,0BAAMmQ,SAAUd,IACd,yBAAKrP,UAAU,YACb,yBAAKA,UAAU,yBACb,2BACEoQ,WAAS,EACTC,YAAY,WACZC,MAAOxS,EAAKI,SACZqS,SAAWxB,IACTnP,EAAS3B,EAAe8Q,EAAEyB,OAAOF,QACjC5G,OAAO+G,aAAaC,QAAQ,WAAY3B,EAAEyB,OAAOF,WAIvD,yBAAKtQ,UAAU,YACb,4BAAQjC,KAAK,SAASiC,UAAU,mBAAhC,aAMN,6BACE,2BACE,kBAAC,IAAD,CAAMiI,GAAG,KAAT,gBAOLqF,GAyBApB,GAKH,kBAAC,GAAD,CACE1K,MAAOA,GACPW,KAAMA,GACNK,SAAUA,GACV4F,SAAUA,GACVsD,gBAlWqBnJ,IAAkB,MACjCiF,EAAWlJ,EAAXkJ,OACR,IAAKlJ,EAAM8J,SAAU,CACnB,MAAM6H,EAAcvN,EAAWH,EAAMjE,EAAMkE,UACvCP,EAAMgO,IACRR,GAAeQ,EAAazI,GAE9BuE,EAAS,CACPvJ,SAAUyN,MA4VZtE,aAvViB,KACnB,MAAMqE,EAAWpN,EAAUtE,GAC3BiR,GAAgBS,IAsVd9G,QAASA,GACTW,SAAUvL,EAAMuL,SAChBtC,SAAUjJ,EAAMiJ,SAChBC,OAAQlJ,EAAMkJ,OACdW,SAAS,WAhBJ,kBAAC,GAAD,CAAY2D,QAAQ,EAAM5C,QAASA,GAAS6C,SAAUwD,KAxB3D,yBAAKvP,UAAU,kBACb,+CACA,0BAAMmQ,SAAUrB,IACd,yBAAK9O,UAAU,QACb,2BACEoQ,WAAS,EACTC,YAAW,UAAK7I,GAAL,WACX+I,SAAWxB,IACT/B,EAAa+B,EAAEyB,OAAOF,QAExBA,MAAOvD,KAGX,6BACE,4BAAQhP,KAAK,SAASiC,UAAU,mBAAhC,c,SC3NG2Q,OAlPf,SAAenK,GACb,MAAM8F,EAAc5E,YAAapJ,GAAUA,EAAMR,MACzCA,EAA+BwO,EAA/BxO,KACF8B,GADiC0M,EAAzBlO,QACGyB,eAHG,EAKU2J,mBAAS,CACrCoH,cAAc,EACd/G,UAAU,EACVgH,kBAAkB,EAClBC,YAAa,GACb1I,SAAU,GACVjG,KAAM,GACNX,MAAO,GACPgB,SAAU,GACVuO,QAAS,KACT7E,aAAa,IAfK,mBAKb5N,EALa,KAKNiP,EALM,OAiBQ/D,mBAAS,IAjBjB,mBAiBbhC,EAjBa,KAiBLwJ,EAjBK,OAkBiBxH,qBAlBjB,mBAqBdgD,GArBc,UAoBLC,iBAAO,IACMC,SAGtBc,EAAef,iBAAOnO,GAC5BkP,EAAad,QAAUpO,EAEvB,MAAMyN,EAAYvN,IAChB+O,EAAa,eACRC,EAAad,QADN,GAEPlO,KAIDyS,EAAqB,KAAO,MAAD,EACAzD,EAAad,QAApCtE,EADuB,EACvBA,SAAU5F,EADa,EACbA,SACdqI,kBAAQzC,IAAiC,IAApB5F,EAASV,SAAiBG,EAAMO,IACvDuJ,EAAS,CACPvJ,SAAU,MAoCV6M,EAAiBN,IACrBA,EAAEC,iBACF,MAAMkC,EAAYpT,EAAKI,SACvB,GAAI2M,kBAAQqG,GACV,OAEFF,EAAUE,GACV,MAAM3S,EAAS,CACbR,KAAM,OACNC,QAAS,CAAEqL,KAAM6H,EAAWzD,IAAK3P,EAAK2P,MAExC0D,EAAW5S,IAqBP4S,EAAc5S,IAClBgC,QAAQC,IAAI,cAAegM,EAAa4B,SACxC5B,EAAa4B,QACVgD,IADH,eAEO7S,EAFP,CAGI+O,QAAS7N,IAASC,UAAUwE,WAAWC,qBAExC7D,MAAK,SAAS+Q,GACb,GAAoB,UAAhB9S,EAAOR,KAAkB,CAC3B,MAAMuT,EAAQD,EAAOzM,GACrBrE,QAAQC,IAAI,6BAA8B8Q,GAC1CvF,EAAS,CACPgF,QAASO,SAOnBlH,oBAAU,KAAO,MACPmH,EAAa/K,EAAMgL,MAAMC,OAAzBF,SACR/E,EAAa1I,KAAOpE,EAAUqE,WAAW,SAASC,IAAIuN,GACtD,MAAMG,EAAalF,EAAa1I,KAAKuK,WAAYrK,IAxC5BA,KACrB,MAAM2N,EAAY,eAAQ3N,EAAIH,QACZ+N,EAAepE,EAAad,QAAtClK,SACR,GAAIqI,kBAAQ8G,GACV,OAEFpR,QAAQC,IAAI,WAAYmR,GAExB,MAAM1B,EACJ2B,EAAW9P,OAAS,GAAK+I,kBAAQ8G,EAAavJ,UAAYwJ,EAAaD,EAAanP,SACtFjC,QAAQC,IAAI,eAAgByP,GAC5BlE,EAAS,eACJ4F,EADG,CAENnP,SAAUyN,EACVW,cAAc,MA2BdiB,CAAc7N,KAEhBwI,EAAa4B,QAAU5B,EAAa1I,KAAKC,WAAW,WAEpD,MAAM+N,EAAetF,EAAa4B,QAAQC,WAAYC,IACpDA,EAASC,aAAanM,QAASoM,IAC7B,GAAoB,YAAhBA,EAAOzQ,KAAoB,CACTyP,EAAad,QAAzBqE,UACQvC,EAAOxK,IAAIY,KACzBrE,QAAQC,IAAI,2BACZuL,EAAS,CACPgF,QAAS,aAOnB,OAAO,WACDvE,EAAa1I,MACf4N,IAEElF,EAAa4B,SACf0D,MAGH,IA3JiB,MA6JZtQ,EAA2DlD,EAA3DkD,MAAOW,EAAoD7D,EAApD6D,KAAMK,EAA8ClE,EAA9CkE,SAAU4F,EAAoC9J,EAApC8J,SAAUc,EAA0B5K,EAA1B4K,QAAS0H,EAAiBtS,EAAjBsS,aAElD,GAAItE,EAAYlO,QACd,MAAO,qBAGT,GAAIyM,kBAAQ/M,GACV,OACE,yBAAKkC,UAAU,aACb,gFACA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,YAIF,2BACE,kBAAC,IAAD,CAAMiI,GAAG,UAAT,UAKR,IAAKT,EACH,OACE,yBAAKxH,UAAU,aACb,kBAAC,EAAD,MAEA,wBAAIA,UAAU,QAAd,yBACA,0BAAMmQ,SAAUd,GACd,yBAAKrP,UAAU,mBACb,2BACEoQ,WAAS,EACTrS,KAAK,OACLsS,YAAY,YACZC,MAAOxS,EAAKI,SACZqS,SAAWxB,IACTnP,EAAS3B,EAAe8Q,EAAEyB,OAAOF,QACjC5G,OAAO+G,aAAaC,QAAQ,WAAY3B,EAAEyB,OAAOF,WAIvD,yBAAKtQ,UAAU,mBACb,2BAAOA,UAAU,+BAA+BjC,KAAK,SAASuS,MAAM,YAtM1D,QA6MwB9C,EAAad,QAAjD7C,EA7MY,EA6MZA,SAAUtC,EA7ME,EA6MFA,SAElB,OA/MoB,EA6MQ2E,YAO1B,kBAAC,IAAM6F,SAAP,KACE,kBAAC3G,GAAA,EAAD,CAAOC,KAAM/M,EAAMyS,SAAWH,GAC5B,kBAACxF,GAAA,EAAME,OAAP,KACE,kBAACF,GAAA,EAAMG,MAAP,8BAEF,kBAACH,GAAA,EAAMI,KAAP,KACE,uBAAGxL,UAAU,eAAb,QACA,yBAAKA,UAAU,eACb,kBAACgS,GAAA,EAAD,CAASC,UAAU,cAIzB,kBAAC,GAAD,CACEzQ,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV4F,SAAUA,EACVsD,gBA1LmBnJ,IAAU,MAAD,EACDiL,EAAad,QAApCtE,EADwB,EACxBA,SAAU5F,EADc,EACdA,SAClB,GAAI4F,EACF,OAEF,MAAM6H,EAAcvN,EAAWH,EAAMC,GACrC,GAAIyN,EAAYnO,OAAS,EACvB,OAEF,MAAMkO,EAAW,GACjB,GAA2B,IAAvBC,EAAYnO,OACd,GAAIG,EAAMgO,GAAc,CACtB,MAAM1R,EAAS,CACbR,KAAM,QACNC,QAAS,CAAEwE,SAAUyN,EAAa5G,KAAM7B,IAE1CjH,QAAQC,IAAI,yBACZ2Q,EAAW5S,GACXyR,EAASY,cAAe,OAExBrQ,QAAQC,IAAI,qBACZkJ,OAAOoG,WAAWmB,EAAoB,KAI1ClF,EAAS,eACJiE,EADG,CAENxN,SAAUyN,MAiKR/G,QAASA,EACTW,SAAUA,EACVtC,SAAUA,EAEVC,OAAQA,EACRW,SAAS,YA5BN,kBAAC,GAAD,CAAYe,QAASA,EAAS4C,QAAQ,KC5NjD,MAAMoG,WAAcnM,YAClBoM,YAAY3L,GACV4L,MAAM5L,GADW,KA8BnB6L,qBAAuB,KACrB/L,KAAKuI,eA3BLvI,KAAKhI,MAAQ,CACX+K,KAAM,GACNiJ,QAAS,MACTC,MAAM,EACNC,MANY,IAUhBC,oBACEnM,KAAKoM,SAAWhT,EAAUqE,WAAW,SAErCuC,KAAKuI,YAAcvI,KAAKoM,SAASrE,WAAYC,IAC3C,MAAMqE,EAAW,GACjBrE,EAASlM,QAAS4B,IAChB2O,EAASlS,KAAT,aACE4I,KAAMrF,EAAIY,IACPZ,EAAIH,WAGXyC,KAAKyF,SAAS,CACZwG,MAAM,EACNC,MAAOG,MASbhM,SAAU,MAAD,EACiBL,KAAKhI,MAArBkU,EADD,EACCA,MAAOD,EADR,EACQA,KAEf,GADAhS,QAAQC,IAAIgS,IACPD,EACH,OAAO,KAET,MAAMK,EAAcJ,EAAM7P,OAAQkQ,IAAO,MAC/B5O,EAAe4O,EAAf5O,WACR,IAAKA,EACH,OAAO,EAET,MAAM6O,EAAU7O,EAAW8O,WACrBC,GAAM,IAAIC,MAAOC,UAEvB,OADYtK,KAAKuK,OAAOH,EAAMF,GAAW,KAC5B,KAEf,OACE,yBAAK9S,UAAU,YAAYC,MAAO,CAAEyE,OAAQ,UAClB,IAAvBkO,EAAY9Q,OACX,kBAAC,WAAD,KACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBAAkBC,MAAO,CAAEmT,UAAgC,GAArB1J,OAAOC,cAC1D,0BAAM3J,UAAU,cAAhB,yCAEF,oCACQ,kBAAC,IAAD,CAAMiI,GAAG,SAAT,QADR,gBAGA,2BACE,kBAAC,IAAD,CAAMjI,UAAU,kBAAkBiI,GAAG,KAArC,YAQR,kBAAC,WAAD,KACE,wBAAIjI,UAAU,oBAAd,mBACA,yBAAKA,UAAU,4BACZ4S,EAAY1R,IAAI,CAAC4C,EAAM3C,IAEpB,yBAAKnB,UAAU,iBAAiBmH,IAAKrD,EAAKuF,MACxC,yBAAKrJ,UAAU,uBACb,yBAAKA,UAAU,uBACb,kBAAC,IAAD,CAAMiI,GAAE,iBAAYnE,EAAKuF,OAASvF,EAAKuF,WAOnD,yBAAKrJ,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMA,UAAU,kBAAkBiI,GAAG,KAArC,aAYDiK,U,wCClFf,MAEM9N,GACM,IADNA,GAEJ4B,GAFI5B,GAGO,EAHPA,GAIM,KAGNiP,GAAkC,CAAClO,EAAW3D,KAClD,IAAI8R,EAAO7Q,OAAO0C,GACd1C,OAAO8Q,MAAMD,KACfA,EAAO,GAET,IAAIE,EAAW,KAAS,EAAIF,GAC5B,QAAcpF,IAAV1M,EAAqB,CACvB,MAAMiS,EAAUlS,EAAUC,GAC1BgS,GVnBc,KADkBE,EUoBUD,GVlBnC,IAEO,IAAZC,EACK,GAEO,IAAZA,EACK,IAEO,IAAZA,EACK,IAEF,IAb2BA,MUsBlC,OAAOF,GAGHG,GAAkB,KACtB,MAAMhH,EAAczK,IAEpB,OAAO,eACFU,EAAU,CACXT,KAAMwK,EAAY1J,MAAM,IACxBzB,MAAOmL,EAAY1J,MAAM,EAAG,MAHhC,CAKET,SANyB,MAgBvBoR,GAAe,CACnB1K,QAAS,CACP2K,IAAK,CACHvK,MAAO,EACP/E,MAAOH,GAAc,IAEvB0P,IAAK,CACHxK,MAAO,EACP/E,MAAOH,GAAc,KAGzB8H,aAAa,EACb1E,OAAQ,MACRqC,UAAU,EACVzB,SAAU,KACVb,SAAU,KACVwM,gBAAiB,IACjBzL,UAAW,IAAI2K,KACflJ,gBAAiB,EACjBE,QAAQ,GAGV,MAAM+J,WAAajO,YACjBoM,YAAY3L,GACV4L,MAAM5L,GADgB,KASxByN,gBAAmBlF,IACjBA,EAAEC,iBACF1I,KAAKyF,SAAS,CACZG,aAAa,EACb5D,UAAW,IAAI2K,OAGjB3M,KAAK4N,YAAY9P,KAhBK,KAmBxBqO,kBAAoB,KAClB,MAAM0B,EAAkBzK,OAAO+G,aAAa2D,QAAQ,kBACpD,IAAIC,EAAaF,EAAkB1R,OAAO0R,GAAmB,EAC7D,MAAMJ,EAAkBV,GAAgCgB,GACxD/N,KAAKyF,SAAS,CACZsI,aACAN,qBAzBoB,KA6BxB1B,qBAAuB,KACO,OAAxB/L,KAAKhI,MAAMgW,UACb5K,OAAOqE,cAAczH,KAAKhI,MAAMgW,WA/BZ,KAmCxBJ,YAAeK,IAAmB,MAAD,EACDjO,KAAKhI,MAA3BkD,EADuB,EACvBA,MAAO6S,EADgB,EAChBA,WAEX/N,KAAKhI,MAAMkW,gBACb9K,OAAO+K,aAAanO,KAAKhI,MAAMkW,gBAIjC,MAAME,EAAsBrB,GAAgCgB,EAAY7S,GACxEjB,QAAQC,IAAR,sBAA2BkU,EAA3B,QAEA,MAAMF,EAAiB9K,OAAOoG,WAAW,KACvC,MAAMwE,EAAW5K,OAAOkF,YAAYtI,KAAKqO,QAASD,GAClDpO,KAAKyF,SAAS,CACZuI,cAEDC,GACHjO,KAAKyF,SAAS,CACZyI,eAAgBA,KArDI,KAyDxBI,QAAU,KACRtO,KAAKhI,MAAMkW,gBAAkB9K,OAAO+K,aAAanO,KAAKhI,MAAMkW,gBAC5DlO,KAAKhI,MAAMgW,UAAY5K,OAAOqE,cAAczH,KAAKhI,MAAMgW,WA3DjC,KA8DxBK,QAAU,KAAO,MAAD,EACgCrO,KAAKhI,MAA3CkD,EADM,EACNA,MAAO4G,EADD,EACCA,SAAUb,EADX,EACWA,SAAU0C,EADrB,EACqBA,OACnC,GAAI7B,GAAYb,GAAY0C,EAC1B,OAEF3D,KAAKyF,SAAU8I,IACN,CACL9K,gBAAiB8K,EAAU9K,gBAAkB,KAlGrC,EAAC+K,EAAM,MACrB,MACMzS,GADI,IAAI4Q,MACDC,UAAF,SAAc,GAAM,GAAK,IACpC3S,QAAQC,IAAIsU,EAAKzS,EAAE0S,QAAQ,KAoGvBC,CAAQ,SAZI,QAcChS,kBAAQxB,GAAOyB,MAAM,EAAG,GAdzB,mBAcPpB,EAdO,KAcJE,EAdI,KAeRC,EVrCe,EAACH,EAAWE,KACnC,IAAIkT,EACAC,EACAC,EAAS,GACb,IAAK,IAAIhU,EAAI,EAAGA,EAAI,EAAGA,IACjBU,EAAEV,KAAOY,EAAEZ,GACbgU,GAAkBtT,EAAEV,IAEpB8T,EAAWxS,OAAOZ,EAAEV,IAAMsB,OAAOV,EAAEZ,IACnC+T,GAAW,EAAID,GAAU9K,WACzBgL,GAAkBD,GAGtB,OAAOC,EAAOC,QUwBFC,CAAUxT,EAAGE,GACnBP,EAAMH,SAASW,KACjBsE,KAAKyF,SAAS,CACZ3D,SAAU,MACV5F,SAAU,CAACX,GACXyT,SAAU,CAACvT,EAAGC,GACd6H,UAAU,IAEgB,OAAxBvD,KAAKhI,MAAMgW,UACb5K,OAAOqE,cAAczH,KAAKhI,MAAMgW,UAElChO,KAAKyF,SAAS,CACZwJ,aAAc7L,OAAOkF,YAAYtI,KAAKkP,iBAAkB,SAzFtC,KA8FxB5J,YAAc,KACRtF,KAAKhI,MAAM8J,WAGV9B,KAAKhI,MAAM2L,OAGd3D,KAAK4N,YAAY,KAFjB5N,KAAKsO,UAIPtO,KAAKyF,SAAU8I,IACN,CACL5K,QAAS4K,EAAU5K,YAzGD,KA8GxBuL,iBAAmB,KAAO,MAAD,EACQlP,KAAKhI,MAA5BkE,EADe,EACfA,SACFiT,EAAU,IAFO,EACLH,UAElB,GAAuB,IAAnBG,EAAQ3T,OACV,OAEF,MAAMmO,EAAc,IAAIzN,EAAUiT,EAAQC,OAC1CpP,KAAKyF,SAAS,CACZuJ,SAAUG,EACVjT,SAAUyN,IAEe,IAAvBA,EAAYnO,SACkB,OAA5BwE,KAAKhI,MAAMiX,cACb7L,OAAOqE,cAAczH,KAAKhI,MAAMiX,cAElCjP,KAAKmJ,eAAeQ,EAAa,SA7Hb,KAiIxB0F,kBAAoB,CAACnO,EAAgBoO,KAAsC,MACjE1M,EAAY5C,KAAKhI,MAAjB4K,QACF0G,EAAW1G,EAAQ1B,GAAQ8B,MAAQsM,EAQzC,MAAO,CAPYpX,IAAO0K,EAAS,CACjC,CAAC1B,GAAS,CACRqI,OAAQ,CACNvG,MAAOsG,MAIOA,IA3IE,KA8IxBiG,cAAgB,KAAO,MAAD,EACWvP,KAAKhI,MAA5B8J,EADY,EACZA,SAAU5F,EADE,EACFA,SAClB,GAAI4F,IAAanG,EAAMO,GAAW,CAAC,MAAD,EACX8D,KAAKqP,kBAAkBvN,GAAW,IAAhDkH,EADyB,oBAEhChJ,KAAKyF,SAAS,CACZ7C,QAASoG,EACTlH,SAAU,KACV0N,kBAAc5H,EACd1L,SAAU,OAtJQ,KA2JxBuN,qBAAwB3H,IAAsB,MAAD,EACZ9B,KAAKqP,kBAAkBvN,EAAU,GADrB,mBACpCkH,EADoC,KACxBM,EADwB,KAEnC9R,EAASwI,KAAKE,MAAM8F,YAApBxO,KACFyJ,EAAWqI,GAAYxL,GAAmBgE,EAAW,GACrD4H,EAAW,CACf9G,QAASoG,EACT/H,YAEF,IAAKsD,kBAAQtD,GAAW,CACtB,MAAMkG,EAAO3P,GAAQA,EAAK2P,KAAQ,YAC5BsI,EAAyB,OAAZ3N,EAAoB,EAAI,EACrC4N,EAAapN,KAAKuK,QAAO,IAAIF,MAAOC,UAAY5M,KAAKhI,MAAMgK,UAAU4K,WAAa,KACxF+C,KACGC,KAAK,YAAa,CACjBzI,MACAuI,aACAD,aACAI,iBAAkB7P,KAAKhI,MAAM+V,WAC7B+B,cAAexG,IAEhBtP,KAAK,KACJC,QAAQC,IAAI,eAEbqN,MAAOwI,IACN9V,QAAQC,IAAI,wBAIlB,OADA8F,KAAKyF,SAASiE,GACPA,GAvLe,KA0LxBsG,eAAkBlO,IAChB,IAAK9B,KAAKhI,MAAM8J,SAAU,CACxB,MACM5J,EAAS,CACb4J,WACA0N,cAHc,IAAI7C,MAAOC,WAK3B5M,KAAKyF,SAASvN,GACd8H,KAAKyF,SAAS,CACZwK,YAAa7M,OAAOoG,WAAW,KAC7BxJ,KAAKuP,iBACJzR,QArMe,KA0MxBqL,eAAiB,CAACQ,EAA4B7H,KAC5C,MAAM4H,EAAW,CACfnG,SAAU5H,EAAMgO,GAChBzN,SAAUyN,EACV7H,YAEE4H,EAASnG,WACXvD,KAAKhI,MAAMiY,aAAe9B,aAAanO,KAAKhI,MAAMiY,aAClDzG,WAAW,KACTxJ,KAAKoJ,aACJ,MAELpJ,KAAKyF,SAASiE,IAtNQ,KAyNxBtE,gBAAmBnJ,IAAkB,MAAD,EACa+D,KAAKhI,MAA5CuL,EAD0B,EAC1BA,SAAUzB,EADgB,EAChBA,SAAUZ,EADM,EACNA,OAC5B,IAFkC,EACEyC,SAI/BJ,GAAyB,QAAbzB,EAAoB,CACnC,MAAM6H,EAAcvN,EAAWH,EAAM+D,KAAKhI,MAAMkE,UAC3C4F,GACH9B,KAAKgQ,eAAe9O,GAEtBlB,KAAKyF,SAAS,CACZvJ,SAAUyN,IAERhO,EAAMgO,IACR3J,KAAKmJ,eAAeQ,EAAa,SAvOf,KA4OxBtE,aAAe,KAAO,MAAD,EACsBrF,KAAKhI,MAAtC8J,EADW,EACXA,SAAsB6B,GADX,EACDoK,WADC,EACWpK,QAE9B,GADA3D,KAAKhI,MAAMkW,gBAAkB9K,OAAO+K,aAAanO,KAAKhI,MAAMkW,iBACvDpM,IAAa6B,EAAQ,CAAC,MAAD,EACArH,EAAU0D,KAAKhI,OAA/B6D,EADgB,EAChBA,KAAMX,EADU,EACVA,MACd8E,KAAKhI,MAAMgW,UAAY5K,OAAOqE,cAAczH,KAAKhI,MAAMgW,UAEvDhO,KAAK4N,YAA8B,GAAlB9P,IACjBkC,KAAKyF,SAAS,CAAE5J,OAAMX,YApPF,KAwPxBkO,UAAY,KAAO,MAAD,EACepJ,KAAKhI,MAA5B8J,EADQ,EACRA,SAAU5F,EADF,EACEA,SAClB,GAAI4F,GAAYnG,EAAMO,GAAW,CAC/BjC,QAAQC,IAAI,uBACZ8F,KAAKyJ,qBAAqB3H,GAFK,QAGGoO,EAAoBlQ,KAAKhI,OACrD0R,EAAW,CACfnG,UAAU,EACVzB,SAAU,KACV0N,kBAAc5H,EACd1M,MAR6B,EAGvBA,MAMNW,KAT6B,EAGhBA,KAObK,SAV6B,EAGVA,UASrB8D,KAAKyF,SAASiE,GAEd1J,KAAKhI,MAAMgW,UAAY5K,OAAOqE,cAAczH,KAAKhI,MAAMgW,UAEvDhO,KAAK4N,YAAY9P,MA1QG,KA8QxBqS,YAAc,CAACnC,EAAkBoC,KAC/BhN,OAAOqE,cAAcuG,GACrB5K,OAAO+K,aAAaiC,IAhRE,KAmRxBC,UAAY,KACVrQ,KAAKhI,MAAMgW,UAAY5K,OAAOqE,cAAczH,KAAKhI,MAAMgW,UACvDhO,KAAKyF,SAAL,eACK6K,oBAAUhD,IADf,GAEKD,QArRLrN,KAAKhI,MAAL,eACKsY,oBAAUhD,IADf,GAEKD,KAFL,CAGEU,WAAY,IAsRhB1N,SAAU,MAAD,EACqEL,KAAKhI,MAAzEkD,EADD,EACCA,MAAOW,EADR,EACQA,KAAMK,EADd,EACcA,SAAU4F,EADxB,EACwBA,SAAUc,EADlC,EACkCA,QAASgD,EAD3C,EAC2CA,YAC1CI,GAFD,EACwDzC,SACvCvD,KAAKE,MAArB8F,aACAxO,EAASwO,EAATxO,KACR,OAAIwO,EAAYlO,QACP,aAEJ8N,EA8DH,kBAAC,IAAM6F,SAAP,KACE,kBAAC,GAAD,CACEvQ,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV4F,SAAUA,EACVsD,gBAAiBpF,KAAKoF,gBACtBmL,cAAe,OACflL,aAAcrF,KAAKqF,aACnBzC,QAASA,EACTW,SAAUvD,KAAKhI,MAAMuL,SACrBtC,SAAUjB,KAAKhI,MAAMiJ,SACrBC,OAAQlB,KAAKhI,MAAMkJ,OACnBmP,UAAWrQ,KAAKqQ,UAChBlP,MAAM,EACNU,SAAS,SACT4B,gBAAiBzD,KAAKhI,MAAMyL,gBAC5B6B,YAAatF,KAAKsF,YAClB3B,OAAQ3D,KAAKhI,MAAM2L,UA7ErB,yBAAKjK,UAAU,0BACH,OAATlC,GAAiB,kBAAC,EAAD,MAClB,wBAAIkC,UAAU,oBAAd,0BACA,wBAAIA,UAAU,QAAd,4BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,0BAAMmQ,SAAU7J,KAAK2N,iBACnB,yBAAKjU,UAAU,wBACb,kBAAC,KAAD,CACE8W,SAAU,EACVC,SAAU,EAEVzG,MAAOhK,KAAKhI,MAAM+V,WAElB9D,SAAW8D,IAET,MAAMN,EAAkBV,GAAgCgB,EAAY7S,GACpEkI,OAAO+G,aAAaC,QAAQ,iBAAkB2D,EAAWlK,YAEzD7D,KAAKyF,SAAS,CACZgI,kBAEAM,mBAKR,2BAAOtW,KAAK,SAASuS,MAAM,QAAQtQ,UAAU,qBAE/C,uBAAGC,MAAO,CAAEmT,UAAW,SAAvB,YAA2ChP,GAA3C,0BAEF,yBAAKpE,UAAU,YACb,wBAAIC,MAAO,CAAE+W,cAAe,SAC1B,wBAAIhX,UAAU,QACZ,kBAAC,IAAD,CAAMiI,GAAG,UAAT,sBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,0BAKNnK,GACA,yBAAKkC,UAAU,YACb,6BACE,8FAEA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,gBAwCHiX,mBAJU3Y,IAAD,CACtBgO,YAAahO,EAAMR,OAGNmZ,CAAyBjD,ICjdxC,SAASkD,GAAS1Q,GAAQ,MAChB2Q,EAA+B3Q,EAA/B2Q,IAAKC,EAA0B5Q,EAA1B4Q,SAAUC,EAAgB7Q,EAAhB6Q,YACvB,OACE,yBAAKrX,UAAU,kBACb,kBAAC,IAAD,CAAMiI,GAAIkP,GACR,yBAAKnX,UAAU,+BACb,kBAAC,EAAD,CAAMyG,KAAM2Q,MAGhB,uBAAGpX,UAAU,eAAeqX,IA4CnBC,OAvCf,WAkBE,OACE,yBAAKtX,UAAU,0BACb,wBAAIA,UAAU,8CAAd,aACA,yBAAKA,UAAU,8BApBD,CAChB,CACEmX,IAAK,QACLC,SAAU,OACVC,YAAa,cAEf,CACEF,IAAK,SACLC,SAAU,OACVC,YAAa,aAEf,CACEF,IAAK,QACLC,SAAU,OACVC,YAAa,cAOAnW,IAAI,CAACqW,EAAMpW,IACb,kBAAC+V,GAAD,eAAU/P,IAAG,eAAUhG,IAASoW,MAG3C,yBAAKvX,UAAU,qBACb,6BACA,2BACE,kBAAC,IAAD,CAAMiI,GAAG,UAAT,UAEF,2BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,uBC9CV,SAASuP,IAAS,KAAE/Q,IAClB,OACE,yBAAKzG,UAAU,cACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAMA,MAwJLgR,OAlJf,WAGE,OACE,yBAAKzX,UAAU,mBACb,iDACA,yJAIA,yIAIA,qHACA,yBAAKA,UAAU,OAdE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAe1CkB,IAAI,CAACc,EAAGb,IACb,kBAACqW,GAAD,CAAUrQ,IAAKhG,EAAGsF,KAAMzE,MAGnC,gGACA,wBAAIhC,UAAU,mBACZ,qCACA,sCACA,qCACA,qCAEF,mGACA,4HAES,4CAFT,OAEkC,+CAElC,mGACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAER,IACP,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,YAIjB,iEACA,wBAAIzG,UAAU,mBACZ,4CACA,4CACA,kDACA,iDAEF,qEACA,mDACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,YAIjB,wBAAIzG,UAAU,mBACZ,iDACA,iDACA,kDACA,4CAEF,iDACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,YAIjB,wBAAIzG,UAAU,mBACZ,2CACA,iDACA,iDACA,oEAEF,wIAEsB,4CAFtB,QAEgD,6CAFhD,wBAIA,yIAEiB,oCAFjB,0FAKA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,WAGf,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMyG,KAAK,YAIjB,wBAAIzG,UAAU,mBACZ,iDACA,iDACA,kDACA,iDAEF,sGACA,2BACE,kBAAC,IAAD,CAAMiI,GAAG,KAAT,gBCrGOyP,OA7Cf,SAAelR,GACb,MAAM1I,EAAO4J,YAAapJ,GAAUA,EAAMR,MA4B1C,OA1BAsM,oBAAU,KACR3K,SAEGkY,oBACArX,MAAK,SAAS6U,GACb,GAAIA,EAAOyC,WAET,IAAIC,EAAQ1C,EAAOyC,WAAWE,YAIhC,IAAIha,EAAOqX,EAAOrX,KAClByC,QAAQC,IAAIqX,EAAO/Z,MAEpB+P,OAAM,SAASC,GAEEA,EAAMiK,KACHjK,EAAMkK,QAEblK,EAAMmK,MAEDnK,EAAM8J,eAG1B,IAEE9Z,EAUH,yBAAKkC,UAAU,aACb,kBAAC,EAAD,OATA,yBAAKA,UAAU,aACb,4BAAQG,QAASoD,EAAsBvD,UAAU,OAAjD,aCzBR,MAEMoE,GAAS,CACb8T,YAAa,IACblS,UACAoG,UAAW,EACX+L,SAAU,MAGNxE,GAAkB,KACtB,MAAMhH,EAAczK,IACpB,OAAO,eACFU,EAAU,CACXT,KAAMwK,EAAY1J,MAAM,IACxBzB,MAAOmL,EAAY1J,MAAM,EAAG,MAHhC,CAKET,SAAU,MAIR4V,GAAiBC,IACrB,MAAMnP,EAAU,GAChB,IAAK,IAAI/H,EAAI,EAAGA,EAAIkX,EAAKlX,IACvB+H,EAAQ/H,GAAK,CACXmI,MAAO,EACP/E,MAAOH,GAAO4B,OAAO7E,IAGzB,OAAO+H,GAGH0K,GAAe,CACnB0E,WAAY,KACZpP,QAASkP,GAAc,GACvBlM,aAAa,EACb7C,KAAM,IACNQ,UAAU,EACVzB,SAAU,KACV0N,aAAc,KACdvO,SAAU,GACV8M,WAAY,EACZN,gBAAiB,IACjBuB,SAAU,IAGZ,MAAMiD,WAAqBxS,YACzBoM,YAAY3L,GACV4L,MAAM5L,GADW,KAQnByN,gBAAmBqE,IACjBhS,KAAKyF,SAAS,CACZuM,aACApP,QAASkP,GAAcE,KAEzBhS,KAAKyF,SAAS,CACZG,aAAa,KAdE,KAkBnByJ,kBAAoB,CAACtM,EAAMuM,KAAW,MAC5B1M,EAAY5C,KAAKhI,MAAjB4K,QACF0G,EAAW1G,EAAQG,GAAMC,MAAQsM,EAQvC,MAAO,CAPYpX,IAAO0K,EAAS,CACjC,CAACG,GAAO,CACNwG,OAAQ,CACNvG,MAAOsG,MAIOA,IA5BH,KA+BnBiG,cAAgB,KAAO,MAAD,EACWvP,KAAKhI,MAA5B8J,EADY,EACZA,SAAU5F,EADE,EACFA,SAClB,IAAKP,EAAMO,GAAW,CAAC,MAAD,EACC8D,KAAKqP,kBAAkBvN,GAAW,IAAhDkH,EADa,oBAEpBhJ,KAAKyF,SAAS,CACZ7C,QAASoG,EACTlH,SAAU,KACV0N,aAAc,KACdtT,SAAU,OAvCG,KA4CnBuN,qBAAwB3H,IAAc,MAAD,EACJ9B,KAAKqP,kBAAkBvN,EAAU,GAD7B,mBAG7B4H,EAAW,CACf9G,QAJiC,KAKjC3B,SALiC,MAENnD,GAAOgI,UAAYhE,EAAW,IAK3D9B,KAAKyF,SAASiE,IAnDG,KAsDnBsG,eAAkBlO,IAChB,IAAK9B,KAAKhI,MAAM8J,SAAU,CACxB,MACM5J,EAAS,CACb4J,WACA0N,cAHc,IAAI7C,MAAOC,WAK3B5M,KAAKyF,SAASvN,GAEd8H,KAAKkS,YAAc1I,WAAW,KAC5BxJ,KAAKuP,iBACJzR,GAAO8T,eAjEK,KAqEnBzI,eAAiB,CAACQ,EAAa7H,KAC7B,MAAM4H,EAAW,CACfnG,SAAU5H,EAAMgO,GAChBzN,SAAUyN,EACV7H,YAEE4H,EAASnG,WACX4K,aAAanO,KAAKkS,aAClB1I,WAAW,KACTxJ,KAAKoJ,aACJ,MAELpJ,KAAKyF,SAASiE,IAjFG,KAoFnBtE,gBAAmBnJ,IAAU,MAAD,EACK+D,KAAKhI,MAA5BuL,EADkB,EAClBA,SAAUzB,EADQ,EACRA,SAClB,IAAKyB,GAAyB,OAAbzB,EAAmB,CAClC,MAAM6H,EAAcvN,EAAWH,EAAM+D,KAAKhI,MAAMkE,UAChD8D,KAAKyF,SAAS,CACZvJ,SAAUyN,IAERhO,EAAMgO,IACR3J,KAAKmJ,eAAeQ,EAAa7H,KA5FpB,KAiGnBe,kBAAqBsP,IAEF,OADInS,KAAKhI,MAAlB8J,UAEN9B,KAAKgQ,eAAemC,IApGL,KAwGnB9M,aAAe,KACb,MAAMqE,EAAWpN,EAAU0D,KAAKhI,OAChCgI,KAAKyF,SAASiE,IA1GG,KA6GnBN,UAAY,KAAO,MAAD,EACepJ,KAAKhI,MAA5B8J,EADQ,EACRA,SAAU5F,EADF,EACEA,SAClB,GAAIP,EAAMO,GAAW,CACnBjC,QAAQC,IAAI,uBACZ,MAAMmP,EAAYrJ,KAAKyJ,qBAAqB3H,GACtC4H,EAAQ,eACTL,EADS,CAEZ9F,UAAU,EACVzB,SAAU,KACV0N,aAAc,MACXU,EAAoBlQ,KAAKhI,QAE9BgI,KAAKyF,SAASiE,GAEhBjC,cAAczH,KAAKgO,UACnBxE,WAAW,KACTxJ,KAAKgO,SAAW1F,YAAYtI,KAAKqO,QAASrO,KAAKhI,MAAMyV,kBACpD3P,GAAO+T,WA9HO,KAiInBxB,UAAY,KACV5I,cAAczH,KAAKgO,UACnBhO,KAAKyF,SAAL,eACK6K,oBAAUhD,IADf,GAEKD,QAnILrN,KAAKhI,MAAL,eACKsY,oBAAUhD,IADf,GAEKD,MAqIPhN,SAAU,MAAD,EACoEL,KAAKhI,MAAxEkD,EADD,EACCA,MAAOW,EADR,EACQA,KAAMK,EADd,EACcA,SAAU4F,EADxB,EACwBA,SAAUc,EADlC,EACkCA,QAASoP,EAD3C,EAC2CA,WAD3C,EACuDzO,SAE9D,OADAtJ,QAAQC,IAAI0I,GACPoP,EA4BH,kBAAC,IAAMvG,SAAP,KACE,kBAAC,GAAD,CACEvQ,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV4F,SAAUA,EACVsD,gBAAiBpF,KAAKoF,gBACtBvC,kBAAmB7C,KAAK6C,kBACxB0N,cAAevQ,KAAKuQ,cACpB3N,QAASA,EACTW,SAAUvD,KAAKhI,MAAMuL,SACrBtC,SAAUjB,KAAKhI,MAAMiJ,SACrBC,OAAQlB,KAAKhI,MAAM+K,KACnBsN,UAAWrQ,KAAKqQ,UAChBlP,MAAM,EACNqC,cAAc,EACd3B,SAAS,mBA1CX,yBAAKnI,UAAU,aACb,wBAAIA,UAAU,QAAd,4BACA,yBAAKA,UAAU,mBACZ,IAAIY,MAAM,GAAGC,QAAQK,IAAKC,GAEvB,yBACEgG,IAAG,kBAAahG,GAChBhB,QAAS,KACPmG,KAAK2N,gBAAgB9S,EAAI,IAE3BnB,UAAU,cAEV,4BAAQA,UAAU,gBAAgBmB,EAAI,MAK9C,6BACE,2BACE,kBAAC,IAAD,CAAM8G,GAAG,SAAT,YA8BCsQ,UChLAG,OAnEf,SAAelS,GACb,MAAM8F,EAAc5E,YAAapJ,GAAUA,EAAMR,MACzCA,EAASwO,EAATxO,KAFY,EAGM0L,mBAAS,MAHf,mBAGbmP,EAHa,KAGNC,EAHM,KAkBpB,OAdiB/Y,cAEjBuK,oBAAU,KACR,MAAMyO,EAAQ,uCAAG,sBAAAhX,EAAA,sDACfoU,KAAMtL,IAAN,0BAA6B7M,EAAK2P,MAAOnN,KAAMwY,IAC7CF,EAASE,EAASjV,QAFL,2CAAH,qDAMTyI,EAAYlO,SAAoB,OAATN,GAC1B+a,KAED,CAACvM,EAAYlO,UAEZkO,EAAYlO,QACP,aAGI,OAATN,EAEA,yBAAKkC,UAAU,kBACb,oDACA,2BACE,4BAAQG,QAASoD,EAAsBvD,UAAU,gBAAjD,aASN,yBAAKA,UAAU,0BACb,0CACA,2BAAOA,UAAU,uBACf,+BACE,4BACE,0CACA,4CACA,oDAIJ,+BACG2Y,GACCA,EAAMzX,IAAI,CAAC6X,EAAK5X,IAEZ,wBAAIgG,IAAG,gBAAWhG,IAChB,4BAAK4X,EAAI5C,kBACT,4BAAK4C,EAAIC,cACT,4BAAKpQ,KAAKuK,MAAa4F,EAAIE,UAAYF,EAAIC,aAA3B,KAAhB,SAMZ,2BACE,kBAAC,IAAD,CAAM/Q,GAAG,KAAT,gB,oBC/COiR,OApBE,EAAGC,WAAUC,QAASxI,KAEnC,oCACE,kBAACxF,GAAA,EAAD,CAAOC,KAAMuF,GACX,kBAACxF,GAAA,EAAME,OAAP,KACE,kBAACF,GAAA,EAAMG,MAAP,8BAEF,kBAACH,GAAA,EAAMI,KAAP,KAAa2N,GACb,kBAAC/N,GAAA,EAAMiO,OAAP,QCYR,MAEMjV,GACM,IADNA,GAIM,KAGNuP,GAAmB2F,IACvB,MAIMC,EAJcD,IACX1Q,KAAKuK,OAAOmG,EAAe,GAAK,GAGzBE,CAAWF,GACrB3M,EAAczK,IACpB,OAAO,eACFU,EACD,CACET,KAAMwK,GAER,CAAE9J,UAAWyW,EAAcxW,YAAayW,IAL5C,CAOE/W,SAAU,MAURoR,GAAe,CACnB1K,QAAS,CACP2K,IAAK,CACHvK,MAAO,EACP/E,MAjCJyB,GAiCyB,KAGzBkG,aAAa,EACb7C,KAAM,MACNQ,UAAU,EACVtC,UAAU,EACVe,UAAW,KACXC,YAAa,KACbF,UAAW,GACXoR,YAAa,KACbH,aAAc,GACd1I,cAAc,EACd8I,UAAW,QAOb,MAAMC,WAAe5T,YACnBoM,YAAY3L,GACV4L,MAAM5L,GADW,KAOnByN,gBAAmBlF,IACjBA,EAAEC,iBADqB,MAEfsK,EAAiBhT,KAAKhI,MAAtBgb,aACFM,EAAYjG,GAAgB2F,GAC5BhR,EAAY,IAAI2K,KACtB3M,KAAKyF,SAAL,aACEG,aAAa,EACb5D,YACAC,YAAa,GACVqR,EAJL,CAKEH,YAAalY,EAAUqY,EAAUpY,UAEnCkI,OAAOmQ,OAASjL,YAAY,KAC1B,MAAMrG,EAAcK,KAAKuK,QAAO,IAAIF,MAAOC,UAAY5K,EAAU4K,WAAa,KAC9E5M,KAAKyF,SAAS,CACZxD,iBAED,MAxBc,KA2BnBkK,kBAAoB,OA3BD,KA6BnBkD,kBAAoB,CAACtM,EAAMuM,KAAW,MAC5B1M,EAAY5C,KAAKhI,MAAjB4K,QACF0G,EAAW1G,EAAQG,GAAMC,MAAQsM,EAQvC,MAAO,CAPYpX,IAAO0K,EAAS,CACjC,CAACG,GAAO,CACNwG,OAAQ,CACNvG,MAAOsG,MAIOA,IAvCH,KA0CnB0G,eAAkBlO,IAChB,IAAK9B,KAAKhI,MAAM8J,SAAU,CACxB,MACM5J,EAAS,CACb4J,WACA0N,cAHc,IAAI7C,MAAOC,WAK3B5M,KAAKyF,SAASvN,GAEd8H,KAAKkS,YAAc1I,WAAW,KAC5BxJ,KAAKuP,iBACJzR,MArDY,KAyDnBqL,eAAiB,CAACQ,EAAa7H,KAC7B,MAAM4H,EAAW,CACfnG,SAAU5H,EAAMgO,GAChBzN,SAAUyN,EACV7H,YAEE4H,EAASnG,WACX4K,aAAanO,KAAKkS,aAClB1I,WAAW,KACTxJ,KAAKoJ,aACJ,MAELpJ,KAAKyF,SAASiE,IArEG,KAwEnB6G,cAAgB,OAxEG,KA4EnB5F,mBAAqB,CAAC6I,GAAU,KAC9BxT,KAAKyF,SAAUyB,IACb,GAAqC,IAAjCA,EAAahL,SAASV,SACpBgY,IAAY7X,EAAMuL,EAAahL,WACjC,MAAO,CACLA,SAAU,OAjFD,KAwFnBkJ,gBAAmBnJ,IACjB,MAAM0N,EAAcvN,EAAWH,EAAM+D,KAAKhI,MAAMkE,UAErB,IAAvByN,EAAYnO,SACVG,EAAMgO,IACR1P,QAAQC,IAAI,aACZ8F,KAAKyF,SAAUyB,IACb9D,OAAOoG,WAAW,KAChBxJ,KAAKyF,SAAS,CACZ6E,cAAc,IAEhBtK,KAAK2K,oBAAmB,IACvB,KAN2B,MAOtB5I,EAAcmF,EAAdnF,UAOR,OANiBA,EACdnH,IAAKgO,IACW6K,kBAAQ9J,EAAY+J,OAAQ9K,IAG5C+K,MAAO9E,GAAWA,GAQd,CACL9M,UAFmB,IAAIA,EAAW4H,EAAY+J,QAG9CpJ,cAAc,EACd8I,UAAW,QATJ,CACL9I,cAAc,EACd8I,UAAW,sBAWjBnZ,QAAQC,IAAI,qBACZkJ,OAAOoG,WAAWxJ,KAAK2K,mBAAoB,QAI/C3K,KAAKyF,SAAL,eArCiB,GAqCjB,CAEEvJ,SAAUyN,MAjIK,KAqInBtE,aAAe,OArII,KA2InB+D,UAAY,KAAO,MAAD,EACepJ,KAAKhI,MAA5B8J,EADQ,EACRA,SAAU5F,EADF,EACEA,SAClB,GAAIP,EAAMO,GAAW,CACnBjC,QAAQC,IAAI,uBACZ,MAAMmP,EAAYrJ,KAAKyJ,qBAAqB3H,GACtC4H,EAAQ,eACTL,EADS,CAEZ9F,UAAU,EACVzB,SAAU,KACV0N,aAAc,MACXU,EAAoBlQ,KAAKhI,QAE9BgI,KAAKyF,SAASiE,GAEhBjC,cAAczH,KAAKgO,UACnBxE,WAAW,KACTxJ,KAAKgO,SAAW1F,YAAYtI,KAAKqO,QAASrO,KAAKhI,MAAMyV,kBACpD3P,KA5Jc,KA+JnBuS,UAAY,KACV5I,cAAczH,KAAKgO,UACnBhO,KAAKyF,SAAL,eACK6K,oBAAUhD,IADf,GAEKD,QAjKLrN,KAAKhI,MAAL,eACKsY,oBAAUhD,KAoKjBjN,SAAU,MAAD,EAWHL,KAAKhI,MATPkD,EAFK,EAELA,MACAW,EAHK,EAGLA,KACAK,EAJK,EAILA,SACA4F,EALK,EAKLA,SACAc,EANK,EAMLA,QACAgD,EAPK,EAOLA,YAEA7D,GATK,EAQLwB,SARK,EASLxB,WACAuI,EAVK,EAULA,aAEMtE,EAAgBhG,KAAKE,MAArB8F,YACAxO,EAASwO,EAATxO,KACR,OAAIwO,EAAYlO,QACP,aAEJ8N,EAqDH,kBAAC,IAAM6F,SAAP,KACE,kBAAC,GAAD,CAAOqH,QAASxI,GACd,uBAAG5Q,UAAU,0BAA0BsG,KAAKhI,MAAMob,YAEpD,kBAAC,GAAD,CACElY,MAAOA,EACPW,KAAMA,EACNK,SAAUA,EACV4F,SAAUA,EACVsD,gBAAiBpF,KAAKoF,gBACtBmL,cAAevQ,KAAKuQ,cACpB3N,QAASA,EACTW,SAAUvD,KAAKhI,MAAMuL,SACrBtC,SAAUjB,KAAKhI,MAAMiJ,SACrBC,OAAQlB,KAAKhI,MAAM+K,KACnBsN,UAAWrQ,KAAKqQ,UAChBlP,MAAM,EACNU,SAAS,SACTE,UAAWA,EACXC,UAAWhC,KAAKhI,MAAMgK,UACtBC,YAAajC,KAAKhI,MAAMiK,eAvE1B,yBAAKvI,UAAU,aACH,OAATlC,GAAiB,kBAAC,EAAD,MAClB,2CACA,2DACA,yBAAKkC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,KAAD,CACEka,IAAMC,IACJ7T,KAAK8T,gBAAkBD,GAEzBE,IAAK,EACLC,IAAK,EACLC,YAAY,aACZC,SAAS,EAETC,OAASC,GAAM,EAAIA,EACnBpK,MAAO7N,OAAO6D,KAAKhI,MAAMgb,cAAgB,EACzC/I,SAAWoK,IACTrU,KAAKyF,SAAS,CACZuN,aAAsB,EAARqB,OAIpB,0BAAMxK,SAAU7J,KAAK2N,iBACnB,2BAAOlW,KAAK,SAASuS,MAAM,QAAQtQ,UAAU,UAGjD,yBAAKA,UAAU,OACb,yBAAKC,MAAO,CAAEmT,UAAW,QAAUpT,UAAU,WAC3C,uBAAGC,MAAO,CAAEmT,UAAW,SACrB,kBAAC,IAAD,CAAMnL,GAAG,SAAT,uBAEAnK,GACA,kBAAC,WAAD,KACE,6BACA,oFAEA,2BACE,4BAAQqC,QAASoD,EAAsBvD,UAAU,OAAjD,kBA4CPiX,mBAJU3Y,IAAD,CACtBgO,YAAahO,EAAMR,OAGNmZ,CAAyB0C,IC/UxC,MAAMiB,WAAe7U,YACnBY,SACE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkU,OAAK,EAACC,KAAK,IAAIC,UAAWzD,KACjC,kBAAC,IAAD,CAAOwD,KAAK,QAAQC,UAAW1O,KAC/B,kBAAC,IAAD,CAAOyO,KAAK,SAASC,UAAW7I,KAChC,kBAAC,IAAD,CAAO4I,KAAK,mBAAmBC,UAAWpK,KAC1C,kBAAC,IAAD,CAAOmK,KAAK,QAAQC,UAAW/G,KAC/B,kBAAC,IAAD,CAAO8G,KAAK,SAASC,UAAWxC,KAChC,kBAAC,IAAD,CAAOuC,KAAK,SAASC,UAAWtD,KAChC,kBAAC,IAAD,CAAOqD,KAAK,SAASC,UAAWrD,KAChC,kBAAC,IAAD,CAAOoD,KAAK,SAASC,UAAWrC,KAChC,kBAAC,IAAD,CAAOoC,KAAK,UAAUC,UAAWpB,SAQ9BiB,UCyBAI,OApDf,SAAaxU,GAAQ,MAAD,EACMgD,mBAAS,MADf,mBAEZ5J,GAFY,UAEDC,eA+CjB,OA7CAuK,oBAAU,KACR3K,IAASW,OAAO6a,mBAAoBnd,IAClC,GAAIA,EAAM,CACR,MAAMI,EAAWwL,OAAO+G,aAAa2D,QAAQ,aAAetW,EAAKod,YAAYxU,MAAM,KAAK,GAClFyU,EAAS,CACbD,YAAapd,EAAKod,YAClBjD,MAAOna,EAAKma,MACZmD,cAAetd,EAAKsd,cACpBC,SAAUvd,EAAKud,SACfC,YAAaxd,EAAKwd,YAClB7N,IAAK3P,EAAK2P,IACV8N,aAAczd,EAAKyd,aACnBrd,YAEF0B,EAAS/B,EAAW,CAAEO,SAAS,EAAON,KAAMqd,KAC5ClF,KACGtL,IADH,oBACoB7M,EAAK2P,MACtBnN,KAAM6U,IACL5U,QAAQC,IAAI,wBAEbqN,MAAOwI,IACFA,EAAIyC,UAAoC,MAAxBzC,EAAIyC,SAAS0C,QAC/Bjb,QAAQC,IAAI,uBACZyV,KACGC,KAAK,YAAa,CACjBzI,IAAK3P,EAAK2P,IACVrE,KAAM+R,IAEP7a,KAAK,KACJC,QAAQC,IAAI,kCAEbqN,MAAOwI,IACN9V,QAAQC,IAAI,yBAA0B6V,MAG1C9V,QAAQC,IAAI,oDAIlBD,QAAQC,IAAI,iBACZZ,EAAS/B,EAAW,CAAEO,SAAS,EAAON,KAAM,WAG/C,IAEI,kBAAC,GAAD,OCpDT2d,IAAS9U,OACP,kBAAC,IAAD,CAAUjI,MAAOA,GACf,kBAAC,GAAD,OAEFgd,SAASC,eAAe,U,mBCX1BC,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.7b7756de.chunk.js","sourcesContent":["import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport update from 'immutability-helper'\nimport { Action as ReduxAction, Reducer } from 'redux'\n\ninterface UserInfo {\n  nickname?: string\n}\n\nexport interface User {\n  loading: boolean\n  user: UserInfo\n}\n\ninterface Action extends ReduxAction {\n  payload: any\n}\n\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_NICKNAME = 'UPDATE_NICKNAME'\n\nexport const updateUser = (user: UserInfo) => ({\n  type: UPDATE_USER,\n  payload: user,\n})\n\nexport const logOut = () => ({\n  type: 'LOGOUT',\n})\n\nexport const updateNickname = (nickname: string) => ({\n  type: UPDATE_NICKNAME,\n  payload: nickname,\n})\n\nexport const defaultUser: User = { loading: true, user: {} }\n\nconst userReducer = (state = defaultUser, action: Action) => {\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case UPDATE_NICKNAME:\n      const newState = update(state, {\n        user: { nickname: { $set: action.payload } },\n      })\n      return newState\n    case 'LOGOUT':\n      return { loading: false, user: null }\n    default:\n      return state\n  }\n}\n\nconst reducers = {\n  user: userReducer,\n}\n\nconst store = createStore(\n  combineReducers(reducers),\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n)\n\nexport default store\n","const firebaseConfig = {\n  apiKey: 'AIzaSyCLA_RFXrPvBdN_vrApCUlj28a82ownuzg',\n  authDomain: 'fire-set.firebaseapp.com',\n  databaseURL: 'https://fire-set.firebaseio.com',\n  projectId: 'fire-set',\n  storageBucket: 'fire-set.appspot.com',\n  messagingSenderId: '958559518798',\n  appId: '1:958559518798:web:ec451bbfb4ac03f30ec31f',\n  measurementId: 'G-FCHHM3FEZE',\n}\n\nexport default firebaseConfig\n","import * as firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './firebaseConfig'\nimport 'firebase/auth'\n\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nconst firestore = firebase.firestore()\n\nexport default firestore\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation,\n} from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { logOut } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\n\nfunction Signout() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch(logOut())\n        console.log('Signed out.')\n        history.push('/')\n      })\n  }\n\n  return (\n    <div className=\"my-3\" style={{ cursor: 'pointer' }}>\n      <p className=\"text-right text-white\">\n        <a className=\"btn btn-danger\" onClick={signOut}>\n          Sign Out\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Signout\n","import { shuffle, find, isNil, random } from 'lodash'\nimport * as firebase from 'firebase/app'\nimport { GameState, Player } from './models'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nexport const range = (n: number) => {\n  return [...Array(n).keys()]\n}\n\nexport const getRandomCard = () => {\n  const result = Array(4)\n    .fill(1)\n    .map(() => {\n      return random(2).toString()\n    })\n    .join('')\n  return result\n}\n\nexport const getAdjustmentFactor = (numSets: number) => {\n  if (numSets === 1) {\n    return 0.75\n  }\n  if (numSets === 2) {\n    return 0.9\n  }\n  if (numSets === 3) {\n    return 1.1\n  }\n  if (numSets === 4) {\n    return 1.3\n  }\n  return 1.5\n}\n\nconst displaySet = (tuple: Array<number>, rowSize: number = 3) => {\n  let matrix\n  if (rowSize === 4) {\n    matrix = range(3).map((i) => {\n      const row = range(4).map((j) => {\n        if (tuple.includes(4 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  } else {\n    matrix = range(4).map((i) => {\n      const row = range(3).map((j) => {\n        if (tuple.includes(3 * i + j)) {\n          return 'x'\n        }\n        return 'o'\n      })\n      return row.join('')\n    })\n  }\n  console.log(matrix.join('\\n'))\n}\n\nexport const serializeGame = (state: {\n  board: Array<string>\n  deck: Array<string>\n  selected: Array<string>\n}) => {\n  const status = JSON.stringify({\n    board: state.board,\n    deck: state.deck,\n    selected: state.selected,\n  })\n  return status\n}\n\nexport const countSets = (board: string[], { debug = false, returnWhenFound = false } = {}) => {\n  let count = 0\n  let candidate = []\n  for (let a = 0; a < board.length - 2; a++) {\n    for (let b = a + 1; b < board.length - 1; b++) {\n      for (let c = b + 1; c < board.length; c++) {\n        candidate = [board[a], board[b], board[c]]\n        if (isSet(candidate)) {\n          if (debug) {\n            displaySet([a, b, c])\n          }\n          count++\n          if (returnWhenFound) {\n            return count\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nexport const makeDeck = (): string[] => {\n  let deck: string[] = []\n  range(3).forEach((c) => {\n    range(3).forEach((n) => {\n      range(3).forEach((s) => {\n        range(3).forEach((f) => {\n          const card = '' + c + s + n + f\n          deck.push(card)\n        })\n      })\n    })\n  })\n  return deck\n}\n\nexport const isSet = (selected: Array<string>) => {\n  if (selected.length !== 3) {\n    return false\n  }\n  const [a, b, c] = selected\n  for (let i = 0; i < 4; i++) {\n    const sum = Number(a[i]) + Number(b[i]) + Number(c[i])\n    if (sum % 3 !== 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const nameThird = (a: string, b: string) => {\n  let features\n  let missing\n  let result = ''\n  for (let i = 0; i < 4; i++) {\n    if (a[i] === b[i]) {\n      result = result + a[i]\n    } else {\n      features = Number(a[i]) + Number(b[i])\n      missing = (3 - features).toString()\n      result = result + missing\n    }\n  }\n  return result.trim()\n}\n\nexport const cardToggle = (card: string, selected: string[]) => {\n  if (selected.includes(card)) {\n    return selected.filter((c) => c !== card)\n  } else {\n    return [...selected, card]\n  }\n}\n\nexport const reshuffle = ({ board = [], deck }: GameState, boardSize = 12, minimumSets = 1) => {\n  let newDeck = shuffle([...board, ...deck])\n  while (\n    countSets(newDeck.slice(0, boardSize)) < minimumSets &&\n    countSets(newDeck, { returnWhenFound: true }) > 0\n  ) {\n    newDeck = shuffle(newDeck)\n  }\n  return {\n    deck: newDeck.slice(boardSize),\n    board: newDeck.slice(0, boardSize),\n  }\n}\n\nexport const removeSelected = (state: { board: string[]; deck: string[]; selected: string[] }) => {\n  const { board, deck, selected } = state\n  const newCards = deck.slice(0, 3)\n  let newBoard = [...board]\n  let newDeck = deck.slice(3)\n  selected.forEach((c, i) => {\n    let index = newBoard.indexOf(c)\n    newBoard[index] = newCards[i]\n  })\n  while (countSets(newBoard) === 0) {\n    ;({ deck: newDeck, board: newBoard } = reshuffle({\n      board: newBoard,\n      deck: newDeck,\n    }))\n  }\n\n  return {\n    deck: newDeck,\n    board: newBoard,\n    selected: [],\n  }\n}\n\nexport const handleGoogleSignIn = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function(result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = result.credential as firebase.auth.OAuthCredential\n      var token = credential.accessToken\n      // The signed-in user info.\n      var user = result.user\n      console.log(token, user)\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code\n      var errorMessage = error.message\n      // The email of the user's account used.\n      var email = error.email\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential\n      // ...\n    })\n}\n\nexport const handleGoogleRedirect = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase.auth().signInWithRedirect(provider)\n}\n\nexport const updateGame = (reference: string | any, data: any) => {\n  let game\n  if (typeof reference === 'string') {\n    game = firestore.collection('games').doc(reference)\n  } else {\n    game = reference\n  }\n  game.update({\n    ...data,\n    lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n  })\n}\n\nexport const sendAction = (gameId: string, action: any) => {\n  const actions = firestore\n    .collection('games')\n    .doc(gameId)\n    .collection('actions')\n  actions\n    .add({\n      ...action,\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(function(docRef) {\n      if (action.type === 'found') {\n        const docId = docRef.id\n        console.log('Document written with ID: ', docId)\n        const pendingActionId = docId\n        return pendingActionId\n        // TODO: Trigger message if action isnt processed in reasonable time\n      }\n    })\n}\n\nexport const playerNotRegistered = (players: Player[], name: string) => {\n  const player = find(players, ['name', name])\n  return isNil(player)\n}\n","import React, { Component, Fragment } from 'react'\nimport { range } from '../utils/helpers'\nimport './card.css'\n\nconst config = {\n  width: 120,\n  height: 200,\n  strokeWidth: 4,\n  padding: 25,\n}\n\nconst Rectangle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <g>\n      {/* triangle */}\n      {/* <polygon\n    points={`${padding},${height - padding}\n    ${width / 2},${padding}\n    ${width - padding},${height - padding}`}\n    style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n  /> */}\n      {/* rectangle */}\n      <polygon\n        points={`${padding},${padding}\n    ${width - padding},${padding}\n    ${width - padding},${height - padding}\n    ${padding},${height - padding}`}\n        style={{ fill: fill, stroke: color, strokeWidth: strokeWidth }}\n      />\n    </g>\n  )\n}\n\nconst Squiggle = ({ fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  return (\n    <svg width=\"120\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect fill=\"#fff\" id=\"canvas_background\" height=\"202\" width=\"122\" y=\"-1\" x=\"-1\" />\n        <g\n          display=\"none\"\n          overflow=\"visible\"\n          y=\"0\"\n          x=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n          id=\"canvasGrid\"\n        >\n          <rect fill=\"#fff\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n        </g>\n      </g>\n      <g>\n        <path\n          stroke={color}\n          transform=\"\n          rotate(270,58.8,98)\n          scale(0.8 1)\n          translate(10 0)\n          \"\n          id=\"svg_5\"\n          d=\"\n          m-17.49,66\n          c50.83,-35.45 101.7,35.45\n          152.5,0\n          c30,-10 30,43.8\n          0,63.8\n          c-50.8,35.45 -101.6,-35.45\n          -152.5,0\n          c-30,15 -30,-45\n          0,-63.59\n          z\n          \"\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={strokeWidth}\n          fill={fill}\n        />\n      </g>\n    </svg>\n  )\n}\n\nconst Shape = ({ shape, fill, color }) => {\n  let { padding, height, width, strokeWidth } = config\n  if (shape === '0') {\n    padding = padding + 1\n    return <Squiggle fill={fill} color={color} />\n  }\n  if (shape === '1') {\n    return (\n      <g>\n        <ellipse\n          stroke={color}\n          ry={(height - 2 * padding) / 2}\n          rx={(width - 2 * padding) / 2}\n          cy={height / 2}\n          cx={width / 2}\n          fillOpacity=\"null\"\n          strokeOpacity=\"null\"\n          strokeWidth={config.strokeWidth}\n          fill={fill}\n        />\n      </g>\n    )\n  }\n  if (shape === '2') {\n    return (\n      <g>\n        {/* diamond */}\n\n        <polygon\n          points={`${padding},${height / 2}\n          ${width / 2},${padding}\n          ${width - padding},${height / 2}\n          ${width / 2},${height - padding}`}\n          style={{ fill: fill, stroke: color, strokeWidth: config.strokeWidth }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Card extends Component {\n  colors = {\n    0: '#00A91D',\n    1: '#311b92',\n    2: '#FF0000',\n    white: '#fff',\n  }\n\n  getFill = (color, fill) => {\n    if (fill === '1') {\n      return `url(#card-${color}-${fill})`\n    }\n    if (fill === '2') {\n      return this.colors[color]\n    }\n    return this.colors.white\n  }\n\n  drawShape = () => {\n    const [, color, shape, fill] = this.props.desc.split('')\n    return (\n      <Fragment>\n        <g>\n          <title>background</title>\n          <rect fill={this.colors.white} id=\"canvas_background\" y=\"-1\" x=\"-1\" />\n          <g\n            display=\"none\"\n            overflow=\"visible\"\n            y=\"0\"\n            x=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            id=\"canvasGrid\"\n          >\n            <rect strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" />\n          </g>\n        </g>\n        <Shape shape={shape} fill={this.getFill(color, fill)} color={this.colors[color]} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    const [number, color, , fill] = this.props.desc.split('')\n    return (\n      <div className=\"game-card\">\n        <svg width=\"0\" height=\"0\">\n          <pattern\n            id={`card-${color}-${fill}`}\n            width={120 / 12}\n            height=\"10\"\n            patternTransform=\"rotate(45 0 0)\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <line\n              x1=\"0\"\n              y1=\"0\"\n              x2=\"0\"\n              y2=\"10\"\n              style={{ stroke: this.colors[color], strokeWidth: '5' }}\n            />\n          </pattern>\n        </svg>\n\n        {range(Number(number) + 1).map((i) => {\n          return (\n            <svg\n              key={i}\n              className=\"shape\"\n              viewBox={`0 0 ${config.width} ${config.height}`}\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              {this.drawShape()}\n            </svg>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Card\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport sadTrombone from '../assets/sad_trombone.mp3'\nimport applause from '../assets/applause.mp3'\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction GameOver(props) {\n  const { gameOver: winnerName, myName, solo } = props\n  const finalSound = () => {\n    const soundEffect = winnerName === myName ? applause : sadTrombone\n    return <audio src={soundEffect} autoPlay />\n  }\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n\n  return (\n    <div className=\"game-over container mt-5\">\n      {finalSound()}\n      <div className=\"row justify-content-center\">\n        <div className=\"col col-md-6\">\n          <div className=\"card shadow\">\n            <h3 className=\"text-center mt-3\">GAME OVER!</h3>\n            <p className=\"text-center mb-4\">Winner: {winnerName} </p>\n            <div className=\"row justify-content-center\">\n              <div className=\"col-4\">\n                <p className=\"text-center\">\n                  <Link to=\"/\">Main</Link>\n                </p>\n              </div>\n              {solo && user !== null && (\n                <div className=\"col-4\">\n                  <p className=\"text-center\">\n                    <Link to=\"/stats\">Stats</Link>\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameOver\n","export const colors = ['light-blue', 'pink', 'amber', 'light-green', 'purple', 'orange']\n","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { countSets } from '../utils/helpers'\nimport { colors } from '../config'\n\nconst formatTime = (seconds) => {\n  const pad = (ss) => {\n    var p = '00'\n    var result = (p + ss).slice(-p.length)\n    return result\n  }\n  const mm = Math.floor(seconds / 60)\n  const ss = seconds - 60 * mm\n  return `${mm}:${pad(ss)}`\n}\n\nfunction TopBar({ gameMode, deck, board, declarer, setsFound, startTime, elapsedTime }) {\n  const sets = countSets(board)\n  switch (gameMode) {\n    case 'shared-device':\n      return null\n    case 'versus':\n      return (\n        <div className={`topbar py-2 bg-${declarer ? 'light' : 'dark'}-orange`}>\n          <nav className=\"container text-white\">\n            <div className=\"row justify-content-between text-center\">\n              <div className=\"col\">Sets: {sets}</div>\n              <div className=\"col\">{declarer && <>SET! {declarer}</>}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    case 'puzzle':\n      return (\n        <div className=\"navbar-fixed\">\n          <nav>\n            <div\n              className=\"nav-wrapper\"\n              style={{ display: 'flex', justifyContent: 'space-between' }}\n            >\n              <div>Total Sets: {sets}</div>\n              <div>Remaining: {sets - setsFound.length}</div>\n              <div>Time: {formatTime(elapsedTime)}</div>\n            </div>\n          </nav>\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nexport default TopBar\n","import React, { useEffect, useState, Component, Fragment } from 'react'\nimport { isEmpty, map, debounce, get } from 'lodash'\nimport { countSets, getRandomCard } from '../utils/helpers'\nimport Card from './Card'\nimport GameOver from './GameOver'\nimport TopBar from './TopBar'\nimport Modal from 'react-bootstrap/Modal'\n\nfunction SharedPlayersDisplay({ players, declarer, handlePlayerClick }) {\n  return (\n    <div className=\"row my-4 text-center justify-content-between\">\n      {players.map((info) => {\n        return (\n          <div\n            className={`col-2 bg-${info.color} ${info.name == declarer ? 'active-player' : ''}`}\n            onClick={() => {\n              handlePlayerClick(info.name)\n            }}\n            key={info.name}\n          >\n            <p className=\"my-2 align-middle\">{info.name == declarer ? 'SET!' : info.score}</p>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nfunction Board(props) {\n  const [sets, setSets] = useState(null)\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight)\n  const {\n    board,\n    selected,\n    deck,\n    declarer,\n    players,\n    gameOver,\n    myName,\n    setFound,\n    sharedDevice,\n    solo,\n    gameMode,\n    cpuGuessCounter,\n  } = props\n\n  const shownBoard = !props.paused ? board : Array(board.length).fill(getRandomCard())\n\n  useEffect(() => {\n    const resize = debounce(() => {\n      setWindowHeight(window.innerHeight)\n    }, 150)\n\n    window.addEventListener('resize', resize)\n\n    return function cleanup() {\n      window.removeEventListener('resize', resize)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSets(countSets(board, { debug: process.env.NODE_ENV !== 'production' }))\n  }, [board])\n\n  const getBorderColor = ({ declarer, players }) => {\n    if (declarer) {\n      return get(players, `${declarer}.color`, '')\n    }\n    return get(players, `${myName}.color`, '')\n  }\n\n  const borderColor = getBorderColor(props)\n\n  if (!isEmpty(gameOver)) {\n    return <GameOver gameOver={gameOver} myName={myName} solo={solo} />\n  }\n\n  const playersArray = map(players, (info, name) => {\n    return {\n      name,\n      ...info,\n    }\n  })\n\n  const topBoxes = Math.ceil(playersArray.length / 2)\n  const topPlayers = playersArray.slice(0, topBoxes)\n  const bottomPlayers = playersArray.slice(topBoxes)\n\n  return (\n    <Fragment>\n      {(isEmpty(players) || !Object.keys(players).includes(myName)) && (\n        <Modal show>\n          <Modal.Header>\n            <Modal.Title>Waiting to join...</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Players:</h4>\n            <ul className=\"collection\">\n              {map(players, (info, name) => {\n                return (\n                  <li key={name} className=\"collection-item\">\n                    <span className={`player-name`}>\n                      {name} {info.host && '(host)'}\n                    </span>\n                  </li>\n                )\n              })}\n            </ul>\n          </Modal.Body>\n        </Modal>\n      )}\n\n      <TopBar {...props} />\n      <div className=\"container\">\n        {sharedDevice && (\n          <SharedPlayersDisplay\n            players={topPlayers}\n            declarer={declarer}\n            handlePlayerClick={props.handlePlayerClick}\n          />\n        )}\n\n        <div className=\"board\">\n          <div className=\"row\">\n            {shownBoard.map((card, i) => {\n              return (\n                <div\n                  key={`card-${i}`}\n                  className={`card-column col-4`}\n                  onClick={() => {\n                    props.handleCardClick(card)\n                  }}\n                >\n                  <div\n                    className={`card-holder ${selected.includes(card) ? `bg-${borderColor}` : ''}`}\n                  >\n                    <div\n                      className={`card ${\n                        setFound && selected.length === 3 && !selected.includes(card)\n                          ? 'blurry'\n                          : ''\n                      }`}\n                    >\n                      <Card desc={card} />\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          {!sharedDevice && gameMode !== 'puzzle' && (\n            <div className=\"row text-center my-3\">\n              {map(players, (info, name) => {\n                return (\n                  <div key={name} className=\"col s4 m3\">\n                    <span\n                      className={`player-name bg-${info.color} ${\n                        name === 'cpu' ? 'cpu-name' : ''\n                      } ${cpuGuessCounter % 2 === 0 ? 'off' : ''}`}\n                    >\n                      {name}: {info.score}\n                    </span>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n\n          {sharedDevice && (\n            <SharedPlayersDisplay\n              players={bottomPlayers}\n              declarer={declarer}\n              handlePlayerClick={props.handlePlayerClick}\n            />\n          )}\n\n          {props.handleRedeal && (\n            <div className=\"row\">\n              <div className=\"col mt-3 mt-md-4\">\n                <button onClick={props.handleRedeal} className=\"btn btn-primary\">\n                  Shuffle\n                </button>\n              </div>\n              {props.handlePause && (\n                <div className=\"col mt-3 mt-md-4\">\n                  <button onClick={props.handlePause} className=\"btn btn-primary\">\n                    {props.paused ? 'Paused!' : 'Pause'}\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport { map, findKey } from 'lodash'\n\nfunction PlayerList({ isHost, players, setState }) {\n  const host = findKey(players, (player) => player.host)\n\n  return (\n    <div className=\"container mt-4\">\n      <h4>Players:</h4>\n      <ul className=\"collection\">\n        {map(players, (info, name) => {\n          return (\n            <li key={name} className=\"collection-item\">\n              <span className={`player-name`}>\n                {name} {info.host && '(host)'}\n              </span>\n            </li>\n          )\n        })}\n      </ul>\n      {isHost ? (\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setState({\n              gameStarted: true,\n            })\n          }}\n        >\n          Start Game\n        </button>\n      ) : (\n        <p>Waiting for host to start game...</p>\n      )}\n    </div>\n  )\n}\n\nexport default PlayerList\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateNickname } from '../redux-helpers'\nimport { Link } from 'react-router-dom'\nimport update from 'immutability-helper'\nimport firebase from 'firebase/app'\n\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firestore from '../firestore'\n\nimport Signout from './Signout'\nimport Board from './Board'\nimport {\n  handleGoogleRedirect,\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected,\n  isSet,\n  updateGame,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport PlayerList from './PlayerList'\nimport { findKey, isEmpty } from 'lodash'\nimport { Action, MultiState } from '../utils/models'\n\nconst config = {\n  turnTime: 5000,\n  colors,\n  playingTo: 6,\n}\n\n// const firebaseRefs = {}\n\ninterface FirebaseRefs {\n  game: any\n  actions: any\n}\n\nfunction Host() {\n  const userReducer = useSelector((state: any) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current as FirebaseRefs\n\n  const initialDeck = makeDeck()\n  const initialGameState: {\n    deck: string[]\n    board: string[]\n    selected: string[]\n  } = {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n\n  const [gameInProgress, setGameInProgress] = useState<object | undefined>()\n  const [gameTitle, setGameTitle] = useState('')\n  const [activeGameUpdater, setActiveGameUpdater] = useState()\n  const [gameSubscription, setGameSubscription] = useState()\n  const [actionsSubscription, setActionSubscription] = useState()\n\n  const [state, setFullState] = useState<MultiState>({\n    gameTitle: '',\n    players: {},\n    created: false,\n    gameStarted: false,\n    myName: '',\n    setFound: false,\n    declarer: null,\n    gameOver: '',\n    ...initialGameState,\n  })\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  useEffect(() => {\n    if (user && !isEmpty(user.uid)) {\n      firestore\n        .collection('games')\n        .where('creator_uid', '==', user.uid)\n        .get()\n        .then(function(querySnapshot) {\n          querySnapshot.forEach(function(doc) {\n            console.log(doc.id)\n            const oldGame = {\n              ...doc.data(),\n              gameTitle: doc.id,\n            }\n            console.log('Old game: ', oldGame)\n            setGameInProgress(oldGame)\n          })\n        })\n        .catch(function(error) {\n          console.log('Error getting documents: ', error)\n        })\n    }\n  }, [user])\n\n  useEffect(() => {\n    return () => {\n      if (actionsSubscription) {\n        // @ts-ignore\n        actionsSubscription()\n      }\n      if (gameSubscription) {\n        // @ts-ignore\n        gameSubscription()\n      }\n    }\n  }, [gameSubscription, actionsSubscription])\n\n  useEffect(() => {\n    return function() {\n      window.clearInterval(activeGameUpdater)\n    }\n  }, [activeGameUpdater])\n\n  const setState = (update: Partial<MultiState>) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const handleRejectResume = () => {\n    // @ts-ignore\n    const { gameTitle } = gameInProgress\n    firestore\n      .collection('games')\n      .doc(gameTitle)\n      .delete()\n      .then(() => {\n        console.log('Deleted old game')\n        setGameInProgress(undefined)\n      })\n  }\n\n  const handleCardClick = (card: string) => {\n    const { myName } = state\n    if (!state.declarer) {\n      const newSelected = cardToggle(card, state.selected)\n      if (isSet(newSelected)) {\n        updateSelected(newSelected, myName)\n      }\n      setState({\n        selected: newSelected,\n      })\n    }\n  }\n\n  const handleRedeal = () => {\n    const newState = reshuffle(state)\n    setAndSendState(newState)\n  }\n\n  const actionsSubscribe = (reference: string | any) => {\n    let doc\n    if (typeof reference === 'string') {\n      doc = firestore.collection('games').doc(reference)\n    } else {\n      doc = reference\n    }\n    const actions = doc.collection('actions')\n    console.log(actions)\n    actions.onSnapshot((snapshot: any) => {\n      console.log('got action snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    return actions\n    const actionSubscription = actions.onSnapshot((snapshot: any) => {\n      console.log('got snapshot')\n      snapshot.docChanges().forEach((change: any) => {\n        if (change.type === 'added') {\n          const action = change.doc.data() as Action\n          console.log(action)\n          processAction(action)\n          actions.doc(change.doc.id).delete()\n        }\n        if (change.type === 'removed') {\n          console.log('Removed action: ', change.doc.data())\n        }\n      })\n    })\n    setActionSubscription(actions)\n  }\n\n  const subscribeToGame = async (gameTitle: string) => {\n    firebaseRefs.game = firestore.collection('games').doc(gameTitle)\n    const gameUpdateId = window.setInterval(() => {\n      updateGame(firebaseRefs.game, {})\n    }, 30000)\n    // @ts-ignore\n    setActiveGameUpdater(gameUpdateId)\n\n    const unsubscribe = actionsSubscribe(firebaseRefs.game)\n    setActionSubscription(unsubscribe)\n  }\n\n  const reloadGame = () => {\n    // @ts-ignore\n    const host = findKey(gameInProgress.players, (player) => player.host)\n    // @ts-ignore\n    const { gameTitle } = gameInProgress\n    setState({ gameTitle })\n    subscribeToGame(gameTitle)\n\n    setState({\n      myName: host,\n      created: true,\n      ...gameInProgress,\n      // @ts-ignore\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n  }\n\n  const handleCreateGame = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const { myName, board, deck, selected, players, gameOver } = state\n    const officialTitle = !isEmpty(gameTitle) ? gameTitle : `${myName}'s game`\n    setState({ gameTitle: officialTitle })\n    firebaseRefs.game = firestore.collection('games').doc(officialTitle)\n    firebaseRefs.game.set({\n      creator_uid: user.uid,\n      players,\n      board,\n      deck,\n      selected,\n      gameOver,\n      lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    const updateId = window.setInterval(() => {\n      firebaseRefs.game.update({\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n    }, 30000)\n    // @ts-ignore\n\n    setActiveGameUpdater(updateId)\n\n    firebaseRefs.actions = actionsSubscribe(officialTitle)\n\n    console.log(firebaseRefs.actions)\n    // firebaseRefs.actions.onSnapshot((snapshot: any) => {\n    //   console.log('got action snapshot')\n    //   snapshot.docChanges().forEach((change: any) => {\n    //     if (change.type === 'added') {\n    //       const action = change.doc.data() as Action\n    //       console.log(action)\n    //       processAction(action)\n    //       firebaseRefs.actions.doc(change.doc.id).delete()\n    //     }\n    //     if (change.type === 'removed') {\n    //       console.log('Removed action: ', change.doc.data())\n    //     }\n    //   })\n    // })\n\n    // const unsubscribe = actionsSubscribe(officialTitle)\n    // setActionSubscription(unsubscribe)\n\n    setState({\n      created: true,\n    })\n  }\n\n  const handleSetName = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setState({\n      myName: user.nickname,\n      players: {\n        [user.nickname]: {\n          host: true,\n          uid: user.uid,\n          score: 0,\n          color: config.colors[0],\n        },\n      },\n    })\n  }\n\n  const markPointForDeclarer = (declarer: string) => {\n    if (!declarer) {\n      return {}\n    }\n    const { players } = currentState.current\n    const newScore = players[declarer].score + 1\n    const newPlayers = update(players, {\n      [declarer]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    if (gameOver) {\n      window.setTimeout(() => {\n        firebaseRefs.game.delete()\n        clearInterval(activeGameUpdater)\n      }, 3000)\n    }\n\n    return {\n      players: newPlayers,\n      gameOver,\n    }\n  }\n\n  const processAction = (action: Action) => {\n    const { type, payload } = action\n    const { players, declarer, board } = currentState.current\n    switch (type) {\n      case 'join':\n        if (Object.keys(players).includes(payload.name)) {\n          return\n        }\n        const newPlayers = {\n          ...players,\n          [payload.name]: {\n            host: false,\n            uid: payload.uid,\n            score: 0,\n            color: config.colors[Object.keys(players).length],\n          },\n        }\n        setAndSendState({ players: newPlayers })\n        break\n      case 'found':\n        if (!declarer && verifySelectedOnBoard(board, payload.selected)) {\n          updateSelected(payload.selected, payload.name)\n        }\n        break\n      default:\n        return\n    }\n  }\n\n  const removeSet = (selected: string[], declarer: string) => {\n    if (isSet(selected)) {\n      const newScores = markPointForDeclarer(declarer)\n      const newState: Partial<MultiState> = {\n        ...currentState.current,\n        setFound: false,\n        declarer: null,\n        ...newScores,\n        ...removeSelected(currentState.current),\n      }\n      setAndSendState(newState)\n    }\n  }\n\n  const setAndSendState = (update: Partial<MultiState>) => {\n    console.log('updating', currentState.current.gameTitle)\n    setState(update)\n    updateGame(firebaseRefs.game, update)\n  }\n\n  const verifySelectedOnBoard = (board: string[], selected: string[]) => {\n    for (let i = 0; i < selected.length; i++) {\n      if (!board.includes(selected[i])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const updateSelected = (newSelected: string[], declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    setAndSendState(newState)\n    if (newState.setFound) {\n      setTimeout(() => {\n        removeSet(newSelected, declarer)\n      }, 4000)\n    }\n  }\n\n  const { board, deck, selected, declarer, players, created, gameStarted, myName } = state\n\n  if (userLoading) {\n    return 'Loading...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container mt-4\">\n        <p>To host a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  if (gameInProgress && !state.created) {\n    return (\n      <div className=\"container\">\n        <p>You are already hosting a game. Return to it?</p>\n        <button className=\"btn btn-primary mr-5\" onClick={() => reloadGame()}>\n          YES!\n        </button>\n        <button className=\"btn btn-danger\" onClick={handleRejectResume}>\n          No, remove it\n        </button>\n      </div>\n    )\n  }\n\n  if (myName === '') {\n    return (\n      <div className=\"container\">\n        <Signout />\n        <h4>Enter your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"row mb-4\">\n            <div className=\"col-md-3 mb-3 mr-md-4\">\n              <input\n                autoFocus\n                placeholder=\"hostname\"\n                value={user.nickname}\n                onChange={(e) => {\n                  dispatch(updateNickname(e.target.value))\n                  window.localStorage.setItem('nickname', e.target.value)\n                }}\n              />\n            </div>\n            <div className=\"col-md-3\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n        <div>\n          <p>\n            <Link to=\"/\">Main Menu</Link>\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!created) {\n    return (\n      <div className=\"container mt-4\">\n        <h4>Name your game:</h4>\n        <form onSubmit={handleCreateGame}>\n          <div className=\"mb-3\">\n            <input\n              autoFocus\n              placeholder={`${myName}'s game`}\n              onChange={(e) => {\n                setGameTitle(e.target.value)\n              }}\n              value={gameTitle}\n            />\n          </div>\n          <div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  if (!gameStarted) {\n    return <PlayerList isHost={true} players={players} setState={setAndSendState} />\n  }\n\n  return (\n    <Board\n      board={board}\n      deck={deck}\n      selected={selected}\n      declarer={declarer}\n      handleCardClick={handleCardClick}\n      // handleDeclare={this.handleDeclare}\n      handleRedeal={handleRedeal}\n      players={players}\n      setFound={state.setFound}\n      gameOver={state.gameOver}\n      myName={state.myName}\n      gameMode=\"versus\"\n    />\n  )\n}\n\nexport default Host\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isEmpty } from 'lodash'\nimport { Link } from 'react-router-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport { updateNickname } from '../redux-helpers'\nimport { cardToggle, isSet, handleGoogleSignIn, handleGoogleRedirect } from '../utils/helpers'\nimport firestore from '../firestore'\n// import Modal from './Modal'\nimport Signout from './Signout'\nimport Board from './Board'\nimport PlayerList from './PlayerList'\nimport Modal from 'react-bootstrap/Modal'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Spinner from 'react-bootstrap/Spinner'\n\nfunction Guest(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user, loading: userLoading } = userReducer\n  const dispatch = useDispatch()\n\n  const [state, setFullState] = useState({\n    popupVisible: false,\n    setFound: false,\n    displayAnimation: false,\n    animatedSet: [],\n    declarer: '',\n    deck: [],\n    board: [],\n    selected: [],\n    pending: null,\n    gameStarted: false,\n  })\n  const [myName, setMyName] = useState('')\n  const [modalDelayMsg, setDelayMsg] = useState()\n\n  const myFire = useRef({})\n  const firebaseRefs = myFire.current\n  // const [firebaseRefs, setFirebaseRefs] = useState({})\n\n  const currentState = useRef(state)\n  currentState.current = state\n\n  const setState = (update) => {\n    setFullState({\n      ...currentState.current,\n      ...update,\n    })\n  }\n\n  const resetLocalSelected = () => {\n    const { declarer, selected } = currentState.current\n    if (isEmpty(declarer) && selected.length === 3 && !isSet(selected)) {\n      setState({\n        selected: [],\n      })\n    }\n  }\n\n  const handleCardClick = (card) => {\n    const { declarer, selected } = currentState.current\n    if (declarer) {\n      return\n    }\n    const newSelected = cardToggle(card, selected)\n    if (newSelected.length > 3) {\n      return\n    }\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        const action = {\n          type: 'found',\n          payload: { selected: newSelected, name: myName },\n        }\n        console.log('Found set, sending...')\n        sendAction(action)\n        newState.popupVisible = true\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(resetLocalSelected, 1000)\n      }\n    }\n\n    setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  const handleSetName = (e) => {\n    e.preventDefault()\n    const nameInput = user.nickname\n    if (isEmpty(nameInput)) {\n      return\n    }\n    setMyName(nameInput)\n    const action = {\n      type: 'join',\n      payload: { name: nameInput, uid: user.uid },\n    }\n    sendAction(action)\n  }\n\n  const processUpdate = (doc) => {\n    const updatedState = { ...doc.data() }\n    const { selected: mySelected } = currentState.current\n    if (isEmpty(updatedState)) {\n      return\n    }\n    console.log('Updating', updatedState)\n    // Don't mess with selected cards unless necessary\n    const newSelected =\n      mySelected.length < 3 && isEmpty(updatedState.declarer) ? mySelected : updatedState.selected\n    console.log('New selected', newSelected)\n    setState({\n      ...updatedState,\n      selected: newSelected,\n      popupVisible: false,\n    })\n  }\n\n  const sendAction = (action) => {\n    console.log('Creating on', firebaseRefs.actions)\n    firebaseRefs.actions\n      .add({\n        ...action,\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(function(docRef) {\n        if (action.type === 'found') {\n          const docId = docRef.id\n          console.log('Document written with ID: ', docId)\n          setState({\n            pending: docId,\n          })\n          // TODO: Trigger message if action isnt processed in reasonable time\n        }\n      })\n  }\n\n  useEffect(() => {\n    const { gameName } = props.match.params\n    firebaseRefs.game = firestore.collection('games').doc(gameName)\n    const unsubGames = firebaseRefs.game.onSnapshot((doc) => {\n      processUpdate(doc)\n    })\n    firebaseRefs.actions = firebaseRefs.game.collection('actions')\n\n    const unsubActions = firebaseRefs.actions.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'removed') {\n          const { pending } = currentState.current\n          if (pending === change.doc.id) {\n            console.log('Pending action removed!')\n            setState({\n              pending: null,\n            })\n          }\n        }\n      })\n    })\n\n    return function cleanup() {\n      if (firebaseRefs.game) {\n        unsubGames()\n      }\n      if (firebaseRefs.actions) {\n        unsubActions()\n      }\n    }\n  }, [])\n\n  const { board, deck, selected, declarer, players, popupVisible } = state\n\n  if (userReducer.loading) {\n    return 'Loading profile...'\n  }\n\n  if (isEmpty(user)) {\n    return (\n      <div className=\"container\">\n        <p>To join a game, sign in with your Google account.</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n        <p>\n          <Link to=\"/lobby\">Back</Link>\n        </p>\n      </div>\n    )\n  }\n  if (!myName) {\n    return (\n      <div className=\"container\">\n        <Signout />\n\n        <h4 className=\"mb-3\">Choose your nickname:</h4>\n        <form onSubmit={handleSetName}>\n          <div className=\"col-12 col-md-4\">\n            <input\n              autoFocus\n              type=\"text\"\n              placeholder=\"your name\"\n              value={user.nickname}\n              onChange={(e) => {\n                dispatch(updateNickname(e.target.value))\n                window.localStorage.setItem('nickname', e.target.value)\n              }}\n            />\n          </div>\n          <div className=\"col-12 col-md-4\">\n            <input className=\"btn btn-primary mt-3 ml-md-3\" type=\"submit\" value=\"Join\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  const { setFound, gameOver, gameStarted } = currentState.current\n\n  if (!gameStarted) {\n    return <PlayerList players={players} isHost={false} />\n  }\n\n  return (\n    <React.Fragment>\n      <Modal show={state.pending && popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p className=\"text-center\">SET!</p>\n          <div className=\"text-center\">\n            <Spinner animation=\"border\" />\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Board\n        board={board}\n        deck={deck}\n        selected={selected}\n        declarer={declarer}\n        handleCardClick={handleCardClick}\n        // handleDeclare={this.handleDeclare}\n        players={players}\n        setFound={setFound}\n        gameOver={gameOver}\n        // syncing={this.state.syncing}\n        myName={myName}\n        gameMode=\"versus\"\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Guest\n","import React, { Component, Fragment } from 'react'\nimport firestore from '../firestore'\nimport { Link } from 'react-router-dom'\n\nconst styles = {}\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props)\n    const games = []\n\n    this.state = {\n      name: '',\n      newGame: 'baz',\n      init: false,\n      games,\n    }\n  }\n\n  componentDidMount() {\n    this.gamesRef = firestore.collection('games')\n\n    this.unsubscribe = this.gamesRef.onSnapshot((snapshot) => {\n      const newGames = []\n      snapshot.forEach((doc) => {\n        newGames.push({\n          name: doc.id,\n          ...doc.data(),\n        })\n      })\n      this.setState({\n        init: true,\n        games: newGames,\n      })\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { games, init } = this.state\n    console.log(games)\n    if (!init) {\n      return null\n    }\n    const activeGames = games.filter((g) => {\n      const { lastUpdate } = g\n      if (!lastUpdate) {\n        return false\n      }\n      const updated = lastUpdate.toMillis()\n      const now = new Date().getTime()\n      const age = Math.round((now - updated) / 1000)\n      return age < 40\n    })\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        {activeGames.length === 0 ? (\n          <Fragment>\n            <div className=\"row\">\n              <div className=\"col-8 col-md-6\">\n                <div className=\"card-panel teal\" style={{ marginTop: window.innerHeight * 0.2 }}>\n                  <span className=\"white-text\">There are currently no active games.</span>\n                </div>\n                <p>\n                  Click <Link to=\"/host\">here</Link> to host one\n                </p>\n                <p>\n                  <Link className=\"btn btn-primary\" to=\"/\">\n                    Back\n                  </Link>\n                </p>\n              </div>\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"text-center my-4\">Available games</h4>\n            <div className=\"row align-content-center\">\n              {activeGames.map((game, i) => {\n                return (\n                  <div className=\"col-6 col-md-4\" key={game.name}>\n                    <div className=\"card available-game\">\n                      <div className=\"my-auto text-center\">\n                        <Link to={`/guest/${game.name}`}>{game.name}</Link>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div className=\"row\">\n              <div className=\"col mt-4\">\n                <Link className=\"btn btn-primary\" to=\"/\">\n                  Back\n                </Link>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Lobby\n","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n  handleGoogleRedirect,\n  countSets,\n  getAdjustmentFactor,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep, isEmpty } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport Slider from 'react-rangeslider'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport Signout from './Signout'\nimport InputRange from 'react-input-range'\n\nimport { Players, GameState, SoloState } from '../utils/models'\n\nconst debugging = true\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1600,\n}\n\nconst calculateIntervalFromDifficulty = (d: number, board?: string[]) => {\n  let diff = Number(d)\n  if (Number.isNaN(diff)) {\n    diff = 1\n  }\n  let interval = 30000 / (5 * diff)\n  if (board !== undefined) {\n    const newSets = countSets(board)\n    interval = interval * getAdjustmentFactor(newSets)\n  }\n  return interval\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  const selected: string[] = []\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected,\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n    cpu: {\n      score: 0,\n      color: config.colors[1],\n    },\n  },\n  gameStarted: false,\n  myName: 'you',\n  setFound: false,\n  declarer: null,\n  gameOver: null,\n  cpuTurnInterval: 1000,\n  startTime: new Date(),\n  cpuGuessCounter: 0,\n  paused: false,\n}\n\nclass Solo extends Component<any, SoloState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n      difficulty: 2,\n    }\n  }\n\n  handleStartGame = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault()\n    this.setState({\n      gameStarted: true,\n      startTime: new Date(),\n    })\n\n    this.activateCpu(config.cpuDelay)\n  }\n\n  componentDidMount = () => {\n    const savedDifficulty = window.localStorage.getItem('soloDifficulty')\n    let difficulty = savedDifficulty ? Number(savedDifficulty) : 2\n    const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty)\n    this.setState({\n      difficulty,\n      cpuTurnInterval,\n    })\n  }\n\n  componentWillUnmount = () => {\n    if (this.state.cpuTimer !== null) {\n      window.clearInterval(this.state.cpuTimer)\n    }\n  }\n\n  activateCpu = (delay: number) => {\n    const { board, difficulty } = this.state\n\n    if (this.state.initCpuTimerId) {\n      window.clearTimeout(this.state.initCpuTimerId)\n    }\n\n    // @ts-ignore\n    const initialTurnInterval = calculateIntervalFromDifficulty(difficulty, board)\n    console.log(`Turns every ${initialTurnInterval} ms`)\n\n    const initCpuTimerId = window.setTimeout(() => {\n      const cpuTimer = window.setInterval(this.cpuTurn, initialTurnInterval)\n      this.setState({\n        cpuTimer,\n      })\n    }, delay)\n    this.setState({\n      initCpuTimerId: initCpuTimerId,\n    })\n  }\n\n  stopCpu = () => {\n    this.state.initCpuTimerId && window.clearTimeout(this.state.initCpuTimerId)\n    this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n  }\n\n  cpuTurn = () => {\n    const { board, declarer, gameOver, paused } = this.state\n    if (declarer || gameOver || paused) {\n      return\n    }\n    this.setState((prevState) => {\n      return {\n        cpuGuessCounter: prevState.cpuGuessCounter + 1,\n      }\n    })\n\n    if (debugging) {\n      logTime('Guess')\n    }\n    const [a, b] = shuffle(board).slice(0, 2)\n    const c = nameThird(a, b)\n    if (board.includes(c)) {\n      this.setState({\n        declarer: 'cpu',\n        selected: [a],\n        cpuFound: [b, c],\n        setFound: true,\n      })\n      if (this.state.cpuTimer !== null) {\n        window.clearInterval(this.state.cpuTimer)\n      }\n      this.setState({\n        cpuAnimation: window.setInterval(this.animateCpuChoice, 900),\n      })\n    }\n  }\n\n  handlePause = () => {\n    if (this.state.declarer) {\n      return\n    }\n    if (!this.state.paused) {\n      this.stopCpu()\n    } else {\n      this.activateCpu(500)\n    }\n    this.setState((prevState) => {\n      return {\n        paused: !prevState.paused,\n      }\n    })\n  }\n\n  animateCpuChoice = () => {\n    const { selected, cpuFound } = this.state\n    const cpuCopy = [...cpuFound]\n    if (cpuCopy.length === 0) {\n      return\n    }\n    const newSelected = [...selected, cpuCopy.pop() as string]\n    this.setState({\n      cpuFound: cpuCopy,\n      selected: newSelected,\n    })\n    if (newSelected.length === 3) {\n      if (this.state.cpuAnimation !== null) {\n        window.clearInterval(this.state.cpuAnimation)\n      }\n      this.updateSelected(newSelected, 'cpu')\n    }\n  }\n\n  updatePlayerScore = (myName: string, delta: number): [Players, number] => {\n    const { players } = this.state\n    const newScore = players[myName].score + delta\n    const newPlayers = update(players, {\n      [myName]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (declarer && !isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: undefined,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer: string) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const { user } = this.props.userReducer\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    if (!isEmpty(gameOver)) {\n      const uid = (user && user.uid) || 'anonymous'\n      const player_won = declarer == 'you' ? 1 : 0\n      const total_time = Math.round((new Date().getTime() - this.state.startTime.getTime()) / 1000)\n      axios\n        .post('/api/game', {\n          uid,\n          total_time,\n          player_won,\n          difficulty_level: this.state.difficulty,\n          winning_score: newScore,\n        })\n        .then(() => {\n          console.log('Game sent')\n        })\n        .catch((err) => {\n          console.log('Error sending game')\n        })\n    }\n    this.setState(newState)\n    return newState\n  }\n\n  performDeclare = (declarer: string) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n      this.setState({\n        undeclareId: window.setTimeout(() => {\n          this.expireDeclare()\n        }, config.turnTime),\n      })\n    }\n  }\n\n  updateSelected = (newSelected: Array<string>, declarer: string) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      this.state.undeclareId && clearTimeout(this.state.undeclareId)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card: string) => {\n    const { setFound, declarer, myName, paused } = this.state\n    if (paused) {\n      return\n    }\n    if (!setFound && declarer !== 'cpu') {\n      const newSelected = cardToggle(card, this.state.selected)\n      if (!declarer) {\n        this.performDeclare(myName)\n      }\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, 'you')\n      }\n    }\n  }\n\n  handleRedeal = () => {\n    const { declarer, difficulty, paused } = this.state\n    this.state.initCpuTimerId && window.clearTimeout(this.state.initCpuTimerId)\n    if (!declarer && !paused) {\n      const { deck, board } = reshuffle(this.state)\n      this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n\n      this.activateCpu(config.cpuDelay * 0.5)\n      this.setState({ deck, board })\n    }\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (declarer && isSet(selected)) {\n      console.log('Set found, removing')\n      this.markPointForDeclarer(declarer)\n      const { board, deck, selected } = removeSelectedCards(this.state)\n      const newState = {\n        setFound: false,\n        declarer: null,\n        timeDeclared: undefined,\n        board,\n        deck,\n        selected,\n      }\n      this.setState(newState)\n\n      this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n\n      this.activateCpu(config.cpuDelay)\n    }\n  }\n\n  unsetTimers = (cpuTimer: number, timeoutId: number) => {\n    window.clearInterval(cpuTimer)\n    window.clearTimeout(timeoutId)\n  }\n\n  resetGame = () => {\n    this.state.cpuTimer && window.clearInterval(this.state.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, gameStarted, setFound } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      // GameSettings\n      return (\n        <div className=\"container main-content\">\n          {user !== null && <Signout />}\n          <h3 className=\"text-center mb-4\">Solo Play vs. Computer</h3>\n          <h4 className=\"mb-4\">Choose difficulty level:</h4>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <form onSubmit={this.handleStartGame}>\n                <div className=\"col-10 col-md-6 mb-5\">\n                  <InputRange\n                    maxValue={6}\n                    minValue={1}\n                    //@ts-ignore\n                    value={this.state.difficulty}\n                    //@ts-ignore\n                    onChange={(difficulty) => {\n                      //@ts-ignore\n                      const cpuTurnInterval = calculateIntervalFromDifficulty(difficulty, board)\n                      window.localStorage.setItem('soloDifficulty', difficulty.toString())\n                      //@ts-ignore\n                      this.setState({\n                        cpuTurnInterval,\n                        // @ts-ignore\n                        difficulty,\n                      })\n                    }}\n                  />\n                </div>\n                <input type=\"submit\" value=\"Start\" className=\"btn btn-primary\" />\n              </form>\n              <p style={{ marginTop: '24px' }}>First to {config.playingTo} points is the winner</p>\n            </div>\n            <div className=\"row mt-4\">\n              <ul style={{ listStyleType: 'none' }}>\n                <li className=\"mb-4\">\n                  <Link to=\"/local\">Local Multiplayer</Link>\n                </li>\n                <li>\n                  <Link to=\"/\">Back to Main Menu</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          {!user && (\n            <div className=\"row mt-4\">\n              <div>\n                <p>To save your game statistics, sign in with your Google account.</p>\n\n                <p>\n                  <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n                    Sign in\n                  </button>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={() => {}}\n          handleRedeal={this.handleRedeal}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.myName}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"versus\"\n          cpuGuessCounter={this.state.cpuGuessCounter}\n          handlePause={this.handlePause}\n          paused={this.state.paused}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Solo)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\n\nfunction MenuItem(props) {\n  const { url, cardName, description } = props\n  return (\n    <div className=\"col-9 col-md-4\">\n      <Link to={url}>\n        <div className=\"card shadow-sm mb-3 mb-md-4\">\n          <Card desc={cardName} />\n        </div>\n      </Link>\n      <p className=\"text-center\">{description}</p>\n    </div>\n  )\n}\n\nfunction Main() {\n  const menuItems = [\n    {\n      url: '/solo',\n      cardName: '0012',\n      description: 'Solo/Local',\n    },\n    {\n      url: '/lobby',\n      cardName: '1121',\n      description: 'Join Game',\n    },\n    {\n      url: '/host',\n      cardName: '2200',\n      description: 'Host Game',\n    },\n  ]\n  return (\n    <div className=\"container mt-3 mt-md-5\">\n      <h1 className=\"d-none d-md-block text-center mb-3 mb-md-5\">Main Menu</h1>\n      <div className=\"row justify-content-center\">\n        {menuItems.map((item, i) => {\n          return <MenuItem key={`card-${i}`} {...item} />\n        })}\n      </div>\n      <div className=\"d-none d-md-block\">\n        <hr />\n        <p>\n          <Link to=\"/rules\">Rules</Link>\n        </p>\n        <p>\n          <Link to=\"/stats\">View Statistics</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport Card from './Card'\nimport { Link } from 'react-router-dom'\n\nfunction ShowCard({ desc }) {\n  return (\n    <div className=\"col-4 my-2\">\n      <div className=\"card\">\n        <Card desc={desc} />\n      </div>\n    </div>\n  )\n}\n\nfunction Rules() {\n  const displayCards = ['0000', '1210', '0022', '2101', '0120', '2011']\n\n  return (\n    <div className=\"rules container\">\n      <h2>Rules of the Game</h2>\n      <p>\n        The object of the same is to find sets of three cards that are either the same or different\n        along each of four dimensions.\n      </p>\n      <p>\n        If that makes perfect sense to you, then go ahead and start playing. Otherwise, I will\n        explain a bit more.\n      </p>\n      <p>The game starts by laying out a board with twelve cards. Here are some example cards: </p>\n      <div className=\"row\">\n        {displayCards.map((c, i) => {\n          return <ShowCard key={i} desc={c} />\n        })}\n      </div>\n      <p>You'll notice that every card has four different characteristics:</p>\n      <ul className=\"browser-default\">\n        <li>color</li>\n        <li>number</li>\n        <li>shape</li>\n        <li>fill</li>\n      </ul>\n      <p>and each of those characteristics has three different possibilities.</p>\n      <p>\n        Three cards form a set if, for each of those four characteristics, the three cards are\n        either <em>all the same</em> or <em>all different.</em>\n      </p>\n      <p>It is easier to understand with examples, so here is an example set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0112\" />\n          </div>\n        </div>{' '}\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1111\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2110\" />\n          </div>\n        </div>\n      </div>\n      <p>Which you can describe as follows:</p>\n      <ul className=\"browser-default\">\n        <li>color - SAME</li>\n        <li>shape - SAME</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Therefore, the three cards form a set.</p>\n      <p>Here is another set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2022\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1112\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0202\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - SAME</li>\n      </ul>\n      <p>This is not a set:</p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1220\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1110\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2000\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>fill - SAME</li>\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - NOT THE SAME OR DIFFERENT!</li>\n      </ul>\n      <p>\n        Even though the cards have the same fill, different colors, and different shapes, the\n        numbers are neither <em>all the same</em> nor <em>all different</em>, so it's not a set.\n      </p>\n      <p>\n        It doesn't matter how many of the characteristics are the same, and how many are different,\n        as long as for <em>each</em> characteristic, the cards are all the same or all different.\n        Here's one last example:\n      </p>\n      <div className=\"row my-3\">\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"1122\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"0201\" />\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"card\">\n            <Card desc=\"2010\" />\n          </div>\n        </div>\n      </div>\n      <ul className=\"browser-default\">\n        <li>color - DIFFERENT</li>\n        <li>shape - DIFFERENT</li>\n        <li>number - DIFFERENT</li>\n        <li>fill - DIFFERENT</li>\n      </ul>\n      <p>Each characteristic is different for all three cards, so this is a set.</p>\n      <p>\n        <Link to=\"/\">Back Home</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Rules\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Signout from './Signout'\nimport { handleGoogleRedirect } from '../utils/helpers'\nimport * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\nfunction Login(props) {\n  const user = useSelector((state) => state.user)\n\n  useEffect(() => {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(function(result) {\n        if (result.credential) {\n          // This gives you a Google Access Token. You can use it to access the Google API.\n          var token = result.credential.accessToken\n          // ...\n        }\n        // The signed-in user info.\n        var user = result.user\n        console.log(token, user)\n      })\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code\n        var errorMessage = error.message\n        // The email of the user's account used.\n        var email = error.email\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential\n        // ...\n      })\n  }, [])\n\n  if (!user) {\n    return (\n      <div className=\"container\">\n        <button onClick={handleGoogleRedirect} className=\"btn\">\n          Sign in\n        </button>\n      </div>\n    )\n  }\n  return (\n    <div className=\"container\">\n      <Signout />\n    </div>\n  )\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n} from '../utils/helpers'\nimport { shuffle, cloneDeep } from 'lodash'\nimport { colors } from '../config'\nimport update from 'immutability-helper'\nimport { Link } from 'react-router-dom'\n\nconst debugging = false\n\nconst config = {\n  declareTime: 5000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = () => {\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle({\n      deck: initialDeck.slice(12),\n      board: initialDeck.slice(0, 12),\n    }),\n    selected: [],\n  }\n}\n\nconst createPlayers = (num) => {\n  const players = {}\n  for (let i = 0; i < num; i++) {\n    players[i] = {\n      score: 0,\n      color: config.colors[i],\n    }\n  }\n  return players\n}\n\nconst initialState = {\n  numPlayers: null,\n  players: createPlayers(2),\n  gameStarted: false,\n  name: '1',\n  setFound: false,\n  declarer: null,\n  timeDeclared: null,\n  gameOver: '',\n  difficulty: 2,\n  cpuTurnInterval: 1000,\n  cpuFound: [],\n}\n\nclass SharedDevice extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    }\n  }\n\n  handleStartGame = (numPlayers) => {\n    this.setState({\n      numPlayers,\n      players: createPlayers(numPlayers),\n    })\n    this.setState({\n      gameStarted: true,\n    })\n  }\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  expireDeclare = () => {\n    const { declarer, selected } = this.state\n    if (!isSet(selected)) {\n      const [newPlayers] = this.updatePlayerScore(declarer, -0.5)\n      this.setState({\n        players: newPlayers,\n        declarer: null,\n        timeDeclared: null,\n        selected: [],\n      })\n    }\n  }\n\n  markPointForDeclarer = (declarer) => {\n    const [newPlayers, newScore] = this.updatePlayerScore(declarer, 1)\n    const gameOver = newScore >= config.playingTo ? declarer : ''\n    const newState = {\n      players: newPlayers,\n      gameOver,\n    }\n    this.setState(newState)\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.declareTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleCardClick = (card) => {\n    const { setFound, declarer } = this.state\n    if (!setFound && declarer !== null) {\n      const newSelected = cardToggle(card, this.state.selected)\n      this.setState({\n        selected: newSelected,\n      })\n      if (isSet(newSelected)) {\n        this.updateSelected(newSelected, declarer)\n      }\n    }\n  }\n\n  handlePlayerClick = (clickerName) => {\n    const { declarer } = this.state\n    if (declarer === null) {\n      this.performDeclare(clickerName)\n    }\n  }\n\n  handleRedeal = () => {\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const { board, deck, selected, declarer, players, numPlayers, setFound } = this.state\n    console.log(players)\n    if (!numPlayers) {\n      return (\n        <div className=\"container\">\n          <h4 className=\"mb-4\">Choose Number of Players</h4>\n          <div className=\"row text-center\">\n            {[...Array(6).keys()].map((i) => {\n              return (\n                <div\n                  key={`players-${i}`}\n                  onClick={() => {\n                    this.handleStartGame(i + 1)\n                  }}\n                  className=\"mb-3 col-4\"\n                >\n                  <button className=\"btn btn-info\">{i + 1}</button>\n                </div>\n              )\n            })}\n          </div>\n          <div>\n            <p>\n              <Link to=\"/solo\">Back</Link>\n            </p>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handlePlayerClick={this.handlePlayerClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          sharedDevice={true}\n          gameMode=\"shared-device\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SharedDevice\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { handleGoogleRedirect } from '../utils/helpers'\n\nimport axios from 'axios'\n\nfunction Stats(props) {\n  const userReducer = useSelector((state) => state.user)\n  const { user } = userReducer\n  const [stats, setStats] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const getStats = async () => {\n      axios.get(`/api/user/stats/${user.uid}`).then((response) => {\n        setStats(response.data)\n      })\n    }\n\n    if (!userReducer.loading && user !== null) {\n      getStats()\n    }\n  }, [userReducer.loading])\n\n  if (userReducer.loading) {\n    return 'Loading...'\n  }\n\n  if (user === null) {\n    return (\n      <div className=\"container mt-4\">\n        <p>Sign in to view stats</p>\n        <p>\n          <button onClick={handleGoogleRedirect} className=\"btn btn-info\">\n            Sign in\n          </button>\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mt-2 mt-md-4\">\n      <h3>Statistics</h3>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Difficulty</th>\n            <th>Games Played</th>\n            <th>Winning Percentage</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {stats &&\n            stats.map((row, i) => {\n              return (\n                <tr key={`stats-${i}`}>\n                  <td>{row.difficulty_level}</td>\n                  <td>{row.games_played}</td>\n                  <td>{Math.round(100 * (row.games_won / row.games_played))}%</td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n      <p>\n        <Link to=\"/\">Main Menu</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default Stats\n","import React from 'react'\nimport Modal from 'react-bootstrap/Modal'\n\nconst SetModal = ({ children, visible: popupVisible }) => {\n  return (\n    <>\n      <Modal show={popupVisible}>\n        <Modal.Header>\n          <Modal.Title>Submitting action...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{children}</Modal.Body>\n        <Modal.Footer></Modal.Footer>\n      </Modal>\n    </>\n  )\n\n  return (\n    <div className={`modal popup-message ${popupVisible ? 'show' : ''}`}>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  )\n}\n\nexport default SetModal\n","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport { shuffle, cloneDeep, isEqual } from 'lodash'\nimport { connect } from 'react-redux'\nimport update from 'immutability-helper'\nimport axios from 'axios'\nimport Slider from 'react-rangeslider'\nimport Modal from './Modal'\n\nimport {\n  makeDeck,\n  cardToggle,\n  reshuffle,\n  removeSelected as removeSelectedCards,\n  isSet,\n  nameThird,\n  countSets,\n  handleGoogleRedirect,\n} from '../utils/helpers'\nimport { colors } from '../config'\nimport Board from './Board'\nimport Signout from './Signout'\n\nconst debugging = false\n\nconst config = {\n  turnTime: 4000,\n  colors,\n  playingTo: 6,\n  cpuDelay: 1200,\n}\n\nconst createGameState = (cardsOnBoard) => {\n  const getMinSets = (cardsOnBoard) => {\n    return Math.round((cardsOnBoard - 3) / 3)\n  }\n\n  const minSets = getMinSets(cardsOnBoard)\n  const initialDeck = makeDeck()\n  return {\n    ...reshuffle(\n      {\n        deck: initialDeck,\n      },\n      { boardSize: cardsOnBoard, minimumSets: minSets },\n    ),\n    selected: [],\n  }\n}\n\nconst logTime = (msg = '') => {\n  const d = new Date()\n  const s = (d.getTime() % 10 ** 6) / 1000\n  console.log(msg, s.toFixed(1))\n}\n\nconst initialState = {\n  players: {\n    you: {\n      score: 0,\n      color: config.colors[0],\n    },\n  },\n  gameStarted: false,\n  name: 'you',\n  setFound: false,\n  gameOver: false,\n  startTime: null,\n  elapsedTime: null,\n  setsFound: [],\n  setsOnBoard: null,\n  cardsOnBoard: 12,\n  popupVisible: false,\n  popUpText: 'SET!',\n}\n\nconst sortSet = (set) => {\n  return set.sort()\n}\n\nclass Puzzle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...cloneDeep(initialState),\n    }\n  }\n\n  handleStartGame = (e) => {\n    e.preventDefault()\n    const { cardsOnBoard } = this.state\n    const gameState = createGameState(cardsOnBoard)\n    const startTime = new Date()\n    this.setState({\n      gameStarted: true,\n      startTime,\n      elapsedTime: 0,\n      ...gameState,\n      setsOnBoard: countSets(gameState.board),\n    })\n    window.timeId = setInterval(() => {\n      const elapsedTime = Math.round((new Date().getTime() - startTime.getTime()) / 1000)\n      this.setState({\n        elapsedTime,\n      })\n    }, 1000)\n  }\n\n  componentDidMount = () => {}\n\n  updatePlayerScore = (name, delta) => {\n    const { players } = this.state\n    const newScore = players[name].score + delta\n    const newPlayers = update(players, {\n      [name]: {\n        $merge: {\n          score: newScore,\n        },\n      },\n    })\n    return [newPlayers, newScore]\n  }\n\n  performDeclare = (declarer) => {\n    if (!this.state.declarer) {\n      const timeNow = new Date().getTime()\n      const update = {\n        declarer,\n        timeDeclared: timeNow,\n      }\n      this.setState(update)\n\n      this.undeclareID = setTimeout(() => {\n        this.expireDeclare()\n      }, config.turnTime)\n    }\n  }\n\n  updateSelected = (newSelected, declarer) => {\n    const newState = {\n      setFound: isSet(newSelected),\n      selected: newSelected,\n      declarer,\n    }\n    if (newState.setFound) {\n      clearTimeout(this.undeclareID)\n      setTimeout(() => {\n        this.removeSet()\n      }, 2000)\n    }\n    this.setState(newState)\n  }\n\n  handleDeclare = () => {\n    return\n  }\n\n  resetLocalSelected = (noCheck = false) => {\n    this.setState((currentState) => {\n      if (currentState.selected.length === 3) {\n        if (noCheck || !isSet(currentState.selected)) {\n          return {\n            selected: [],\n          }\n        }\n      }\n    })\n  }\n\n  handleCardClick = (card) => {\n    const newSelected = cardToggle(card, this.state.selected)\n    const newState = {}\n    if (newSelected.length === 3) {\n      if (isSet(newSelected)) {\n        console.log('Set found')\n        this.setState((currentState) => {\n          window.setTimeout(() => {\n            this.setState({\n              popupVisible: false,\n            })\n            this.resetLocalSelected(true)\n          }, 2000)\n          const { setsFound } = currentState\n          const isNewSet = setsFound\n            .map((set) => {\n              const result = isEqual(newSelected.sort(), set)\n              return !result\n            })\n            .every((result) => result)\n          if (!isNewSet) {\n            return {\n              popupVisible: true,\n              popUpText: 'Already found!',\n            }\n          }\n          const newSetsFound = [...setsFound, newSelected.sort()]\n          return {\n            setsFound: newSetsFound,\n            popupVisible: true,\n            popUpText: 'SET!',\n          }\n        })\n      } else {\n        console.log('Bad set selected!')\n        window.setTimeout(this.resetLocalSelected, 1200)\n      }\n    }\n\n    this.setState({\n      ...newState,\n      selected: newSelected,\n    })\n  }\n\n  handleRedeal = () => {\n    return\n    const newState = reshuffle(this.state)\n    this.setState(newState)\n  }\n\n  removeSet = () => {\n    const { declarer, selected } = this.state\n    if (isSet(selected)) {\n      console.log('Set found, removing')\n      const newScores = this.markPointForDeclarer(declarer)\n      const newState = {\n        ...newScores,\n        setFound: false,\n        declarer: null,\n        timeDeclared: null,\n        ...removeSelectedCards(this.state),\n      }\n      this.setState(newState)\n    }\n    clearInterval(this.cpuTimer)\n    setTimeout(() => {\n      this.cpuTimer = setInterval(this.cpuTurn, this.state.cpuTurnInterval)\n    }, config.cpuDelay)\n  }\n\n  resetGame = () => {\n    clearInterval(this.cpuTimer)\n    this.setState({\n      ...cloneDeep(initialState),\n      ...createGameState(),\n    })\n  }\n\n  render() {\n    const {\n      board,\n      deck,\n      selected,\n      declarer,\n      players,\n      gameStarted,\n      setFound,\n      setsFound,\n      popupVisible,\n    } = this.state\n    const { userReducer } = this.props\n    const { user } = userReducer\n    if (userReducer.loading) {\n      return 'Loading...'\n    }\n    if (!gameStarted) {\n      return (\n        <div className=\"container\">\n          {user !== null && <Signout />}\n          <h3>Puzzle Mode</h3>\n          <p>Find as many sets as you can</p>\n          <div className=\"row\">\n            <div className=\"col s8 m4\">\n              <Slider\n                ref={(input) => {\n                  this.difficultyInput = input\n                }}\n                min={2}\n                max={4}\n                orientation=\"horizontal\"\n                tooltip={true}\n                // labels={{ 2: 6, 3: 9, 4: 12 }}\n                format={(v) => 3 * v}\n                value={Number(this.state.cardsOnBoard) / 3}\n                onChange={(cards) => {\n                  this.setState({\n                    cardsOnBoard: cards * 3,\n                  })\n                }}\n              />\n              <form onSubmit={this.handleStartGame}>\n                <input type=\"submit\" value=\"Start\" className=\"btn\" />\n              </form>\n            </div>\n            <div className=\"row\">\n              <div style={{ marginTop: '48px' }} className=\"col s12\">\n                <p style={{ marginTop: '36px' }}>\n                  <Link to=\"/solo\">Back to Solo Menu</Link>\n                </p>\n                {!user && (\n                  <Fragment>\n                    <hr />\n                    <p>To save your stats, sign in with your Google account.</p>\n\n                    <p>\n                      <button onClick={handleGoogleRedirect} className=\"btn\">\n                        Sign in\n                      </button>\n                    </p>\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <React.Fragment>\n        <Modal visible={popupVisible}>\n          <p className=\"flow-text center-align\">{this.state.popUpText}</p>\n        </Modal>\n        <Board\n          board={board}\n          deck={deck}\n          selected={selected}\n          declarer={declarer}\n          handleCardClick={this.handleCardClick}\n          handleDeclare={this.handleDeclare}\n          players={players}\n          setFound={this.state.setFound}\n          gameOver={this.state.gameOver}\n          myName={this.state.name}\n          resetGame={this.resetGame}\n          solo={true}\n          gameMode=\"puzzle\"\n          setsFound={setsFound}\n          startTime={this.state.startTime}\n          elapsedTime={this.state.elapsedTime}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.user,\n})\n\nexport default connect(mapStateToProps)(Puzzle)\n","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Host from './Host'\nimport Guest from './Guest'\nimport Lobby from './Lobby'\nimport Solo from './Solo'\nimport Main from './Main'\nimport Rules from './Rules'\nimport Login from './Login'\nimport SharedDevice from './SharedDevice'\nimport Stats from './Stats'\nimport Puzzle from './Puzzle'\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/host\" component={Host} />\n            <Route path=\"/lobby\" component={Lobby} />\n            <Route path=\"/guest/:gameName\" component={Guest} />\n            <Route path=\"/solo\" component={Solo} />\n            <Route path=\"/local\" component={SharedDevice} />\n            <Route path=\"/rules\" component={Rules} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/stats\" component={Stats} />\n            <Route path=\"/puzzle\" component={Puzzle} />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\nexport default Routes\n","import React, { useState, useEffect } from 'react'\nimport Routes from './Routes'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\n// import 'firebase/firestore'\n// import firestore from '../firestore'\nimport { updateUser, updateNickname } from '../redux-helpers'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\n\nfunction App(props) {\n  const [user, setUser] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const nickname = window.localStorage.getItem('nickname') || user.displayName.split(' ')[0]\n        const myUser = {\n          displayName: user.displayName,\n          email: user.email,\n          emailVerified: user.emailVerified,\n          photoURL: user.photoURL,\n          isAnonymous: user.isAnonymous,\n          uid: user.uid,\n          providerData: user.providerData,\n          nickname,\n        }\n        dispatch(updateUser({ loading: false, user: myUser }))\n        axios\n          .get(`/api/user/${user.uid}`)\n          .then((result) => {\n            console.log('User is registered')\n          })\n          .catch((err) => {\n            if (err.response && err.response.status === 404) {\n              console.log('User not registered')\n              axios\n                .post('/api/user', {\n                  uid: user.uid,\n                  info: myUser,\n                })\n                .then(() => {\n                  console.log('User registered successfully')\n                })\n                .catch((err) => {\n                  console.log('Error registering user', err)\n                })\n            } else {\n              console.log('An error occurred trying to GET user info')\n            }\n          })\n      } else {\n        console.log('Not signed in')\n        dispatch(updateUser({ loading: false, user: null }))\n      }\n    })\n  }, [])\n\n  return <Routes />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/bts/index.scss'\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport store from './redux-helpers'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n","module.exports = __webpack_public_path__ + \"static/media/sad_trombone.baad2ca9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/applause.c2030d5b.mp3\";"],"sourceRoot":""}